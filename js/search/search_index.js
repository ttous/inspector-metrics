var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.5","fields":["title","body"],"fieldVectors":[["title/classes/BaseMetric.html",[0,0.009,1,1.429]],["body/classes/BaseMetric.html",[0,0.015,1,2.651,2,0.194,3,0.224,4,0.122,5,2.464,6,0.35,7,2.009,8,1.656,9,0.963,10,0.737,11,3.945,12,2.41,13,0.806,14,0.019,15,1.727,16,1.153,17,2.432,18,2.403,19,1.052,20,0.122,21,1.188,22,0.926,23,2.211,24,1.586,25,2.7,26,0.878,27,2.135,28,5.198,29,3.477,30,0.652,31,3.945,32,4.747,33,4.487,34,3.945,35,4.487,36,4.747,37,3.181,38,3.945,39,5.025,40,3.523,41,3.945,42,3.945,43,3.523,44,4.487,45,4.487,46,0.711,47,0.601,48,2.215,49,0.872,50,0.892,51,1.019,52,3.208,53,0.857,54,2.41,55,5.025,56,2.567,57,2.956,58,1.683,59,3.208,60,3.208,61,3.945,62,3.208,63,0.371,64,1.08,65,3.208,66,3.208,67,3.208,68,3.208,69,3.523,70,3.208,71,1.352,72,1.015,73,3.208,74,0.464,75,3.208,76,3.523,77,3.208,78,2.849,79,3.208,80,3.208,81,3.523,82,3.208,83,3.208,84,3.523,85,3.208,86,3.523,87,3.208,88,3.523,89,3.208,90,4.605,91,3.208,92,3.523,93,3.208,94,3.523,95,3.208,96,4.605,97,3.208,98,3.523,99,3.208,100,2.27,101,3.208,102,3.208,103,0.319,104,0.213,105,3.498,106,2.746,107,2.068,108,2.453,109,2.464,110,0.353,111,0.272,112,1.204,113,0.224,114,0.47,115,0.451,116,2.76,117,3.945,118,0.593,119,2.76,120,2.76,121,2.996,122,3.208,123,4.605,124,3.945,125,2.76,126,2.76,127,2.76,128,1.588,129,2.76,130,2.76,131,2.76,132,2.76,133,2.76,134,0.011,135,0.011]],["title/interfaces/BucketCounting.html",[111,0.223,136,1.98]],["body/interfaces/BucketCounting.html",[0,0.014,2,0.29,3,0.294,4,0.182,6,0.235,8,2.168,9,0.929,10,0.82,14,0.019,20,0.182,23,2.066,24,1.631,26,0.537,30,0.854,46,0.791,49,0.783,50,0.932,51,0.924,56,3.361,63,0.354,64,1.213,74,0.437,103,0.328,104,0.318,107,3.089,110,0.437,111,0.434,112,1.592,113,0.347,114,0.457,115,0.676,118,1.111,134,0.014,135,0.014,136,3.721,137,3.352,138,3.077,139,1.957,140,3.586,141,2.742,142,3.403,143,4.809,144,3.721,145,4.793,146,1.781,147,1.956,148,1.406,149,4.793,150,3.576,151,4.614,152,1.498,153,3.682,154,3.682,155,1.406,156,1.571,157,1.631,158,1.498,159,1.73,160,3.682,161,2.012,162,3.352,163,3.352,164,0.8,165,3.682,166,3.089,167,1.648,168,4.614,169,3.682,170,3.682,171,3.352,172,3.682,173,3.682,174,3.682,175,2.87]],["title/classes/Buckets.html",[0,0.009,140,1.762]],["body/classes/Buckets.html",[0,0.015,2,0.271,3,0.282,4,0.17,6,0.219,8,1.617,9,0.9,10,0.686,14,0.019,16,0.954,19,1.468,20,0.17,21,1.49,23,2.442,24,1.562,26,0.712,27,2.294,30,0.818,46,0.823,47,0.528,48,2.41,49,0.881,50,0.87,51,0.932,53,0.567,56,2.506,63,0.328,64,1.283,71,1.175,72,0.903,74,0.429,103,0.314,104,0.297,107,3.707,110,0.429,111,0.411,112,1.508,113,0.311,114,0.445,115,0.659,118,1.064,134,0.014,135,0.014,136,3.524,137,3.132,138,3.045,139,1.637,140,3.592,141,2.294,142,2.847,143,3.132,144,3.022,146,1.562,147,2,148,1.362,150,3.657,151,3.439,152,1.4,153,3.439,154,3.439,155,1.362,156,1.468,157,1.562,158,1.4,159,1.617,160,4.419,161,2.415,162,4.023,163,4.023,164,1.12,165,5.152,166,4.096,167,1.978,168,5.152,169,3.439,170,4.419,171,4.852,172,4.882,173,3.439,174,3.439,175,2.681,176,4.882,177,1.274,178,4.477,179,4.477,180,4.477,181,4.477,182,4.477,183,4.477,184,4.477,185,3.439,186,2.886,187,1.007,188,4.477,189,1.786,190,3.132,191,4.477,192,4.477,193,4.419,194,4.477,195,3.132,196,4.477]],["title/classes/Clock.html",[0,0.009,197,1.178]],["body/classes/Clock.html",[0,0.017,2,0.296,3,0.324,4,0.185,6,0.239,7,2.56,10,0.79,13,0.86,14,0.019,19,1.604,20,0.185,26,0.777,30,0.865,46,0.763,48,1.855,50,1.183,51,0.657,63,0.239,71,1.125,74,0.45,103,0.267,104,0.325,110,0.45,111,0.36,112,1.368,113,0.324,114,0.404,115,0.598,118,1.225,134,0.014,135,0.014,146,1.652,147,1.459,148,1.419,152,1.529,159,2.196,161,2.78,197,2.375,198,3.153,199,2.554,200,4.673,201,2.038,202,4.892,203,4.591,204,4.673,205,3.921,206,1.814,207,3.154,208,3.421,209,4.844,210,3.421,211,2.287,212,3.421,213,1.855,214,3.153,215,3.421,216,4.673,217,3.758,218,3.758,219,4.255,220,4.673,221,3.758,222,3.758,223,4.673,224,3.758,225,2.277,226,3.758,227,2.929,228,2.166,229,2.421]],["title/interfaces/Counting.html",[111,0.223,138,1.503]],["body/interfaces/Counting.html",[0,0.014,2,0.295,3,0.297,4,0.185,6,0.239,8,1.76,9,0.932,10,0.724,14,0.019,20,0.185,23,2.088,24,1.878,26,0.547,30,0.863,46,0.802,49,0.825,50,0.948,51,0.815,56,2.729,63,0.339,64,1.223,74,0.43,103,0.332,104,0.324,107,3.142,110,0.439,111,0.43,112,1.6,113,0.339,114,0.459,115,0.68,118,1.123,134,0.014,135,0.014,136,3.635,137,3.41,138,3.055,139,1.727,140,3.55,141,2.421,142,3.005,143,3.41,144,3.739,146,1.795,147,1.81,148,1.301,150,3.424,151,3.745,152,1.898,153,4.663,154,4.663,155,1.417,156,1.99,157,1.878,158,1.898,159,2.192,160,3.745,161,2.047,162,3.41,163,3.41,164,0.814,165,3.745,166,3.142,167,1.677,168,4.663,169,3.745,170,3.745,171,3.41,172,3.745,173,3.745,174,3.745,175,2.92,230,4.876]],["title/classes/DefaultReservoir.html",[0,0.009,231,2.428]],["body/classes/DefaultReservoir.html",[0,0.015,2,0.269,3,0.28,4,0.168,6,0.217,10,0.826,14,0.019,16,0.86,19,1.457,20,0.168,21,1.483,22,1.157,26,0.834,30,0.814,46,0.825,47,0.558,48,1.685,49,0.934,51,0.952,53,0.802,63,0.217,64,1.237,71,1.059,72,0.814,74,0.442,103,0.313,104,0.295,110,0.404,111,0.339,113,0.31,114,0.485,115,0.622,134,0.014,135,0.014,152,1.389,164,1.117,177,1.264,231,4.794,232,3.108,233,4.004,234,4.009,235,3.908,236,3.507,237,5.137,238,5.137,239,5.537,240,2.906,241,2.841,242,3.008,243,4.397,244,5.724,245,4.429,246,4.444,247,4.444,248,2.677,249,2.833,250,1.365,251,4.444,252,3.792,253,4.444,254,2.076,255,1.35,256,4.397,257,4.397,258,3.689,259,2.487,260,1.772,261,3.414,262,3.689]],["title/classes/ExponentiallyWeightedMovingAverage.html",[0,0.009,263,2.635]],["body/classes/ExponentiallyWeightedMovingAverage.html",[0,0.012,2,0.188,3,0.22,4,0.118,6,0.152,10,0.688,13,0.79,14,0.019,16,0.791,19,1.021,20,0.118,21,1.163,22,1.195,23,2.542,26,0.844,30,0.638,46,0.824,47,0.589,48,2.547,49,0.906,50,1.024,51,0.993,53,0.569,63,0.152,71,0.974,72,0.748,74,0.447,103,0.245,104,0.207,110,0.348,111,0.266,113,0.329,114,0.486,115,0.645,118,0.831,134,0.011,135,0.011,139,0.886,146,1.823,152,1.404,158,0.974,159,2.298,164,0.75,176,3.45,177,1.498,186,2.008,187,1.662,189,2.769,193,2.393,201,1.799,205,2.008,206,0.929,207,2.551,213,1.182,227,2.689,242,3.528,248,1.457,250,1.247,252,3.153,254,1.726,263,5.145,264,5.702,265,2.179,266,4.957,267,4.957,268,3.929,269,6.386,270,4.784,271,4.957,272,4.957,273,4.957,274,4.957,275,4.957,276,4.957,277,5.643,278,5.507,279,4.012,280,4.957,281,2.467,282,5.255,283,3.863,284,4.957,285,5.474,286,3.863,287,4.137,288,4.491,289,3.115,290,4.957,291,6.112,292,6.112,293,3.115,294,3.115,295,3.225,296,3.115,297,3.115,298,3.115,299,3.115,300,4.031,301,3.115,302,3.115,303,3.115,304,1.886,305,3.115,306,4.957,307,2.359,308,3.115,309,4.53,310,3.115,311,3.115,312,3.115,313,2.689,314,2.298,315,3.863,316,3.45,317,3.863,318,3.863,319,3.863,320,3.863,321,3.115,322,1.743,323,2.68,324,3.683,325,2.68,326,1.182,327,1.125,328,2.179,329,4.53,330,3.863,331,3.863,332,2.68,333,2.68,334,5.474,335,2.68,336,4.53]],["title/interfaces/Gauge.html",[111,0.223,337,0.976]],["body/interfaces/Gauge.html",[0,0.014,1,2.534,2,0.302,3,0.301,4,0.189,6,0.351,8,1.802,9,0.937,10,0.735,14,0.019,15,1.522,16,1.048,20,0.189,22,0.976,26,0.749,30,0.875,46,0.777,47,0.526,49,0.904,50,1.197,51,0.67,53,0.632,58,1.495,63,0.301,72,0.949,74,0.441,78,2.782,103,0.337,104,0.331,110,0.422,111,0.396,112,1.611,113,0.327,114,0.476,115,0.656,121,2.793,122,3.491,134,0.015,135,0.015,146,1.945,152,1.926,158,1.56,164,0.834,195,3.491,233,3.491,240,2.096,255,1.177,337,1.974,338,4.293,339,4.731,340,3.547,341,4.991,342,1.893,343,1.42,344,2.47,345,5.681,346,4.293,347,2.334,348,4.731,349,4.991]],["title/interfaces/Groupable.html",[105,2.256,111,0.223]],["body/interfaces/Groupable.html",[2,0.331,3,0.319,4,0.207,6,0.319,8,2.352,9,0.912,14,0.019,15,1.61,16,1.148,18,2.662,20,0.207,29,3.423,30,0.926,33,5.529,41,5.604,47,0.431,51,0.875,58,1.638,63,0.268,64,1.205,71,1.013,72,0.778,74,0.421,92,5.005,103,0.299,104,0.364,105,4.403,110,0.394,111,0.436,113,0.319,114,0.433,115,0.538,134,0.015,135,0.015,148,1.396,343,1.854,350,4.71,351,5.476,352,5.476]],["title/classes/HdrSnapshot.html",[0,0.009,353,2.894]],["body/classes/HdrSnapshot.html",[0,0.014,2,0.18,3,0.212,4,0.113,6,0.276,9,0.76,10,0.914,14,0.019,16,0.9,19,0.974,20,0.113,22,0.893,24,0.807,26,0.868,30,0.617,46,0.819,47,0.444,49,0.831,50,1.369,51,0.963,53,0.793,58,1.208,63,0.145,64,1.043,71,0.803,72,0.801,74,0.471,103,0.353,104,0.197,110,0.341,112,0.976,113,0.145,114,0.49,115,0.651,118,0.55,134,0.01,135,0.01,136,2.693,138,2.497,140,3.023,141,1.731,150,1.471,155,1.509,157,2.082,159,2.035,164,0.856,177,1.235,187,0.976,189,1.185,228,1.921,235,1.561,240,2.367,241,2.67,242,1.561,249,2.79,252,1.779,255,1.023,279,1.663,322,1.663,327,1.851,340,3.099,353,5.713,354,5.546,355,2.078,356,4.571,357,2.654,358,4.33,359,4.33,360,4.33,361,4.33,362,4.33,363,4.33,364,4.33,365,4.33,366,4.33,367,4.33,368,2.971,369,2.971,370,2.971,371,2.976,372,4.874,373,7.462,374,7.462,375,4.339,376,7.167,377,2.971,378,4.339,379,2.971,380,4.339,381,2.971,382,4.339,383,2.971,384,4.339,385,2.971,386,5.091,387,2.971,388,2.971,389,4.339,390,2.971,391,3.035,392,2.971,393,2.598,394,2.598,395,3.333,396,2.971,397,2.282,398,2.971,399,4.339,400,2.971,401,3.942,402,3.375,403,3.749,404,3.633,405,3.937,406,1.561,407,2.556,408,2.971,409,2.971,410,2.971,411,2.282,412,2.971,413,2.971,414,2.971,415,2.971,416,2.971,417,2.971,418,2.971,419,2.971,420,2.971,421,2.971,422,2.971,423,2.971,424,2.971,425,2.282,426,2.078,427,3.733,428,2.971,429,3.733,430,2.282,431,3.333,432,2.282,433,2.282,434,2.282,435,3.937,436,2.282,437,2.282,438,1.915,439,2.282,440,2.556,441,1.915,442,1.779,443,2.971,444,2.971,445,2.971,446,2.971,447,2.556,448,2.556,449,2.971,450,4.339,451,2.971,452,2.282,453,2.971,454,2.971,455,2.971,456,2.971,457,2.971]],["title/interfaces/IMetricReporter.html",[111,0.223,458,1.98]],["body/interfaces/IMetricReporter.html",[0,0.009,2,0.121,3,0.157,4,0.076,6,0.098,7,2.403,8,0.723,9,0.947,10,0.822,12,2.106,13,0.564,14,0.019,15,0.991,16,0.688,17,2.418,18,1.102,20,0.152,22,0.317,24,1.854,25,2.673,26,0.675,27,2.402,30,0.456,37,2.482,44,2.462,46,0.724,47,0.575,49,0.478,50,0.891,51,0.784,53,0.74,54,1.052,58,0.859,63,0.34,64,0.928,71,0.928,72,0.856,74,0.456,78,2.638,100,1.984,103,0.361,104,0.133,108,1.346,110,0.373,111,0.397,113,0.196,114,0.5,115,0.733,118,1.263,128,2.269,134,0.015,135,0.008,139,2.05,142,0.991,146,0.87,148,1.075,155,1.497,156,1.644,157,1.745,164,0.67,167,2.008,187,0.721,197,1.825,199,1.683,201,0.519,206,0.956,225,0.688,228,2.029,229,0.991,236,0.991,250,1.024,254,1.314,255,1.261,281,0.656,314,0.798,326,1.521,327,1.447,337,1.665,342,1.216,343,2.182,344,2.648,357,0.886,371,2.82,458,3.376,459,2.981,460,0.798,461,3.205,462,2.807,463,3.205,464,2.757,465,2.73,466,2.401,467,2.831,468,2.002,469,2.002,470,2.994,471,2.745,472,2.82,473,2.002,474,2.401,475,2.002,476,1.599,477,2.401,478,2.666,479,2.002,480,2.482,481,2.002,482,1.4,483,2.401,484,3.204,485,2.811,486,2.401,487,2.482,488,2.401,489,2.244,490,1.875,491,2.244,492,2.745,493,2.745,494,2.244,495,2.401,496,2.401,497,1.919,498,2.002,499,2.002,500,2.002,501,2.009,502,2.457,503,2.106,504,1.875,505,1.199,506,2.488,507,2.269,508,1.919,509,2.648,510,2.964,511,3.093,512,0.991,513,3.204,514,2.482,515,2.666,516,0.991,517,3.616,518,1.775,519,3.077,520,2.482,521,1.919,522,1.499,523,2.635,524,1.919,525,1.419,526,1.684,527,1.794,528,2.781,529,1.984,530,1.794,531,2.735,532,1.587,533,2.565,534,0.991,535,1.052,536,1.052,537,1.199,538,1.199,539,1.199,540,1.199,541,1.12,542,1.199,543,1.919,544,1.199,545,1.199,546,1.199,547,2.369,548,1.919,549,1.199,550,1.199,551,1.199,552,1.199,553,1.199,554,1.919,555,1.199,556,3.5,557,1.199,558,3.37,559,1.199,560,1.199,561,1.199,562,1.199,563,1.199,564,1.199,565,1.919,566,1.199,567,1.052,568,1.587,569,1.199,570,1.199,571,3.003,572,3.003,573,2.401,574,2.401,575,2.401,576,2.401,577,1.919,578,1.199,579,1.919,580,3.204,581,1.919,582,1.587,583,1.199,584,1.919,585,1.199,586,1.199,587,1.919,588,1.199,589,0.991,590,1.199,591,1.199,592,1.919,593,1.199,594,0.991,595,1.199,596,1.199,597,1.919,598,1.199,599,0.991,600,1.199,601,1.199,602,1.919,603,1.199,604,0.991,605,3.204,606,1.199,607,0.936,608,0.991,609,1.199,610,1.12,611,1.12,612,3.145,613,1.919,614,1.919,615,1.199,616,1.052,617,2.401,618,1.199,619,1.199,620,1.199,621,1.199,622,1.052,623,1.199,624,1.199,625,1.199,626,0.991,627,0.991,628,0.991,629,0.991,630,0.991,631,0.991,632,1.419,633,1.919,634,1.199,635,2.565,636,1.684,637,1.199,638,1.12,639,1.199,640,1.199,641,1.199,642,1.199,643,1.199,644,2.401,645,1.199,646,1.199,647,1.199,648,1.199,649,1.199,650,1.199,651,1.199]],["title/classes/Int64Wrapper.html",[0,0.009,652,2.256]],["body/classes/Int64Wrapper.html",[0,0.017,2,0.299,3,0.242,4,0.187,6,0.242,14,0.019,16,0.919,19,1.62,20,0.187,21,1.586,22,1.101,26,0.853,30,0.87,45,5.339,46,0.8,47,0.547,49,0.903,50,0.961,51,0.96,53,0.881,58,1.531,64,0.914,71,1.132,72,0.87,74,0.451,109,4.702,110,0.37,113,0.3,114,0.474,115,0.601,118,0.914,134,0.014,135,0.014,164,1.022,177,1.406,195,3.456,250,1.25,254,2.279,372,3.945,425,4.702,487,3.03,652,4.531,653,3.795,654,6.951,655,6.951,656,6.951,657,6.121,658,6.121,659,6.121,660,4.941,661,4.941,662,5.979,663,6.121,664,6.121,665,6.121,666,5.339,667,4.941,668,4.702,669,3.184,670,4.25,671,4.25,672,4.941,673,6.121,674,4.941,675,4.941,676,4.941,677,4.941]],["title/interfaces/LengthAttributeInterface.html",[111,0.223,678,2.256]],["body/interfaces/LengthAttributeInterface.html",[0,0.013,1,2.332,2,0.253,3,0.269,4,0.158,6,0.32,9,0.828,10,0.656,13,0.967,14,0.019,15,1.033,16,0.923,20,0.158,21,1.425,22,0.872,23,2.479,25,2.603,26,0.617,30,0.782,46,0.78,47,0.484,49,0.499,53,0.53,58,1.4,63,0.269,74,0.449,103,0.336,104,0.278,110,0.445,111,0.447,112,1.237,113,0.269,114,0.472,115,0.698,134,0.013,135,0.013,146,1.494,147,2.078,155,1.4,158,1.922,164,0.698,177,1.565,187,1.237,240,3.027,248,1.955,250,1.334,255,1.297,260,3.097,304,1.755,337,1.758,340,2.069,343,1.189,347,1.955,632,2.892,678,4.254,679,2.503,680,2.339,681,4.747,682,4.152,683,3.963,684,4.173,685,4.173,686,4.173,687,3.963,688,4.744,689,2.924,690,4.569,691,4.569,692,2.924,693,2.924,694,4.569,695,2.924,696,2.924,697,2.924,698,2.924,699,2.924,700,4.874,701,2.924,702,2.924,703,2.924]],["title/interfaces/LengthMethodInterface.html",[111,0.223,684,2.256]],["body/interfaces/LengthMethodInterface.html",[0,0.013,1,2.332,2,0.253,3,0.269,4,0.158,6,0.32,9,0.828,10,0.656,13,0.967,14,0.019,15,1.033,16,0.923,20,0.158,22,0.872,23,2.479,25,2.603,26,0.617,30,0.965,46,0.774,47,0.433,49,0.499,51,0.561,53,0.53,58,1.4,63,0.269,74,0.451,103,0.336,104,0.278,110,0.445,111,0.447,112,1.237,113,0.269,114,0.472,115,0.698,134,0.013,135,0.013,146,1.494,147,2.078,155,1.4,158,1.72,164,0.698,177,1.565,187,1.237,240,3.027,248,1.955,250,1.334,255,0.986,260,3.097,304,1.755,337,1.758,340,2.069,343,1.189,347,1.955,632,2.892,678,4.173,679,3.294,680,2.339,681,4.747,682,4.152,683,3.545,684,4.254,685,4.173,686,4.173,687,3.963,688,4.744,689,2.924,690,4.569,691,4.569,692,2.924,693,2.924,694,4.569,695,2.924,696,2.924,697,2.924,698,2.924,699,2.924,700,4.874,701,2.924,702,2.924,703,2.924,704,4.18]],["title/interfaces/LogLine.html",[111,0.223,705,2.428]],["body/interfaces/LogLine.html",[0,0.011,2,0.294,3,0.199,4,0.103,6,0.133,7,1.398,9,0.901,10,0.485,14,0.019,15,0.672,16,1.1,17,2.222,18,1.987,20,0.103,21,1.053,22,0.644,24,1.793,25,2.547,26,0.605,27,1.084,29,3.81,46,0.607,47,0.555,49,0.892,53,0.865,58,1.299,63,0.199,64,0.9,71,0.752,72,0.578,74,0.448,103,0.385,104,0.181,110,0.326,111,0.391,112,1.363,113,0.133,114,0.476,115,0.723,118,1.263,134,0.014,135,0.01,138,2.153,139,1.644,141,2.153,147,0.811,148,1.157,150,3.422,155,1.554,156,1.77,157,1.754,164,0.679,177,0.774,187,1.094,189,1.621,197,1.521,201,0.704,206,1.212,213,1.541,225,1.398,241,1.541,249,2.672,250,0.83,255,0.958,268,2.135,281,1.77,295,2.274,304,2.426,307,3.186,327,2.086,337,1.711,342,1.846,343,1.879,347,1.271,391,4.703,393,1.628,394,2.433,406,3.186,460,1.084,467,2.192,472,1.621,480,2.409,482,1.902,490,1.271,501,2.02,502,2.085,503,2.118,506,2.558,507,2.409,510,2.558,511,2.154,512,1.346,514,2.409,515,1.204,517,3.521,518,1.204,519,1.706,525,2.558,529,2.011,531,1.204,532,1.346,547,1.799,556,3.492,568,1.346,582,1.346,589,1.346,594,1.346,599,1.346,604,1.346,607,1.271,608,2.011,627,1.346,628,1.346,629,1.346,630,1.346,631,1.346,705,4.698,706,1.902,707,4.224,708,2.619,709,5.011,710,4.08,711,2.619,712,2.914,713,2.914,714,4.647,715,1.902,716,4.147,717,4.618,718,3.48,719,1.752,720,3.403,721,2.088,722,1.902,723,3.122,724,2.088,725,3.122,726,2.088,727,1.902,728,2.842,729,2.088,730,2.088,731,2.088,732,2.088,733,2.088,734,4.657,735,1.628,736,2.088,737,1.902,738,2.088,739,2.088,740,2.702,741,2.088,742,2.088,743,4.439,744,3.724,745,2.088,746,2.088,747,4.439,748,4.439,749,2.088,750,4.439,751,4.439,752,4.439,753,4.439,754,2.088,755,2.088,756,2.088,757,2.088,758,2.088,759,3.122,760,2.433,761,3.122,762,2.433,763,3.122,764,2.433,765,3.122,766,2.619,767,3.122,768,2.619,769,3.122,770,2.619,771,3.122,772,2.088,773,2.088,774,2.088,775,2.088,776,3.738,777,3.122,778,3.122,779,3.122,780,3.122,781,3.122,782,3.122,783,3.122,784,3.122,785,3.122,786,3.122,787,3.122,788,3.122,789,3.122,790,3.122,791,3.122,792,3.122,793,3.122,794,3.122,795,3.122,796,3.122,797,2.088,798,3.122,799,3.122,800,3.122,801,3.122,802,2.088,803,2.088,804,2.088,805,3.122,806,2.088,807,3.122,808,2.088,809,3.122,810,2.088,811,3.122,812,2.088,813,2.088,814,2.088,815,2.088,816,2.088,817,2.088,818,2.088,819,2.088,820,2.088,821,2.088]],["title/interfaces/Logger.html",[111,0.223,710,2.109]],["body/interfaces/Logger.html",[2,0.445,3,0.298,4,0.185,6,0.239,7,2.091,13,1.328,14,0.019,20,0.185,21,1.575,47,0.561,63,0.239,103,0.267,104,0.325,110,0.368,111,0.392,134,0.014,135,0.014,148,1.303,211,3.532,304,3.172,491,4.36,607,3.532,707,4.714,709,5.283,710,3.986,728,5.283,822,4.205,823,5.23,824,7.26,825,6.246,826,6.246,827,7.26,828,7.441,829,6.498,830,6.08,831,4.252,832,4.252,833,6.08,834,7.122]],["title/interfaces/LoggerReporterOptions.html",[111,0.223,718,2.428]],["body/interfaces/LoggerReporterOptions.html",[0,0.011,2,0.295,3,0.2,4,0.103,6,0.134,7,0.939,9,0.909,10,0.487,14,0.019,15,0.675,16,1.101,17,2.225,18,1.991,20,0.103,21,1.056,22,0.646,24,1.795,25,2.549,26,0.607,27,1.089,29,3.71,46,0.609,47,0.551,49,0.893,53,0.853,58,1.046,63,0.2,64,0.902,71,0.505,72,0.823,74,0.448,103,0.386,104,0.181,110,0.327,111,0.383,112,1.415,113,0.134,114,0.476,115,0.723,118,1.264,134,0.014,135,0.01,138,2.158,139,1.647,141,2.158,147,0.815,148,1.241,150,3.425,155,1.555,156,1.774,157,1.756,164,0.681,177,0.777,187,1.097,189,1.626,197,1.525,201,0.708,206,1.216,213,1.036,225,1.402,241,1.547,249,2.678,250,0.833,255,0.961,268,2.142,281,1.774,295,2.282,304,2.049,307,3.191,327,2.09,337,1.713,342,1.851,343,1.916,347,1.277,391,4.709,393,1.636,394,2.442,406,3.191,460,1.089,467,2.196,472,1.626,480,2.415,482,1.91,490,1.277,501,2.022,502,2.089,503,2.121,506,2.563,507,2.018,510,2.563,511,2.16,512,1.352,514,2.415,515,1.209,517,3.523,518,1.209,519,1.712,525,2.563,529,2.018,531,1.209,532,1.352,547,1.805,556,3.495,568,1.352,582,1.352,589,1.352,594,1.352,599,1.352,604,1.352,607,1.277,608,2.018,627,1.352,628,1.352,629,1.352,630,1.352,631,1.352,705,4.677,706,1.91,707,4.293,708,1.76,709,4.84,710,4.102,711,2.628,712,3.24,713,2.922,714,4.651,715,1.91,716,4.157,717,4.651,718,3.732,719,1.76,720,3.413,721,2.098,722,1.91,723,3.132,724,2.098,725,3.132,726,2.098,727,1.91,728,2.852,729,2.098,730,2.098,731,2.098,732,2.098,733,2.098,734,4.665,735,1.636,736,2.098,737,1.91,738,2.098,739,2.098,740,2.707,741,2.098,742,2.098,743,4.448,744,3.732,745,2.098,746,2.098,747,4.448,748,4.448,749,2.098,750,4.448,751,4.448,752,4.448,753,4.448,754,2.098,755,2.098,756,2.098,757,2.098,758,2.098,759,3.132,760,2.442,761,3.132,762,2.442,763,3.132,764,2.442,765,3.132,766,2.628,767,3.132,768,2.628,769,3.132,770,2.628,771,3.132,772,2.098,773,2.098,774,2.098,775,2.098,776,3.748,777,3.132,778,3.132,779,3.132,780,3.132,781,3.132,782,3.132,783,3.132,784,3.132,785,3.132,786,3.132,787,3.132,788,3.132,789,3.132,790,3.132,791,3.132,792,3.132,793,3.132,794,3.132,795,3.132,796,3.132,797,2.098,798,3.132,799,3.132,800,3.132,801,3.132,802,2.098,803,2.098,804,2.098,805,3.132,806,2.098,807,3.132,808,2.098,809,3.132,810,2.098,811,3.132,812,2.098,813,2.098,814,2.098,815,2.098,816,2.098,817,2.098,818,2.098,819,2.098,820,2.098,821,2.098]],["title/interfaces/LoggerReportingContext.html",[111,0.223,714,2.428]],["body/interfaces/LoggerReportingContext.html",[0,0.011,2,0.295,3,0.2,4,0.104,6,0.134,7,0.941,9,0.902,10,0.487,14,0.019,15,0.676,16,1.101,17,2.226,18,1.993,20,0.104,21,1.057,22,0.647,24,1.796,25,2.55,26,0.607,27,1.091,29,3.741,46,0.609,47,0.551,49,0.893,53,0.838,58,1.047,63,0.2,64,0.903,71,0.506,72,0.58,74,0.448,103,0.386,104,0.182,110,0.327,111,0.392,112,1.455,113,0.134,114,0.476,115,0.723,118,1.264,134,0.014,135,0.01,138,2.16,139,1.648,141,2.16,147,0.816,148,1.16,150,3.426,155,1.556,156,1.775,157,1.757,164,0.682,177,0.778,187,1.098,189,1.628,197,1.527,201,0.709,206,1.217,213,1.037,225,1.404,241,1.548,249,2.68,250,0.833,255,0.962,268,2.145,281,1.775,295,2.284,304,2.05,307,3.193,327,2.092,337,1.714,342,1.852,343,1.916,347,1.279,391,4.71,393,1.638,394,2.444,406,3.193,460,1.091,467,2.197,472,1.628,480,2.417,482,1.913,490,1.279,501,2.023,502,2.09,503,2.122,506,2.565,507,2.417,510,2.565,511,2.397,512,2.02,514,2.417,515,1.211,517,3.524,518,1.211,519,1.714,525,2.565,529,2.02,531,1.211,532,1.354,547,1.807,556,3.496,568,1.354,582,1.354,589,1.354,594,1.354,599,1.354,604,1.354,607,1.279,608,2.02,627,1.354,628,1.354,629,1.354,630,1.354,631,1.354,705,4.678,706,1.913,707,4.229,708,1.763,709,4.841,710,4.039,711,2.631,712,2.924,713,2.924,714,4.678,715,2.855,716,4.837,717,4.622,718,3.49,719,1.763,720,3.415,721,2.101,722,1.913,723,3.136,724,2.101,725,3.136,726,2.101,727,1.913,728,2.855,729,2.101,730,2.101,731,2.101,732,2.101,733,2.101,734,4.668,735,1.638,736,2.101,737,1.913,738,2.101,739,2.101,740,2.709,741,2.101,742,2.101,743,4.45,744,3.734,745,2.101,746,2.101,747,4.45,748,4.45,749,2.101,750,4.45,751,4.45,752,4.45,753,4.45,754,2.101,755,2.101,756,2.101,757,2.101,758,2.101,759,3.136,760,2.444,761,3.136,762,2.444,763,3.136,764,2.444,765,3.136,766,2.631,767,3.136,768,2.631,769,3.136,770,2.631,771,3.136,772,2.101,773,2.101,774,2.101,775,2.101,776,3.751,777,3.136,778,3.136,779,3.136,780,3.136,781,3.136,782,3.136,783,3.136,784,3.136,785,3.136,786,3.136,787,3.136,788,3.136,789,3.136,790,3.136,791,3.136,792,3.136,793,3.136,794,3.136,795,3.136,796,3.136,797,2.101,798,3.136,799,3.136,800,3.136,801,3.136,802,2.101,803,2.101,804,2.101,805,3.136,806,2.101,807,3.136,808,2.101,809,3.136,810,2.101,811,3.136,812,2.101,813,2.101,814,2.101,815,2.101,816,2.101,817,2.101,818,2.101,819,2.101,820,2.101,821,2.101]],["title/interfaces/MetadataContainer.html",[106,2.256,111,0.223]],["body/interfaces/MetadataContainer.html",[0,0.014,2,0.292,3,0.295,4,0.183,6,0.337,14,0.019,15,1.491,16,1.156,20,0.183,29,4.074,30,0.858,34,5.19,35,5.296,38,5.19,42,5.19,47,0.57,49,0.864,51,0.926,53,0.917,58,1.633,63,0.354,66,5.192,71,1.339,72,0.935,74,0.458,76,4.635,78,3.079,84,4.635,94,4.635,103,0.264,104,0.321,106,4.397,110,0.365,111,0.421,113,0.337,114,0.458,115,0.677,128,3.583,134,0.014,135,0.014,147,1.799,250,1.408,342,2.496,476,2.406,528,2.986,567,3.17,835,6.105,836,3.709,837,4.828,838,4.828,839,6.033,840,6.033,841,6.033,842,4.828,843,4.828]],["title/interfaces/Metered.html",[111,0.223,501,1.178]],["body/interfaces/Metered.html",[2,0.304,3,0.303,4,0.19,6,0.246,9,0.938,10,0.738,13,1.087,14,0.019,20,0.19,30,0.879,46,0.816,51,0.964,63,0.246,74,0.459,103,0.338,104,0.333,110,0.374,111,0.397,112,1.506,113,0.371,114,0.477,134,0.015,135,0.015,139,1.989,141,2.915,144,3.672,152,1.933,158,1.933,189,2.465,248,2.89,295,3.46,307,4.072,314,2.915,322,3.46,326,2.772,371,2.465,501,2.338,735,3.702,844,4.319,845,5.318,846,6.013,847,6.013,848,6.013,849,6.013,850,5.02,851,5.02,852,5.02,853,5.02,854,6.181,855,5.02]],["title/interfaces/Metric.html",[9,0.477,111,0.223]],["body/interfaces/Metric.html",[0,0.015,1,2.74,2,0.241,3,0.261,4,0.151,5,3.06,6,0.357,7,2.065,8,1.438,9,0.979,10,0.716,11,3.426,12,2.093,13,0.7,14,0.019,15,1.763,16,1.113,17,2.204,18,2.204,20,0.151,22,0.844,23,2.065,24,1.081,25,2.635,26,0.856,27,1.589,28,4.611,29,3.154,30,0.757,32,5.131,33,3.06,35,3.06,36,5.131,37,1.972,40,4.092,43,4.092,45,3.06,46,0.631,47,0.561,49,0.838,50,0.774,51,0.861,53,0.812,54,2.093,55,4.583,56,2.229,57,2.567,58,1.676,61,3.426,63,0.363,64,0.985,66,2.786,69,3.06,71,0.985,72,0.757,74,0.467,76,3.06,78,2.664,81,3.06,84,3.06,86,3.06,88,3.06,90,5.164,92,3.06,94,3.06,96,5.164,98,3.06,100,1.972,103,0.35,104,0.265,105,4,106,3.19,107,2.567,108,2.691,109,4.092,110,0.387,111,0.356,112,1.441,113,0.314,114,0.489,115,0.523,116,3.426,117,4.583,118,0.737,119,3.426,120,3.426,121,3.359,122,3.726,123,5.164,124,4.583,125,3.426,126,3.426,127,3.426,128,1.972,129,3.426,130,3.426,131,3.426,132,3.426,133,3.426,134,0.013,135,0.013,856,3.983,857,3.983,858,3.983,859,3.983]],["title/interfaces/MetricEntry.html",[111,0.223,504,1.762]],["body/interfaces/MetricEntry.html",[2,0.308,3,0.305,4,0.193,6,0.249,9,0.79,14,0.019,19,2.044,20,0.193,21,1.615,46,0.788,47,0.553,49,0.915,50,1.212,53,0.79,57,4.018,63,0.249,103,0.278,104,0.338,110,0.308,111,0.427,113,0.305,114,0.414,134,0.015,135,0.015,141,2.801,155,1.444,158,1.949,187,1.402,201,1.615,326,2.664,337,1.615,343,2.208,459,2.519,504,3.369,509,3.086,522,2.915,523,3.275,525,3.109,526,3.275,527,3.489,528,3.476,535,3.275,611,3.489,635,3.93,638,3.93,737,4.912,860,3.91,861,6.234,862,5.362,863,6.234,864,6.234,865,7.023,866,6.234,867,6.234,868,6.234,869,6.234,870,6.234,871,6.234,872,6.234,873,6.234,874,6.234,875,6.234,876,5.362,877,7.023]],["title/classes/MetricRegistration.html",[0,0.009,878,2.428]],["body/classes/MetricRegistration.html",[0,0.012,1,1.325,2,0.099,3,0.133,4,0.062,6,0.336,9,0.977,10,0.325,13,0.716,14,0.019,15,1.204,16,1.138,18,2.294,19,0.537,20,0.196,21,0.706,22,1.074,23,2.273,24,1.924,26,0.85,46,0.638,47,0.487,48,1.543,50,0.791,51,0.469,53,0.955,58,1.657,63,0.352,64,1.293,71,0.303,72,0.233,74,0.469,78,2.635,103,0.338,104,0.109,110,0.312,112,0.612,113,0.32,114,0.497,115,0.746,118,1.254,121,0.918,134,0.006,135,0.006,138,0.654,140,2.891,144,0.861,147,1.77,148,1.442,152,0.513,155,1.512,156,2.206,157,1.907,158,0.851,161,2.355,164,0.584,177,0.467,187,1.215,189,0.654,197,2.066,199,2.269,211,0.767,225,0.937,234,3.303,235,0.861,249,1.348,250,1.145,254,1.692,255,1.148,260,1.086,313,1.631,327,1.864,337,1.498,339,2.684,342,1.543,356,2.092,357,2.392,393,0.982,401,1.905,403,1.631,406,3.505,411,1.259,426,1.147,430,1.259,431,2.092,432,1.259,433,1.259,434,1.259,435,2.684,436,1.259,437,1.259,438,1.057,439,1.259,441,1.057,442,0.982,467,2.833,476,1.943,478,0.726,487,0.812,501,2.149,502,2.127,503,2.254,515,1.206,516,2.411,616,0.861,622,0.861,626,1.729,636,0.861,740,2.527,878,3.483,879,2.437,880,1.057,881,2.343,882,2.092,883,4.44,884,2.343,885,2.724,886,1.639,887,3.463,888,3.985,889,3.139,890,1.057,891,4.151,892,3.005,893,3.884,894,2.092,895,1.41,896,1.41,897,3.327,898,5.625,899,1.41,900,1.41,901,1.41,902,1.41,903,5.983,904,4.44,905,1.41,906,1.41,907,1.41,908,1.41,909,1.41,910,1.41,911,1.41,912,2.343,913,2.343,914,2.343,915,2.343,916,1.41,917,2.343,918,1.41,919,1.41,920,3.005,921,2.343,922,1.41,923,1.41,924,1.41,925,1.41,926,1.41,927,1.259,928,1.41,929,1.41,930,1.41,931,1.41,932,1.41,933,1.41,934,1.41,935,3.5,936,1.41,937,4.621,938,4.259,939,5.023,940,2.092,941,4.621,942,5.488,943,2.343,944,4.19,945,4.19,946,5.219,947,2.092,948,1.259,949,2.343,950,2.092,951,1.259,952,2.343,953,2.092,954,1.259,955,2.343,956,2.092,957,1.259,958,2.343,959,3.61,960,4.19,961,1.259,962,1.41,963,1.147,964,1.147,965,1.41,966,2.343,967,1.41,968,1.41,969,3.884,970,1.41,971,1.41,972,1.41,973,1.41,974,1.41,975,1.41,976,1.41,977,1.41,978,1.41,979,1.41,980,1.41,981,1.41,982,1.41,983,4.824,984,1.41,985,1.41,986,1.41,987,1.41,988,1.41,989,1.41,990,1.41,991,3.742,992,1.41,993,1.41,994,2.343,995,2.343,996,1.41,997,2.343,998,2.343,999,1.41,1000,1.41,1001,1.41,1002,1.41,1003,1.41,1004,3.884,1005,1.41,1006,1.41,1007,1.41,1008,1.41,1009,4.648,1010,4.19,1011,1.41,1012,1.41,1013,2.343,1014,1.41,1015,1.41,1016,2.343,1017,1.41,1018,1.41,1019,2.343,1020,1.259,1021,1.41,1022,3.005,1023,1.259,1024,1.41,1025,2.343,1026,1.41,1027,2.343,1028,1.259,1029,1.41,1030,1.41,1031,1.41,1032,1.259,1033,1.41,1034,1.41,1035,2.343,1036,2.343,1037,2.343,1038,2.343,1039,2.343,1040,1.41,1041,2.343,1042,1.41,1043,1.41,1044,1.41,1045,1.41,1046,1.41,1047,1.259,1048,1.41,1049,1.41,1050,1.41,1051,1.41,1052,1.41,1053,1.41,1054,1.41,1055,1.41,1056,1.41,1057,1.41,1058,1.41,1059,1.41,1060,1.41,1061,1.41,1062,1.41,1063,1.41,1064,1.41,1065,2.092,1066,1.41,1067,1.755,1068,2.343,1069,1.41,1070,1.41,1071,1.41]],["title/interfaces/MetricRegistryListener.html",[111,0.223,887,2.256]],["body/interfaces/MetricRegistryListener.html",[2,0.318,3,0.311,4,0.199,6,0.311,9,1,14,0.019,16,1.133,20,0.199,30,0.904,47,0.501,51,0.854,58,1.617,63,0.258,71,1.177,72,0.904,74,0.385,103,0.348,104,0.349,110,0.385,111,0.431,114,0.422,115,0.698,134,0.015,135,0.015,147,1.897,155,1.363,371,2.833,467,2.694,476,2.833,478,2.816,502,2.352,534,3.149,535,3.342,879,4.094,887,4.355,888,4.1,1067,4.578,1072,4.042,1073,5.472,1074,6.361,1075,6.361,1076,5.472,1077,5.262,1078,5.472,1079,5.262]],["title/classes/MetricRegistryListenerRegistration.html",[0,0.009,897,2.428]],["body/classes/MetricRegistryListenerRegistration.html",[0,0.012,1,1.329,2,0.099,3,0.134,4,0.062,6,0.337,9,0.976,10,0.326,13,0.717,14,0.019,15,1.206,16,1.133,18,2.274,19,0.539,20,0.196,22,1.075,23,2.274,24,1.925,26,0.848,30,0.388,46,0.638,47,0.468,48,1.547,50,0.793,51,0.367,53,0.955,58,1.656,63,0.352,64,1.294,71,0.304,72,0.234,74,0.469,78,2.51,103,0.338,104,0.109,110,0.313,112,0.614,113,0.32,114,0.497,115,0.746,118,1.255,121,0.921,134,0.006,135,0.006,138,0.656,140,2.895,144,0.865,147,1.727,148,1.454,152,0.854,155,1.513,156,2.207,157,1.909,158,0.514,161,2.272,164,0.585,177,0.468,187,1.217,189,0.656,197,2.067,199,2.272,211,0.769,225,0.94,234,3.307,235,0.865,249,1.352,250,1.147,254,1.695,255,1.151,260,1.09,313,0.985,327,1.867,337,1.5,339,2.691,342,1.547,356,2.097,357,2.396,393,0.985,401,1.911,403,1.636,406,3.507,411,1.264,426,1.151,430,1.264,431,2.099,432,1.264,433,1.264,434,1.264,435,2.691,436,1.264,437,1.264,438,1.06,439,1.264,441,1.06,442,0.985,467,2.841,476,2.37,478,0.728,487,0.814,501,2.15,502,2.251,503,2.255,515,1.209,516,2.019,616,0.865,622,0.865,626,1.734,636,0.865,740,2.53,878,3.145,879,2.097,880,1.06,881,1.415,882,1.264,883,3.013,884,1.415,887,3.707,888,4.17,889,3.145,890,1.06,891,4.157,892,3.013,893,3.892,894,2.691,895,2.35,896,2.35,897,3.619,898,5.689,899,1.415,900,1.415,901,1.415,902,1.415,903,5.986,904,4.448,905,1.415,906,1.415,907,1.415,908,1.415,909,1.415,910,1.415,911,1.415,912,2.35,913,2.35,914,2.35,915,2.35,916,1.415,917,2.35,918,1.415,919,1.415,920,3.013,921,2.35,922,1.415,923,1.415,924,1.415,925,1.415,926,1.415,927,1.264,928,1.415,929,1.415,930,1.415,931,1.415,932,1.415,933,1.415,934,1.415,935,3.508,936,1.415,937,4.625,938,4.262,939,5.027,940,2.099,941,4.625,942,5.494,943,2.35,944,4.198,945,4.198,946,5.225,947,2.099,948,1.264,949,2.35,950,2.099,951,1.264,952,2.35,953,2.099,954,1.264,955,2.35,956,2.099,957,1.264,958,2.35,959,3.616,960,4.198,961,1.264,962,1.415,963,1.151,964,1.151,965,1.415,966,2.35,967,1.415,968,1.415,969,3.892,970,1.415,971,1.415,972,1.415,973,1.415,974,1.415,975,1.415,976,1.415,977,1.415,978,1.415,979,1.415,980,1.415,981,1.415,982,1.415,983,4.831,984,1.415,985,1.415,986,1.415,987,1.415,988,1.415,989,1.415,990,1.415,991,3.749,992,1.415,993,1.415,994,2.35,995,2.35,996,1.415,997,2.35,998,2.35,999,1.415,1000,1.415,1001,1.415,1002,1.415,1003,1.415,1004,3.892,1005,1.415,1006,1.415,1007,1.415,1008,1.415,1009,4.655,1010,4.198,1011,1.415,1012,1.415,1013,2.35,1014,1.415,1015,1.415,1016,2.35,1017,1.415,1018,1.415,1019,2.35,1020,1.264,1021,1.415,1022,3.013,1023,1.264,1024,1.415,1025,2.35,1026,1.415,1027,2.35,1028,1.264,1029,1.415,1030,1.415,1031,1.415,1032,1.264,1033,1.415,1034,1.415,1035,2.35,1036,2.35,1037,2.35,1038,2.35,1039,2.35,1040,1.415,1041,2.35,1042,1.415,1043,1.415,1044,1.415,1045,1.415,1046,1.415,1047,1.264,1048,1.415,1049,1.415,1050,1.415,1051,1.415,1052,1.415,1053,1.415,1054,1.415,1055,1.415,1056,1.415,1057,1.415,1058,1.415,1059,1.415,1060,1.415,1061,1.415,1062,1.415,1063,1.415,1064,1.415,1065,2.099,1066,1.415,1067,1.761,1068,2.35,1069,1.415,1070,1.415,1071,1.415,1080,1.645,1081,1.645,1082,1.645]],["title/interfaces/MetricReporterOptions.html",[111,0.223,520,1.865]],["body/interfaces/MetricReporterOptions.html",[0,0.01,2,0.126,3,0.162,4,0.079,6,0.102,7,2.419,8,0.752,9,0.949,10,0.786,12,2.463,13,0.582,14,0.019,15,0.818,17,2.46,18,1.138,20,0.156,21,0.857,22,0.33,24,1.869,25,2.684,26,0.684,27,2.433,37,1.638,46,0.739,47,0.574,49,0.491,50,0.911,53,0.773,54,1.094,58,0.882,63,0.34,64,0.867,72,0.923,74,0.454,78,2.663,100,1.638,103,0.365,104,0.138,108,1.389,110,0.378,111,0.396,113,0.162,114,0.502,115,0.736,118,1.273,128,2.32,134,0.015,135,0.008,139,1.989,142,1.031,146,0.898,148,1.096,155,1.508,156,1.677,157,1.763,164,0.687,167,1.612,187,0.744,197,2.087,199,1.968,201,0.54,206,0.987,225,0.716,228,1.822,229,1.031,236,1.031,250,0.957,254,1.085,255,1.284,281,0.683,314,0.831,326,1.778,327,1.194,337,1.682,342,1.255,343,2.179,344,2.32,357,0.922,371,2.745,458,3.353,459,1.031,460,0.831,462,1.851,465,2.192,466,1.981,467,2.792,470,2.624,471,2.465,472,2.767,474,1.981,476,1.319,477,1.981,478,2.41,480,1.638,483,1.981,484,2.807,485,2.463,486,1.981,487,2.32,488,1.981,489,1.851,490,1.547,491,1.851,492,2.465,493,2.465,494,1.851,495,1.981,496,1.981,497,1.247,501,2.03,502,2.471,503,2.129,504,1.925,505,1.247,506,2.527,507,2.32,508,1.981,509,2.695,510,2.99,511,3.114,512,1.031,513,3.26,514,2.532,515,2.701,516,1.031,517,3.644,518,1.822,519,3.099,520,2.695,521,2.465,522,1.925,523,2.999,524,2.465,525,1.822,526,2.162,527,2.303,528,2.932,529,2.695,530,2.303,531,2.825,532,1.638,533,2.624,534,1.031,535,1.094,536,1.094,537,1.247,538,1.247,539,1.247,540,1.247,541,1.166,542,1.247,543,1.981,544,1.247,545,1.247,546,1.247,547,2.41,548,1.981,549,1.247,550,1.247,551,1.247,552,1.247,553,1.247,554,1.981,555,1.247,556,3.522,557,1.247,558,3.415,559,1.247,560,1.247,561,1.247,562,1.247,563,1.247,564,1.247,565,1.981,566,1.247,567,1.094,568,1.638,569,1.247,570,1.247,571,3.063,572,3.063,573,2.465,574,2.465,575,2.465,576,2.465,577,1.981,578,1.247,579,1.981,580,3.26,581,1.981,582,1.638,583,1.247,584,1.981,585,1.247,586,1.247,587,1.981,588,1.247,589,1.031,590,1.247,591,1.247,592,1.981,593,1.247,594,1.031,595,1.247,596,1.247,597,1.981,598,1.247,599,1.031,600,1.247,601,1.247,602,1.981,603,1.247,604,1.031,605,3.26,606,1.247,607,0.974,608,1.031,609,1.247,610,1.166,611,1.166,612,3.194,613,1.981,614,1.981,615,1.247,616,1.094,617,2.465,618,1.247,619,1.247,620,1.247,621,1.247,622,1.094,623,1.247,624,1.247,625,1.247,626,1.031,627,1.031,628,1.031,629,1.031,630,1.031,631,1.031,632,1.465,633,1.981,634,1.247,635,2.624,636,1.738,637,1.247,638,1.166,639,1.247,640,1.247,641,1.247,642,1.247,643,1.247,644,2.465,645,1.247,646,1.247,647,1.247,648,1.247,649,1.247,650,1.247,651,1.247]],["title/interfaces/MetricSet.html",[111,0.223,889,2.428]],["body/interfaces/MetricSet.html",[2,0.33,3,0.318,4,0.207,6,0.267,9,0.99,14,0.019,16,0.976,20,0.207,30,0.924,51,0.873,53,0.944,63,0.365,74,0.435,103,0.355,104,0.362,110,0.393,111,0.411,112,1.561,113,0.352,114,0.432,134,0.015,135,0.015,148,1.169,152,2.032,155,1.393,260,2.593,879,4.158,889,4.734,937,3.816,938,3.516,939,4.191,941,3.816,959,4.547,963,5.028,964,5.137,1083,4.191,1084,5.592,1085,5.456,1086,5.456]],["title/interfaces/MetricSetReportContext.html",[111,0.223,511,1.668]],["body/interfaces/MetricSetReportContext.html",[0,0.01,2,0.126,3,0.162,4,0.079,6,0.102,7,2.419,8,0.752,9,0.957,10,0.786,12,2.162,13,0.582,14,0.019,15,0.818,17,2.386,18,1.138,20,0.156,21,0.857,22,0.33,24,1.869,25,2.684,26,0.684,27,2.433,37,1.638,46,0.729,47,0.584,49,0.491,50,0.911,53,0.773,54,1.094,58,0.882,63,0.334,64,0.867,72,0.727,74,0.454,78,2.663,100,1.638,103,0.365,104,0.138,108,1.389,110,0.378,111,0.4,113,0.162,114,0.502,115,0.736,118,1.273,128,2.32,134,0.015,135,0.008,139,1.989,142,1.031,146,1.273,148,1.005,155,1.508,156,1.677,157,1.763,164,0.687,167,1.612,187,0.744,197,1.852,199,1.728,201,0.54,206,0.987,225,0.716,228,1.822,229,1.031,236,1.031,250,0.957,254,1.085,255,1.396,281,0.683,314,0.831,326,1.561,327,1.194,337,1.682,342,1.255,343,2.173,344,2.32,357,0.922,371,2.745,458,3.353,459,1.031,460,0.831,462,1.851,465,2.192,466,1.981,467,2.807,470,2.624,471,2.465,472,2.767,474,1.981,476,1.319,477,1.981,478,2.41,480,1.638,483,1.981,484,2.807,485,2.463,486,1.981,487,2.32,488,1.981,489,1.851,490,1.547,491,1.851,492,2.465,493,2.465,494,1.851,495,1.981,496,1.981,497,1.247,501,2.03,502,2.509,503,2.129,504,1.925,505,1.247,506,2.701,507,2.532,508,1.981,509,2.932,510,3.072,511,3.133,512,1.638,513,3.26,514,2.932,515,2.825,516,1.638,517,3.687,518,1.822,519,3.091,520,2.532,521,1.981,522,1.547,523,2.687,524,1.981,525,1.465,526,1.738,527,1.851,528,2.825,529,2.037,530,1.851,531,2.768,532,1.638,533,2.624,534,1.031,535,1.094,536,1.094,537,1.247,538,1.247,539,1.247,540,1.247,541,1.166,542,1.247,543,1.981,544,1.247,545,1.247,546,1.247,547,2.41,548,1.981,549,1.247,550,1.247,551,1.247,552,1.247,553,1.247,554,1.981,555,1.247,556,3.522,557,1.247,558,3.415,559,1.247,560,1.247,561,1.247,562,1.247,563,1.247,564,1.247,565,1.981,566,1.247,567,1.094,568,1.638,569,1.247,570,1.247,571,3.063,572,3.063,573,2.465,574,2.465,575,2.465,576,2.465,577,1.981,578,1.247,579,1.981,580,3.26,581,1.981,582,1.638,583,1.247,584,1.981,585,1.247,586,1.247,587,1.981,588,1.247,589,1.031,590,1.247,591,1.247,592,1.981,593,1.247,594,1.031,595,1.247,596,1.247,597,1.981,598,1.247,599,1.031,600,1.247,601,1.247,602,1.981,603,1.247,604,1.031,605,3.26,606,1.247,607,0.974,608,1.031,609,1.247,610,1.166,611,1.166,612,3.194,613,1.981,614,1.981,615,1.247,616,1.094,617,2.465,618,1.247,619,1.247,620,1.247,621,1.247,622,1.094,623,1.247,624,1.247,625,1.247,626,1.031,627,1.031,628,1.031,629,1.031,630,1.031,631,1.031,632,1.465,633,1.981,634,1.247,635,2.624,636,1.738,637,1.247,638,1.166,639,1.247,640,1.247,641,1.247,642,1.247,643,1.247,644,2.465,645,1.247,646,1.247,647,1.247,648,1.247,649,1.247,650,1.247,651,1.247]],["title/interfaces/MovingAverage.html",[111,0.223,270,2.635]],["body/interfaces/MovingAverage.html",[0,0.012,2,0.223,3,0.247,4,0.139,6,0.18,10,0.74,13,0.647,14,0.019,16,0.758,20,0.139,22,1.16,23,2.31,26,0.821,30,0.718,46,0.818,47,0.551,49,0.893,50,0.982,51,0.833,53,0.466,63,0.18,71,0.934,72,0.718,74,0.455,103,0.276,104,0.244,110,0.375,111,0.342,113,0.337,114,0.497,115,0.676,118,0.934,134,0.012,135,0.012,139,1.437,146,1.684,152,1.94,158,1.579,159,2.081,164,0.615,176,2.828,177,1.047,186,3.255,187,1.598,189,2.593,193,3.879,201,1.782,205,3.255,206,1.506,207,2.552,213,1.915,227,2.204,242,3.68,248,2.361,250,1.267,252,3.452,254,1.89,263,5.212,264,4.994,265,2.574,266,4.344,267,4.344,268,3.916,269,6.296,270,4.97,271,3.166,272,3.166,273,3.166,274,3.166,275,3.166,276,3.166,277,5.337,278,5.159,279,3.849,280,3.166,281,2.443,282,5.592,283,4.344,284,3.166,285,5.916,286,3.166,287,4.124,290,4.344,291,5.777,292,5.777,295,2.826,300,4.032,304,1.546,306,4.344,307,1.934,309,4.959,313,2.204,314,2.014,315,3.166,316,2.828,317,3.166,318,3.166,319,3.166,320,3.166,322,2.826,323,4.344,324,4.697,325,4.344,326,1.915,327,1.823,328,3.532,329,4.959,330,4.344,331,4.344,332,3.166,333,3.166,334,5.777,335,3.166,336,4.959,1087,3.681,1088,3.681,1089,3.681,1090,3.681]],["title/interfaces/OverallReportContext.html",[111,0.223,510,1.668]],["body/interfaces/OverallReportContext.html",[0,0.01,2,0.128,3,0.164,4,0.08,6,0.104,7,2.427,8,0.765,9,0.947,10,0.79,12,2.187,13,0.59,14,0.019,15,0.829,17,2.394,18,1.154,20,0.158,22,0.336,24,1.875,25,2.688,26,0.688,27,2.447,37,1.66,46,0.732,47,0.569,49,0.497,50,0.92,51,0.285,53,0.755,54,1.113,58,1.014,63,0.335,64,0.876,72,0.733,74,0.455,78,2.673,100,1.66,103,0.366,104,0.141,108,1.408,110,0.38,111,0.402,113,0.164,114,0.503,115,0.737,118,1.277,128,2.553,134,0.015,135,0.008,139,1.995,142,1.049,146,0.911,148,1.014,155,1.512,156,1.691,157,1.771,164,0.695,167,1.628,187,0.754,197,1.863,199,1.748,201,0.549,206,1,225,0.729,228,1.843,229,1.049,236,1.049,250,0.967,254,1.1,255,1.293,281,0.695,314,0.845,326,1.579,327,1.211,337,1.69,342,1.272,343,2.173,344,2.343,357,0.938,371,2.754,458,3.369,459,1.66,460,0.845,462,1.877,465,2.214,466,2.009,467,2.798,470,2.649,471,2.493,472,2.776,474,2.009,476,1.338,477,2.009,478,2.429,480,1.66,483,2.009,484,2.835,485,2.487,486,2.009,487,2.343,488,2.009,489,1.877,490,1.568,491,1.877,492,2.493,493,2.493,494,1.877,495,2.009,496,2.009,497,1.269,501,2.039,502,2.477,503,2.138,504,1.947,505,1.269,506,2.544,507,2.553,508,2.009,509,2.845,510,3.031,511,3.123,512,1.049,513,3.285,514,2.553,515,2.716,516,1.049,517,3.641,518,1.843,519,3.097,520,2.553,521,2.009,522,1.568,523,2.71,524,2.009,525,1.485,526,1.762,527,1.877,528,2.845,529,2.061,530,1.877,531,2.782,532,1.66,533,2.649,534,1.049,535,1.113,536,1.113,537,1.269,538,1.269,539,1.269,540,1.269,541,1.186,542,1.269,543,2.009,544,1.269,545,1.269,546,1.269,547,2.429,548,2.009,549,1.269,550,1.269,551,1.269,552,1.269,553,1.269,554,2.009,555,1.269,556,3.532,557,1.269,558,3.434,559,1.269,560,1.269,561,1.269,562,1.269,563,1.269,564,1.269,565,2.009,566,1.269,567,1.113,568,1.66,569,1.269,570,1.269,571,3.089,572,3.089,573,2.493,574,2.493,575,2.493,576,2.493,577,2.009,578,1.269,579,2.009,580,3.285,581,2.009,582,1.66,583,1.269,584,2.009,585,1.269,586,1.269,587,2.009,588,1.269,589,1.049,590,1.269,591,1.269,592,2.009,593,1.269,594,1.049,595,1.269,596,1.269,597,2.009,598,1.269,599,1.049,600,1.269,601,1.269,602,2.009,603,1.269,604,1.049,605,3.285,606,1.269,607,0.991,608,1.049,609,1.269,610,1.186,611,1.186,612,3.216,613,2.009,614,2.009,615,1.269,616,1.113,617,2.493,618,1.269,619,1.269,620,1.269,621,1.269,622,1.113,623,1.269,624,1.269,625,1.269,626,1.049,627,1.049,628,1.049,629,1.049,630,1.049,631,1.049,632,1.485,633,2.009,634,1.269,635,2.649,636,1.762,637,1.269,638,1.186,639,1.269,640,1.269,641,1.269,642,1.269,643,1.269,644,2.493,645,1.269,646,1.269,647,1.269,648,1.269,649,1.269,650,1.269,651,1.269,1091,2.119]],["title/interfaces/ReportingResult.html",[111,0.223,518,1.668]],["body/interfaces/ReportingResult.html",[0,0.01,2,0.127,3,0.163,4,0.08,6,0.103,7,2.424,8,0.76,9,0.953,10,0.799,12,2.178,13,0.587,14,0.019,15,0.825,17,2.391,18,1.148,20,0.157,21,0.865,22,0.334,24,1.873,25,2.687,26,0.686,27,2.442,37,1.652,46,0.731,47,0.573,49,0.495,50,0.917,53,0.753,54,1.106,58,0.888,63,0.335,64,0.872,72,0.731,74,0.455,78,2.727,100,1.652,103,0.366,104,0.14,108,1.401,110,0.379,111,0.401,113,0.163,114,0.503,115,0.737,118,1.276,128,2.335,134,0.016,135,0.008,139,1.992,142,1.652,146,0.906,148,1.011,155,1.51,156,1.686,157,1.768,164,0.692,167,1.622,187,0.75,197,1.859,199,1.741,201,0.545,206,0.995,225,0.724,228,1.835,229,1.042,236,1.042,250,0.963,254,1.094,255,1.29,281,0.69,314,0.84,326,1.572,327,1.205,337,1.687,342,1.266,343,2.175,344,2.335,357,1.477,371,2.751,458,3.363,459,1.042,460,0.84,462,1.868,465,2.206,466,1.998,467,2.796,470,2.64,471,2.482,472,2.773,474,1.998,476,1.331,477,1.998,478,2.422,480,1.652,483,1.998,484,2.824,485,2.478,486,1.998,487,2.335,488,1.998,489,1.868,490,1.56,491,1.868,492,2.482,493,2.482,494,1.868,495,1.998,496,1.998,497,1.261,501,2.036,502,2.475,503,2.135,504,1.938,505,1.261,506,2.538,507,2.545,508,1.998,509,2.708,510,2.997,511,3.12,512,1.042,513,3.276,514,2.545,515,2.834,516,1.042,517,3.638,518,2.088,519,3.095,520,2.545,521,1.998,522,1.56,523,2.702,524,1.998,525,1.477,526,1.753,527,1.868,528,2.837,529,2.052,530,1.868,531,2.777,532,1.652,533,2.64,534,1.042,535,1.106,536,1.106,537,1.261,538,1.261,539,1.261,540,1.261,541,1.178,542,1.261,543,1.998,544,1.261,545,1.261,546,1.261,547,2.422,548,1.998,549,1.261,550,1.261,551,1.261,552,1.261,553,1.261,554,1.998,555,1.261,556,3.528,557,1.261,558,3.427,559,1.261,560,1.261,561,1.261,562,1.261,563,1.261,564,1.261,565,1.998,566,1.261,567,1.106,568,1.652,569,1.261,570,1.261,571,3.079,572,3.079,573,2.482,574,2.482,575,2.482,576,2.482,577,1.998,578,1.261,579,1.998,580,3.276,581,1.998,582,1.652,583,1.261,584,1.998,585,1.261,586,1.261,587,1.998,588,1.261,589,1.042,590,1.261,591,1.261,592,1.998,593,1.261,594,1.042,595,1.261,596,1.261,597,1.998,598,1.261,599,1.042,600,1.261,601,1.261,602,1.998,603,1.261,604,1.042,605,3.276,606,1.261,607,0.985,608,1.042,609,1.261,610,1.178,611,1.178,612,3.208,613,1.998,614,1.998,615,1.261,616,1.106,617,2.482,618,1.261,619,1.261,620,1.261,621,1.261,622,1.106,623,1.261,624,1.261,625,1.261,626,1.042,627,1.042,628,1.042,629,1.042,630,1.042,631,1.042,632,1.477,633,1.998,634,1.261,635,2.64,636,1.753,637,1.261,638,1.178,639,1.261,640,1.261,641,1.261,642,1.261,643,1.261,644,2.482,645,1.261,646,1.261,647,1.261,648,1.261,649,1.261,650,1.261,651,1.261]],["title/interfaces/Reservoir.html",[111,0.223,234,1.98]],["body/interfaces/Reservoir.html",[0,0.014,2,0.287,3,0.292,4,0.18,6,0.233,10,0.78,14,0.019,16,0.714,20,0.18,22,1.086,26,0.733,30,0.849,46,0.819,47,0.514,49,0.924,51,0.878,53,0.602,63,0.233,64,1.209,71,0.879,72,0.676,74,0.448,103,0.327,104,0.316,110,0.415,111,0.387,113,0.32,114,0.492,115,0.642,134,0.014,135,0.014,152,1.868,164,1.091,231,4.77,232,3.325,233,3.325,234,4.05,235,3.712,236,3.235,237,4.59,238,4.59,239,5.02,240,2.966,241,2.87,242,3.14,243,3.652,245,4.571,248,2.223,249,2.353,250,1.22,252,3.913,254,2.142,255,1.121,256,3.652,257,3.652,258,3.064,259,2.661,260,2.383,261,3.652,262,3.851,1092,4.754,1093,4.754,1094,4.754]],["title/interfaces/Sampling.html",[111,0.223,159,1.36]],["body/interfaces/Sampling.html",[0,0.016,2,0.345,3,0.327,4,0.216,6,0.28,9,0.846,14,0.019,20,0.216,30,0.949,49,0.871,51,0.767,63,0.28,74,0.404,103,0.365,104,0.379,110,0.404,111,0.441,113,0.327,114,0.379,134,0.016,135,0.016,159,2.635,241,2.918,452,5.606,740,3.124,1095,4.915,1096,5.747,1097,5.714]],["title/interfaces/ScheduledMetricReporterOptions.html",[111,0.223,712,2.256]],["body/interfaces/ScheduledMetricReporterOptions.html",[0,0.015,2,0.282,3,0.289,4,0.177,6,0.228,7,2.032,8,1.685,9,0.821,10,0.557,13,1.262,14,0.019,20,0.177,21,1.53,22,0.936,26,0.727,27,2.585,46,0.754,47,0.586,53,0.748,63,0.228,72,1.058,74,0.412,103,0.354,104,0.31,110,0.425,111,0.384,112,1.531,114,0.484,115,0.459,118,0.863,134,0.014,135,0.014,148,1.389,155,1.46,164,0.78,167,1.606,201,1.82,206,1.762,250,1.323,278,5.718,281,2.474,287,3.932,328,4.131,343,2.134,371,1.862,460,1.862,465,2.762,472,2.802,503,1.937,509,2.924,519,2.48,520,3.371,533,3.306,541,2.613,547,2.615,668,3.586,711,4.797,712,4.297,713,4.594,720,4.764,1098,3.586,1099,4.016,1100,4.668,1101,6.48,1102,4.668,1103,4.668,1104,4.668,1105,4.668,1106,5.081,1107,4.668,1108,4.668,1109,4.668]],["title/classes/SimpleSnapshot.html",[0,0.009,259,2.109]],["body/classes/SimpleSnapshot.html",[0,0.012,2,0.179,3,0.212,4,0.112,6,0.145,10,0.715,14,0.019,16,0.651,19,0.972,20,0.227,21,1.123,22,0.892,23,1.02,26,0.865,30,0.616,46,0.827,47,0.443,48,1.942,49,0.933,50,1.288,51,0.969,53,0.549,63,0.145,71,0.801,72,0.616,74,0.472,103,0.162,104,0.197,110,0.34,111,0.334,113,0.37,114,0.503,115,0.503,118,1.157,134,0.01,135,0.01,141,1.728,150,3.68,155,0.635,158,1.355,164,0.724,175,2.595,177,0.844,185,3.328,186,2.793,187,1.266,189,1.728,190,3.03,211,2.026,235,1.558,240,2.515,241,2.809,250,1.045,255,1.619,258,2.793,259,4.145,260,2.042,262,4.269,268,3.287,279,3.353,300,2.074,314,1.728,340,3.198,348,3.933,358,4.602,359,4.602,360,4.602,361,4.602,362,4.602,363,4.602,364,4.602,365,4.602,366,4.602,367,4.602,371,2.807,386,3.933,394,3.066,395,3.933,397,4.963,442,2.595,522,1.387,536,1.558,682,2.425,760,3.587,762,3.066,764,3.066,766,3.3,768,3.3,770,3.3,832,3.03,1110,2.278,1111,3.727,1112,4.333,1113,4.844,1114,2.965,1115,3.727,1116,2.965,1117,3.727,1118,2.965,1119,3.727,1120,2.965,1121,3.727,1122,2.965,1123,3.727,1124,2.965,1125,2.965,1126,2.965,1127,3.727,1128,2.965,1129,2.965,1130,2.965,1131,3.727,1132,3.328,1133,3.328,1134,3.328,1135,3.328,1136,3.328,1137,3.03,1138,3.328,1139,3.328,1140,3.727,1141,3.727,1142,3.727,1143,3.727,1144,3.727,1145,3.727,1146,3.727,1147,2.965,1148,2.965,1149,2.551,1150,2.551,1151,2.551,1152,2.551,1153,2.551,1154,2.551,1155,2.551,1156,2.551,1157,2.551,1158,2.551,1159,2.551,1160,3.727,1161,2.551,1162,3.3,1163,2.551,1164,2.551,1165,3.727,1166,2.551,1167,2.551,1168,4.404,1169,3.727,1170,3.727,1171,2.551]],["title/interfaces/SizeAttributeInterface.html",[111,0.223,686,2.256]],["body/interfaces/SizeAttributeInterface.html",[0,0.013,1,2.331,2,0.253,3,0.269,4,0.158,6,0.32,9,0.828,10,0.656,13,0.967,14,0.019,15,1.359,16,0.923,20,0.158,21,1.424,22,0.871,23,2.479,25,2.602,26,0.616,30,0.781,46,0.78,47,0.484,49,0.498,53,0.529,58,1.4,63,0.301,74,0.448,103,0.336,104,0.277,110,0.445,111,0.447,112,1.236,113,0.269,114,0.472,115,0.698,134,0.013,135,0.013,146,1.493,147,2.078,155,1.4,158,1.921,164,0.698,177,1.564,187,1.236,240,3.135,248,1.953,250,1.333,255,0.985,260,3.097,304,1.754,337,1.758,340,2.068,343,1.189,347,1.953,632,2.891,678,4.172,679,2.501,680,2.338,681,4.746,682,3.975,683,3.961,684,4.172,685,4.172,686,4.253,687,3.961,688,4.744,689,2.922,690,4.568,691,4.568,692,2.922,693,2.922,694,4.568,695,2.922,696,2.922,697,2.922,698,2.922,699,2.922,700,4.873,701,2.922,702,2.922,703,2.922]],["title/interfaces/SizeMethodInterface.html",[111,0.223,685,2.256]],["body/interfaces/SizeMethodInterface.html",[0,0.013,1,2.332,2,0.253,3,0.269,4,0.158,6,0.32,9,0.828,10,0.656,13,0.967,14,0.019,15,1.033,16,0.923,20,0.158,22,0.872,23,2.479,25,2.603,26,0.617,30,0.965,46,0.774,47,0.433,49,0.499,51,0.561,53,0.53,58,1.4,63,0.269,74,0.451,103,0.336,104,0.278,110,0.445,111,0.447,112,1.237,113,0.269,114,0.472,115,0.698,134,0.013,135,0.013,146,1.494,147,2.078,155,1.4,158,1.72,164,0.698,177,1.565,187,1.237,240,3.135,248,1.955,250,1.334,255,0.986,260,3.097,304,1.755,337,1.758,340,2.069,343,1.189,347,1.955,632,2.892,678,4.173,679,3.294,680,2.339,681,4.747,682,3.976,683,3.545,684,4.173,685,4.254,686,4.173,687,3.963,688,4.744,689,2.924,690,4.569,691,4.569,692,2.924,693,2.924,694,4.569,695,2.924,696,2.924,697,2.924,698,2.924,699,2.924,700,4.874,701,2.924,702,2.924,703,2.924,1172,4.18]],["title/classes/SlidingWindowReservoir.html",[0,0.009,890,2.428]],["body/classes/SlidingWindowReservoir.html",[0,0.015,2,0.266,3,0.279,4,0.167,6,0.216,10,0.795,14,0.019,16,0.855,19,1.445,20,0.262,21,1.475,22,1.177,26,0.833,30,0.809,46,0.825,47,0.566,48,2.16,49,0.934,50,0.857,51,0.966,53,0.721,63,0.216,64,1.167,71,1.053,72,0.809,74,0.441,103,0.311,104,0.293,110,0.403,111,0.337,113,0.309,114,0.484,115,0.62,134,0.013,135,0.013,146,1.197,148,0.945,152,1.378,164,1.113,177,1.254,231,4.698,232,3.083,233,3.083,234,4.029,235,3.78,236,3.499,237,4.374,238,4.374,239,5.526,240,2.898,241,2.837,242,2.992,243,4.374,245,4.828,248,2.061,249,2.182,250,1.163,252,3.777,254,2.068,255,1.572,256,4.374,257,3.386,258,2.841,259,2.467,260,1.758,261,3.386,262,3.67,534,2.182,890,3.67,1073,3.791,1173,4.407,1174,5.694,1175,5.694,1176,5.694,1177,4.407,1178,4.407,1179,4.407,1180,4.407,1181,4.407]],["title/interfaces/Snapshot.html",[111,0.223,241,1.429]],["body/interfaces/Snapshot.html",[0,0.011,2,0.191,3,0.222,4,0.12,6,0.154,10,0.633,14,0.019,16,0.474,20,0.22,22,0.718,23,1.559,26,0.812,30,0.644,46,0.828,47,0.357,48,1.197,49,0.931,50,1.31,51,0.965,53,0.4,63,0.154,71,0.584,72,0.449,74,0.473,103,0.172,104,0.21,110,0.351,111,0.344,113,0.376,114,0.506,115,0.521,118,1.182,134,0.011,135,0.011,141,1.808,150,3.707,155,0.677,158,0.987,164,0.527,175,2.715,185,2.425,186,2.035,187,1.304,189,1.259,190,2.208,211,1.476,235,2.382,240,2.578,241,2.82,250,1.083,255,1.448,258,2.035,259,4.144,260,2.116,262,4.343,268,3.359,279,3.437,300,2.208,314,1.259,340,3.26,348,4.075,358,4.717,359,4.717,360,4.717,361,4.717,362,4.717,363,4.717,364,4.717,365,4.717,366,4.717,367,4.717,371,2.55,386,3.483,394,3.177,395,4.075,397,4.911,442,1.89,522,2.12,536,2.382,682,1.767,760,3.472,762,3.177,764,3.177,766,3.419,768,3.419,770,3.419,832,2.208,1110,2.425,1111,2.716,1113,3.9,1115,2.716,1117,2.716,1119,2.716,1121,2.716,1123,2.716,1127,2.716,1131,2.716,1132,2.425,1133,2.425,1134,2.425,1135,2.425,1136,2.425,1137,2.208,1138,2.425,1139,2.425,1140,2.716,1141,2.716,1142,2.716,1143,2.716,1144,2.716,1145,2.716,1146,2.716,1149,2.716,1150,2.716,1151,2.716,1152,2.716,1153,2.716,1154,2.716,1155,2.716,1156,2.716,1157,2.716,1158,2.716,1159,2.716,1160,3.9,1161,2.716,1162,3.419,1163,2.716,1164,2.716,1165,3.9,1166,2.716,1167,2.716,1168,4.563,1169,3.9,1170,3.9,1171,2.716,1182,3.157,1183,3.157,1184,3.157,1185,3.157,1186,3.157,1187,3.157,1188,3.157,1189,3.157,1190,3.157,1191,3.157,1192,3.157,1193,3.157,1194,3.157]],["title/classes/StdClock.html",[0,0.009,225,1.296]],["body/classes/StdClock.html",[0,0.016,2,0.29,3,0.337,4,0.182,6,0.235,7,2.522,10,0.821,13,0.844,14,0.019,19,1.574,20,0.182,26,0.81,30,0.854,46,0.76,48,2.28,50,1.169,51,0.807,63,0.235,71,1.112,74,0.455,103,0.262,104,0.319,110,0.448,111,0.356,112,1.476,113,0.321,114,0.399,115,0.591,118,1.214,134,0.014,135,0.014,146,1.632,147,1.793,148,1.407,152,1.501,159,2.171,161,2.756,197,2.38,198,3.094,199,2.016,200,3.688,201,2.041,203,4.566,204,4.618,205,3.875,206,1.793,207,3.2,208,3.358,209,4.812,210,3.358,211,2.245,212,3.358,213,1.821,214,3.094,215,3.358,216,4.618,217,3.688,218,3.688,219,4.205,220,4.618,221,3.688,222,3.688,223,5.042,224,4.618,225,2.366,226,4.618,227,3.6,228,2.662,229,2.976,1195,4.801,1196,4.801,1197,4.801]],["title/classes/StopWatch.html",[0,0.009,1198,2.635]],["body/classes/StopWatch.html",[0,0.015,1,2.033,2,0.194,3,0.225,4,0.122,6,0.303,9,0.679,10,0.64,13,1.028,14,0.019,15,1.446,16,0.966,19,1.055,20,0.122,21,1.191,22,1.176,26,0.844,30,0.653,46,0.751,47,0.55,50,0.625,51,0.864,53,0.679,58,1.326,63,0.262,64,1.144,71,0.595,72,0.457,74,0.464,78,2.566,103,0.394,104,0.214,110,0.354,112,1.033,113,0.346,114,0.501,115,0.677,118,0.85,121,1.8,122,2.25,134,0.011,135,0.011,136,2.414,138,2.138,139,1.664,140,3.27,141,1.283,143,2.25,144,2.414,148,1.326,152,1.006,155,1.477,157,1.921,159,2.111,164,0.895,167,2.329,177,1.308,187,0.723,189,1.283,197,2.382,199,2.251,201,1.754,207,2.998,213,2.033,214,4.762,234,3.38,241,2.346,254,2.028,268,2.817,279,1.8,281,1.758,287,3,295,1.8,304,1.93,307,3.38,314,2.467,324,3.75,326,2.033,342,1.743,343,1.308,347,1.504,402,3.21,407,2.767,425,3.53,427,2.767,438,2.962,440,2.767,448,2.767,452,2.471,465,2.735,472,1.833,501,2.212,503,2.549,530,1.8,567,1.69,652,3.21,669,2.073,735,3.852,740,1.504,846,2.767,847,2.767,848,2.767,849,2.767,927,2.471,1020,2.471,1028,2.471,1065,3.53,1106,2.767,1162,2.073,1198,5.08,1199,2.767,1200,3.953,1201,6.772,1202,4.595,1203,4.595,1204,3.217,1205,3.217,1206,3.217,1207,3.214,1208,3.217,1209,6.433,1210,4.595,1211,3.217,1212,6.622,1213,3.217,1214,3.217,1215,3.217,1216,3.217,1217,3.217,1218,5.848,1219,3.217,1220,4.595,1221,2.767,1222,3.217,1223,3.217,1224,3.217,1225,3.217,1226,3.217,1227,2.767,1228,3.53,1229,3.217,1230,3.217,1231,4.595,1232,3.217,1233,4.595,1234,3.217,1235,4.595,1236,5.361,1237,3.217,1238,3.217,1239,3.217,1240,3.217,1241,3.217,1242,3.217,1243,3.217,1244,3.217]],["title/interfaces/Summarizing.html",[111,0.223,402,2.256]],["body/interfaces/Summarizing.html",[0,0.016,2,0.345,3,0.327,4,0.216,6,0.28,9,0.846,14,0.019,20,0.216,30,0.949,49,0.871,51,0.767,63,0.28,74,0.404,103,0.365,104,0.379,110,0.404,111,0.441,113,0.327,114,0.379,134,0.016,135,0.016,279,4.084,402,4.37,652,4.37,669,3.683,740,3.124,1096,5.747,1221,6.278,1245,4.915,1246,5.714]],["title/interfaces/Taggable.html",[108,1.582,111,0.223]],["body/interfaces/Taggable.html",[0,0.014,2,0.286,3,0.292,4,0.179,6,0.232,14,0.019,15,1.78,16,1.162,17,2.662,20,0.179,30,0.847,31,5.127,37,3.565,39,5.889,44,5.259,47,0.567,49,0.817,51,0.982,58,1.672,63,0.372,69,4.579,71,1.332,72,1.024,74,0.451,81,4.579,86,4.579,88,4.579,98,4.579,100,2.95,103,0.259,104,0.314,108,3.191,110,0.36,111,0.418,113,0.335,114,0.486,115,0.718,134,0.014,135,0.014,250,1.535,254,1.954,406,3.132,476,2.731,1247,4.073,1248,4.735,1249,5.96,1250,4.735,1251,5.127,1252,4.735,1253,4.735,1254,4.735,1255,4.735,1256,4.735]],["title/interfaces/Tags.html",[17,1.296,111,0.223]],["body/interfaces/Tags.html",[0,0.01,2,0.128,3,0.164,4,0.08,6,0.104,7,2.426,8,0.765,9,0.947,10,0.79,12,2.187,13,0.59,14,0.019,15,0.829,17,2.426,18,1.153,20,0.158,22,0.336,24,1.875,25,2.688,26,0.688,27,2.447,37,1.66,46,0.731,47,0.569,49,0.497,50,0.92,51,0.285,53,0.755,54,1.113,58,1.105,63,0.335,64,0.875,72,0.733,74,0.455,78,2.673,100,1.66,103,0.366,104,0.141,108,1.408,110,0.38,111,0.402,113,0.164,114,0.503,115,0.737,118,1.277,128,2.553,134,0.015,135,0.008,139,1.995,142,1.049,146,0.91,148,1.014,155,1.512,156,1.691,157,1.771,164,0.695,167,1.628,187,0.754,197,1.863,199,1.748,201,0.549,206,1,225,0.729,228,1.843,229,1.049,236,1.049,250,0.966,254,1.099,255,1.293,281,0.694,314,0.845,326,1.579,327,1.211,337,1.69,342,1.272,343,2.171,344,2.343,357,0.938,371,2.754,458,3.369,459,1.66,460,0.845,462,1.877,465,2.213,466,2.008,467,2.798,470,2.649,471,2.492,472,2.776,474,2.008,476,1.337,477,2.008,478,2.428,480,1.66,483,2.008,484,2.834,485,2.487,486,2.008,487,2.343,488,2.008,489,1.877,490,1.568,491,1.877,492,2.492,493,2.492,494,1.877,495,2.008,496,2.008,497,1.268,501,2.039,502,2.477,503,2.138,504,1.946,505,1.268,506,2.544,507,2.553,508,2.492,509,2.715,510,3.001,511,3.123,512,1.049,513,3.284,514,2.553,515,2.716,516,1.049,517,3.641,518,1.843,519,3.097,520,2.553,521,2.008,522,1.568,523,2.71,524,2.008,525,1.485,526,1.762,527,1.877,528,2.844,529,2.06,530,1.877,531,2.782,532,1.66,533,2.649,534,1.049,535,1.113,536,1.113,537,1.268,538,1.268,539,1.268,540,1.268,541,1.186,542,1.268,543,2.008,544,1.268,545,1.268,546,1.268,547,2.428,548,2.008,549,1.268,550,1.268,551,1.268,552,1.268,553,1.268,554,2.008,555,1.268,556,3.531,557,1.268,558,3.434,559,1.268,560,1.268,561,1.268,562,1.268,563,1.268,564,1.268,565,2.008,566,1.268,567,1.113,568,1.66,569,1.268,570,1.268,571,3.088,572,3.088,573,2.492,574,2.492,575,2.492,576,2.492,577,2.008,578,1.268,579,2.008,580,3.284,581,2.008,582,1.66,583,1.268,584,2.008,585,1.268,586,1.268,587,2.008,588,1.268,589,1.049,590,1.268,591,1.268,592,2.008,593,1.268,594,1.049,595,1.268,596,1.268,597,2.008,598,1.268,599,1.049,600,1.268,601,1.268,602,2.008,603,1.268,604,1.049,605,3.284,606,1.268,607,0.991,608,1.049,609,1.268,610,1.186,611,1.186,612,3.216,613,2.008,614,2.008,615,1.268,616,1.113,617,2.492,618,1.268,619,1.268,620,1.268,621,1.268,622,1.113,623,1.268,624,1.268,625,1.268,626,1.049,627,1.049,628,1.049,629,1.049,630,1.049,631,1.049,632,1.485,633,2.008,634,1.268,635,2.649,636,1.762,637,1.268,638,1.186,639,1.268,640,1.268,641,1.268,642,1.268,643,1.268,644,2.492,645,1.268,646,1.268,647,1.268,648,1.268,649,1.268,650,1.268,651,1.268,1257,2.118]],["title/interfaces/Time.html",[111,0.223,201,0.976]],["body/interfaces/Time.html",[0,0.016,2,0.298,3,0.325,4,0.187,6,0.241,7,2.456,10,0.73,13,0.867,14,0.019,20,0.187,21,1.584,26,0.686,46,0.795,47,0.481,48,1.871,50,1.189,63,0.241,71,1.131,74,0.446,103,0.27,104,0.328,110,0.451,111,0.394,112,1.375,113,0.299,114,0.406,115,0.601,118,1.229,134,0.014,135,0.014,146,1.339,147,1.471,148,1.31,152,1.912,159,2.208,161,2.79,197,2.33,198,3.179,199,2.071,200,3.789,201,2.032,203,4.602,204,3.789,205,3.179,206,2.13,207,3.3,208,3.45,209,4.859,210,3.45,211,2.306,212,3.45,213,1.871,214,3.179,215,3.45,216,4.697,217,3.789,218,3.789,219,4.277,220,4.697,221,3.789,222,3.789,223,4.697,224,3.789,225,2.286,226,3.789,227,2.954,228,2.184,229,2.442]],["title/classes/TimeUnit.html",[0,0.009,287,2.109]],["body/classes/TimeUnit.html",[0,0.015,2,0.275,3,0.285,4,0.172,6,0.223,14,0.019,16,0.873,19,1.493,20,0.172,21,1.506,22,1.069,26,0.823,30,0.826,46,0.811,47,0.531,49,0.832,51,0.906,53,0.737,63,0.223,64,1.341,71,1.075,72,0.826,74,0.431,103,0.249,104,0.302,110,0.448,113,0.285,114,0.448,115,0.629,118,1.341,134,0.014,135,0.014,152,1.818,158,1.818,161,3.157,164,0.971,177,1.296,187,1.307,201,1.901,206,1.734,207,3.397,213,2.56,219,4.066,250,1.187,281,2.516,287,4.25,326,2.56,327,2.099,668,4.466,1258,5.356,1259,3.185,1260,5.184,1261,7.248,1262,5.814,1263,6.749,1264,5.814,1265,5.814,1266,5.814,1267,4.553,1268,5.814,1269,4.987,1270,6.749,1271,5.814,1272,4.553,1273,6.405,1274,4.553,1275,3.917,1276,3.917,1277,3.917,1278,3.917,1279,3.917,1280,3.917,1281,4.466,1282,3.917]],["title/changelog.html",[113,0.154,167,1.084,1283,2.711]],["body/changelog.html",[0,0.015,1,1.712,3,0.154,4,0.171,6,0.221,8,1.909,9,0.97,10,0.631,13,0.552,14,0.018,15,1.429,16,0.92,17,1.079,18,1.819,19,1.029,22,0.497,23,2.261,24,0.852,26,0.352,28,2.411,29,1.649,30,1.102,32,2.411,36,2.411,40,2.411,43,2.411,47,0.247,49,0.374,51,0.422,53,0.733,56,1.756,57,2.023,63,0.221,64,0.58,71,0.58,72,0.446,74,0.32,103,0.171,105,1.879,106,1.879,108,1.318,111,0.406,112,0.706,134,0.011,135,0.011,136,1.649,139,1.645,140,1.467,144,1.649,147,0.936,148,1.578,156,1.733,157,1.664,167,1.079,177,0.893,190,4.705,195,2.195,197,0.981,211,1.467,227,2.703,240,1.318,242,3.994,255,1.064,281,1.029,313,2.703,314,1.252,322,4.174,328,2.195,337,1.17,343,2.072,344,1.553,356,1.879,357,2.712,372,2.023,402,1.879,403,1.879,404,2.023,462,1.756,464,2.7,465,1.467,472,1.252,476,2.622,478,3.399,485,2.372,490,1.467,501,0.981,502,2.488,503,2.092,504,1.467,506,1.389,516,1.553,522,1.467,523,1.649,528,3.81,531,1.389,534,1.553,547,1.999,652,1.879,662,2.7,666,2.411,682,1.756,683,2.023,707,1.879,708,2.023,710,3.765,713,1.879,719,2.023,740,2.983,744,3.408,826,2.7,829,2.7,831,4.462,832,3.698,876,2.7,878,2.023,882,2.411,888,2.91,937,5.021,938,4.112,940,3.468,941,5.094,947,3.468,948,2.411,950,3.468,951,2.411,953,3.468,954,2.411,956,3.468,957,2.411,961,2.411,963,3.158,964,3.698,991,5.05,1023,2.411,1032,3.468,1047,2.411,1067,2.023,1133,2.411,1134,2.411,1135,2.411,1136,2.411,1137,2.195,1200,2.7,1227,5.27,1228,2.411,1251,3.884,1283,4.549,1284,3.138,1285,4.549,1286,4.706,1287,3.138,1288,3.138,1289,3.138,1290,3.138,1291,3.138,1292,7.399,1293,4.515,1294,7.234,1295,3.138,1296,6.12,1297,6.852,1298,3.138,1299,7.041,1300,3.138,1301,2.7,1302,6.852,1303,3.138,1304,5.783,1305,5.288,1306,3.884,1307,3.138,1308,3.138,1309,3.138,1310,3.138,1311,3.138,1312,3.138,1313,3.138,1314,3.138,1315,3.138,1316,3.138,1317,3.138,1318,4.515,1319,7.234,1320,2.7,1321,3.138,1322,6.127,1323,4.974,1324,4.598,1325,5.288,1326,3.138,1327,2.7,1328,4.515,1329,5.783,1330,5.783,1331,5.288,1332,5.288,1333,4.515,1334,4.515,1335,4.515,1336,3.138,1337,3.138,1338,3.138,1339,6.127,1340,2.7,1341,3.138,1342,4.515,1343,3.138,1344,6.852,1345,5.288,1346,3.138,1347,3.138,1348,3.138,1349,4.549,1350,3.138,1351,5.783,1352,3.138,1353,5.787,1354,4.515,1355,4.515,1356,3.138,1357,3.138,1358,3.884,1359,3.468,1360,3.138,1361,5.288,1362,5.288,1363,3.138,1364,3.138,1365,3.138,1366,6.574,1367,3.138,1368,5.783,1369,3.138,1370,3.138,1371,3.138,1372,3.138,1373,5.288,1374,4.549,1375,4.062,1376,2.7,1377,3.138,1378,2.7,1379,3.138,1380,6.438,1381,3.138,1382,3.138,1383,4.515,1384,3.138,1385,3.138,1386,3.138,1387,3.138,1388,3.138,1389,3.138,1390,3.138,1391,4.515,1392,3.138,1393,3.138,1394,3.138,1395,3.138,1396,3.138,1397,3.138,1398,4.515,1399,4.515,1400,3.138,1401,3.138,1402,3.138,1403,3.138,1404,3.138,1405,3.138,1406,3.884,1407,3.138,1408,4.515,1409,4.515,1410,4.515,1411,4.515,1412,3.138,1413,3.138,1414,3.138,1415,3.138,1416,3.138,1417,3.138,1418,5.288,1419,3.138,1420,3.138,1421,3.138,1422,3.138,1423,3.138,1424,3.138,1425,3.138,1426,3.138,1427,3.138,1428,3.138,1429,3.138,1430,3.138,1431,3.138,1432,3.138,1433,3.138,1434,3.138,1435,3.138,1436,3.138,1437,5.288,1438,5.288,1439,2.7,1440,3.138,1441,3.138,1442,3.138,1443,3.138,1444,2.7,1445,3.138,1446,3.138,1447,3.468,1448,2.411,1449,4.549,1450,3.138,1451,3.138,1452,3.138,1453,3.138,1454,3.138,1455,2.195]],["title/coverage.html",[1455,3.589]],["body/coverage.html",[0,0.018,1,1.575,4,0.157,5,4.208,9,0.526,13,0.73,14,0.019,17,1.429,24,1.128,47,0.327,64,0.768,105,2.487,106,2.487,108,1.744,111,0.463,134,0.013,135,0.013,136,2.182,137,4.287,138,1.657,139,1.182,140,1.942,156,1.362,157,1.128,159,1.5,197,1.299,198,4.2,201,1.076,206,1.239,207,1.839,213,1.575,225,1.429,231,2.677,232,4.287,234,2.182,241,1.575,259,2.325,263,2.905,264,4.208,265,3.831,270,2.905,287,2.325,326,1.575,337,1.076,338,4.712,345,3.191,350,3.573,353,3.191,354,4.708,355,4.287,356,2.487,402,2.487,405,3.191,441,5.089,458,2.182,459,3.563,460,2.992,467,1.575,501,1.713,502,1.429,503,1.362,504,1.942,510,1.839,511,1.839,518,1.839,519,1.744,520,2.056,652,2.487,653,4.208,669,2.677,678,2.487,679,4.056,680,3.791,684,2.487,685,2.487,686,2.487,688,2.677,705,2.677,706,4.558,710,2.325,711,2.677,712,2.487,714,2.677,717,2.677,718,2.677,760,3.902,822,3.573,835,3.573,836,3.191,844,3.573,860,3.191,878,2.677,879,4.056,880,3.95,887,2.487,889,2.677,890,2.677,897,2.677,1072,3.191,1083,3.191,1095,3.573,1098,4.208,1110,4.208,1137,2.905,1139,3.191,1162,2.677,1198,2.905,1199,4.712,1207,5.094,1245,3.573,1247,3.573,1258,5.53,1259,5.035,1260,3.191,1269,2.905,1281,3.191,1286,3.191,1455,2.905,1456,4.154,1457,3.573,1458,6.101,1459,6.266,1460,4.154,1461,4.154,1462,6.417,1463,5.478,1464,5.478,1465,5.478,1466,4.154,1467,4.154,1468,3.573,1469,4.154,1470,4.154,1471,4.154,1472,4.154,1473,4.154,1474,4.154,1475,4.154,1476,4.154,1477,4.154,1478,4.154,1479,4.154,1480,5.606,1481,6.516,1482,4.154,1483,4.154,1484,4.154,1485,5.606,1486,4.154,1487,4.154,1488,4.154,1489,4.154,1490,4.154,1491,5.478,1492,3.573,1493,3.573,1494,4.154,1495,4.712,1496,4.712,1497,6.516,1498,4.154,1499,4.154,1500,4.154,1501,3.573,1502,3.573]],["title/dependencies.html",[322,2.534,1375,2.421]],["body/dependencies.html",[3,0.298,14,0.018,63,0.298,134,0.016,135,0.016,322,3.405,831,4.255,1358,5.233,1359,4.673,1503,6.084,1504,6.084]],["title/miscellaneous/functions.html",[13,0.796,1505,1.887]],["body/miscellaneous/functions.html",[6,0.29,13,1.042,14,0.017,16,0.89,20,0.224,71,1.329,72,0.842,113,0.29,134,0.016,135,0.016,159,2.463,161,2.865,198,3.819,201,1.944,203,4.397,207,2.623,208,4.144,209,5.026,210,4.144,211,2.771,212,4.144,213,2.247,215,4.144,1162,4.397,1505,3.548,1506,5.925]],["title/index.html",[20,0.119,113,0.154,167,1.084]],["body/index.html",[0,0.011,1,2.007,9,0.975,10,0.539,13,1.017,14,0.019,16,0.869,17,2.108,18,1.99,19,1.03,22,0.498,24,1.664,26,0.649,46,0.778,47,0.247,48,1.192,49,0.849,50,1.029,53,0.572,56,1.758,57,3.729,58,1.134,63,0.221,64,1.362,74,0.19,103,0.389,111,0.186,112,0.706,113,0.221,118,1.435,121,1.758,134,0.011,135,0.011,138,2.684,139,1.871,141,2.623,146,1.227,147,0.937,148,1.409,156,1.734,157,1.571,158,1.995,159,1.134,161,1.319,162,2.197,163,2.197,166,2.912,167,1.82,171,2.197,175,2.705,187,1.614,201,1.653,203,2.912,206,1.725,207,2.561,213,1.192,214,3.41,228,1.391,241,2.744,242,2.374,245,3.16,254,1.03,255,0.741,260,2.307,304,2.222,307,2.374,313,3.168,316,3.471,324,2.197,337,1.776,340,1.555,343,2.043,344,2.236,345,2.413,346,2.703,347,1.469,356,3.168,357,1.391,371,2.11,372,2.025,401,2.197,403,1.881,429,3.887,438,2.025,442,1.881,447,6.176,465,1.469,467,2.856,470,1.758,472,1.253,476,1.253,478,2,485,1.651,489,1.758,494,1.758,501,1.654,502,2.422,503,2.156,509,3.331,519,1.897,531,2,558,2.529,626,1.555,632,1.391,666,4.064,707,2.705,715,2.197,717,3.41,719,2.912,722,2.197,727,3.7,735,4.104,740,2.113,744,2.025,823,5.273,825,3.887,831,3.16,845,4.551,862,2.703,887,2.705,888,3.41,894,2.413,897,2.912,938,2.025,959,2.197,1067,2.912,1076,2.703,1078,2.703,1084,2.703,1198,3.16,1228,2.413,1269,2.197,1285,2.703,1296,4.977,1306,3.887,1320,3.887,1323,2.703,1324,3.7,1327,2.703,1340,2.703,1349,2.703,1353,2.703,1359,3.471,1374,5.273,1375,2.413,1376,2.703,1378,2.703,1406,2.703,1439,2.703,1444,2.703,1448,2.413,1449,2.703,1507,3.142,1508,3.142,1509,3.142,1510,3.142,1511,3.142,1512,4.518,1513,3.142,1514,3.142,1515,3.142,1516,3.142,1517,3.142,1518,3.142,1519,3.142,1520,3.142,1521,3.142,1522,3.142,1523,3.142,1524,3.142,1525,4.518,1526,4.518,1527,3.142,1528,3.142,1529,3.142,1530,3.142,1531,3.142,1532,3.142,1533,3.142,1534,3.142,1535,4.518,1536,4.518,1537,3.142,1538,3.142,1539,3.142,1540,3.142,1541,3.142,1542,3.142,1543,3.142,1544,3.142,1545,3.142,1546,3.142,1547,3.142,1548,3.142,1549,3.142,1550,3.142,1551,3.142,1552,3.142,1553,3.142,1554,3.142,1555,3.142,1556,3.142,1557,3.142,1558,3.142,1559,3.142,1560,2.703,1561,3.142,1562,3.142,1563,3.142,1564,3.142,1565,3.142,1566,3.142,1567,3.142,1568,3.142,1569,3.142,1570,3.142,1571,4.518,1572,3.142,1573,4.518,1574,3.142,1575,3.142,1576,4.518,1577,3.142,1578,3.142,1579,3.142,1580,3.142,1581,3.142,1582,3.142,1583,3.142,1584,3.142,1585,4.518,1586,4.518,1587,3.142,1588,3.142,1589,3.142,1590,3.142,1591,2.703,1592,4.518,1593,3.142,1594,4.518,1595,3.142,1596,3.142,1597,3.142,1598,3.142,1599,3.142,1600,3.142,1601,3.142,1602,3.142,1603,3.142,1604,3.142,1605,4.518,1606,3.142,1607,4.518,1608,3.142,1609,4.518,1610,3.142,1611,3.142,1612,3.142,1613,3.142,1614,3.142,1615,3.142,1616,3.142,1617,3.142,1618,3.142,1619,3.142,1620,5.291,1621,3.142,1622,3.142,1623,4.518,1624,4.518,1625,3.142,1626,3.142,1627,3.142,1628,3.142,1629,3.142,1630,3.142,1631,3.142,1632,3.142,1633,3.142,1634,3.142,1635,3.142,1636,3.142,1637,3.142,1638,3.142,1639,4.518,1640,3.142,1641,3.142,1642,5.785,1643,3.142,1644,3.142,1645,3.142,1646,3.142,1647,3.142,1648,3.142,1649,6.729,1650,3.142,1651,6.576,1652,3.142,1653,3.142,1654,3.142,1655,3.142,1656,3.142,1657,3.142,1658,3.142,1659,4.551,1660,4.518,1661,6.729,1662,3.142,1663,4.518,1664,3.142,1665,3.142,1666,3.142,1667,2.703,1668,3.142,1669,4.518,1670,5.291,1671,5.291,1672,3.142,1673,3.142,1674,3.142,1675,3.142]],["title/license.html",[113,0.154,167,1.084,1447,2.421]],["body/license.html",[4,0.213,14,0.016,66,3.928,134,0.016,135,0.016,139,1.598,148,1.417,166,3.62,426,3.928,525,3.112,526,3.693,610,3.143,612,3.143,1132,4.314,1286,4.314,1380,4.831,1447,4.314,1448,4.314,1560,4.831,1591,6.243,1659,4.831,1676,7.029,1677,6.613,1678,5.616,1679,5.616,1680,5.616,1681,5.616,1682,6.613,1683,5.616,1684,7.673,1685,6.613,1686,5.616,1687,6.613,1688,5.616,1689,5.616,1690,5.616,1691,5.616,1692,5.616,1693,5.616,1694,5.616,1695,5.616,1696,5.616,1697,5.616,1698,5.616,1699,6.613,1700,6.613,1701,5.616,1702,5.616,1703,6.613,1704,5.616,1705,5.616,1706,5.616,1707,5.616,1708,5.616,1709,5.616,1710,5.616,1711,5.616,1712,5.616,1713,5.616,1714,5.616,1715,5.616,1716,5.616,1717,5.616,1718,5.616,1719,5.616,1720,5.616,1721,5.616,1722,5.616,1723,5.616]],["title/modules.html",[404,3.307]],["body/modules.html",[14,0.016,134,0.016,135,0.016,404,3.958]],["title/overview.html",[1724,4.414]],["body/overview.html",[0,0.014,14,0.016,111,0.362,134,0.016,135,0.016,1138,4.697,1301,5.26,1724,5.26]],["title/miscellaneous/typealiases.html",[1505,1.887,1725,4.529]],["body/miscellaneous/typealiases.html",[9,0.74,13,1.292,14,0.018,20,0.221,24,1.585,47,0.562,134,0.016,135,0.016,157,1.585,337,1.512,459,2.89,460,2.698,501,1.825,503,1.914,506,3.162,679,3.496,680,3.786,687,4.603,713,4.4,879,3.496,880,4.36,891,5.487,1098,4.484,1099,5.022,1505,3.496,1726,5.838,1727,6.764,1728,6.764,1729,5.838,1730,5.838,1731,5.838]],["title/unit-test.html",[281,1.329,1324,2.834]],["body/unit-test.html",[4,0.159,13,0.74,14,0.019,50,1.199,64,0.778,134,0.013,135,0.013,265,2.942,281,1.379,355,2.942,441,5.121,460,2.46,502,1.447,680,2.354,708,2.711,762,3.693,764,3.693,836,3.232,860,3.232,880,2.711,1072,3.232,1083,3.232,1259,2.942,1324,2.942,1455,2.942,1457,3.619,1458,4.752,1459,5.634,1462,3.619,1468,4.752,1480,3.619,1485,5.851,1492,4.752,1493,3.619,1495,4.752,1496,3.619,1501,3.619,1502,3.619,1667,3.619,1732,7.804,1733,4.207,1734,5.524,1735,4.207,1736,5.524,1737,4.207,1738,5.524,1739,4.207,1740,5.524,1741,4.207,1742,5.524,1743,4.207,1744,4.207,1745,5.524,1746,4.207,1747,4.207,1748,4.207,1749,5.524,1750,7.87,1751,4.207,1752,4.207,1753,5.524,1754,5.524,1755,4.207,1756,4.207,1757,6.549,1758,4.207,1759,4.207,1760,5.524,1761,4.207,1762,6.549,1763,5.524,1764,5.524,1765,4.207,1766,4.207,1767,5.524,1768,4.207,1769,6.167,1770,6.549,1771,4.207,1772,4.207,1773,4.207,1774,4.207,1775,4.207,1776,4.207,1777,4.207,1778,4.207,1779,5.524,1780,4.207,1781,4.207,1782,4.207,1783,4.207,1784,4.207,1785,4.207,1786,5.524,1787,4.207,1788,4.207,1789,4.207,1790,4.207,1791,4.207,1792,5.524,1793,5.524,1794,4.207,1795,4.207,1796,4.207,1797,4.207,1798,4.207,1799,4.207,1800,4.207,1801,4.207,1802,4.207,1803,4.207,1804,5.524,1805,4.207,1806,5.524,1807,4.207,1808,4.207,1809,5.524,1810,4.207,1811,4.207,1812,4.207,1813,5.524,1814,5.524,1815,4.207,1816,4.207,1817,4.207,1818,4.207,1819,4.207,1820,4.207,1821,4.207,1822,4.207]],["title/miscellaneous/variables.html",[1207,3.167,1505,1.887]],["body/miscellaneous/variables.html",[14,0.018,20,0.205,47,0.509,48,2.894,49,0.91,64,1.391,72,0.77,134,0.015,135,0.015,157,1.47,161,3.158,206,2.139,207,3.395,213,2.72,326,2.72,354,4.16,355,4.527,372,4.171,403,3.243,404,3.49,405,5.318,406,2.845,653,4.16,669,4.622,670,4.659,671,4.659,1207,3.788,1258,4.16,1259,5.303,1260,5.509,1269,5.016,1275,4.659,1276,4.659,1277,4.659,1278,4.659,1279,4.659,1280,4.659,1281,5.509,1282,4.659,1505,4.145,1823,7.52,1824,5.416,1825,5.416,1826,5.416]]],"invertedIndex":[["",{"_index":14,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"interfaces/Counting.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/Logger.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metered.html":{},"interfaces/Metric.html":{},"interfaces/MetricEntry.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSet.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/MovingAverage.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"unit-test.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":50,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"interfaces/Counting.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"classes/Int64Wrapper.html":{},"interfaces/Metric.html":{},"interfaces/MetricEntry.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/MovingAverage.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"classes/SimpleSnapshot.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Tags.html":{},"interfaces/Time.html":{},"index.html":{},"unit-test.html":{}}}],["0.005",{"_index":180,"title":{},"body":{"classes/Buckets.html":{}}}],["0.01",{"_index":181,"title":{},"body":{"classes/Buckets.html":{}}}],["0.025",{"_index":182,"title":{},"body":{"classes/Buckets.html":{}}}],["0.05",{"_index":183,"title":{},"body":{"classes/Buckets.html":{}}}],["0.1",{"_index":184,"title":{},"body":{"classes/Buckets.html":{}}}],["0.25",{"_index":185,"title":{},"body":{"classes/Buckets.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["0.5",{"_index":186,"title":{},"body":{"classes/Buckets.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["0.5.9",{"_index":1504,"title":{},"body":{"dependencies.html":{}}}],["0.75",{"_index":1144,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["0.95",{"_index":1146,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["0/0",{"_index":1750,"title":{},"body":{"unit-test.html":{}}}],["0/1",{"_index":1746,"title":{},"body":{"unit-test.html":{}}}],["0/2",{"_index":1779,"title":{},"body":{"unit-test.html":{}}}],["01",{"_index":1342,"title":{},"body":{"changelog.html":{}}}],["02",{"_index":1368,"title":{},"body":{"changelog.html":{}}}],["03",{"_index":1437,"title":{},"body":{"changelog.html":{}}}],["04",{"_index":1322,"title":{},"body":{"changelog.html":{}}}],["05",{"_index":1418,"title":{},"body":{"changelog.html":{}}}],["06",{"_index":1339,"title":{},"body":{"changelog.html":{}}}],["07",{"_index":1365,"title":{},"body":{"changelog.html":{}}}],["08",{"_index":1366,"title":{},"body":{"changelog.html":{}}}],["09",{"_index":1344,"title":{},"body":{"changelog.html":{}}}],["1",{"_index":187,"title":{},"body":{"classes/Buckets.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MetricEntry.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/MovingAverage.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"interfaces/Snapshot.html":{},"classes/StopWatch.html":{},"interfaces/Tags.html":{},"classes/TimeUnit.html":{},"index.html":{}}}],["1.0",{"_index":300,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["1.0.0",{"_index":1443,"title":{},"body":{"changelog.html":{}}}],["1.0.1",{"_index":1441,"title":{},"body":{"changelog.html":{}}}],["1.0.2",{"_index":1436,"title":{},"body":{"changelog.html":{}}}],["1.0.3",{"_index":1435,"title":{},"body":{"changelog.html":{}}}],["1.1.0",{"_index":1434,"title":{},"body":{"changelog.html":{}}}],["1.1.1",{"_index":1432,"title":{},"body":{"changelog.html":{}}}],["1.10.0",{"_index":1343,"title":{},"body":{"changelog.html":{}}}],["1.11.0",{"_index":1341,"title":{},"body":{"changelog.html":{}}}],["1.12.0",{"_index":1338,"title":{},"body":{"changelog.html":{}}}],["1.12.1",{"_index":1336,"title":{},"body":{"changelog.html":{}}}],["1.13.0",{"_index":1321,"title":{},"body":{"changelog.html":{}}}],["1.13.1",{"_index":1317,"title":{},"body":{"changelog.html":{}}}],["1.14.0",{"_index":1312,"title":{},"body":{"changelog.html":{}}}],["1.15.0",{"_index":1310,"title":{},"body":{"changelog.html":{}}}],["1.16.0",{"_index":1300,"title":{},"body":{"changelog.html":{}}}],["1.17.0",{"_index":1298,"title":{},"body":{"changelog.html":{}}}],["1.17.1",{"_index":1291,"title":{},"body":{"changelog.html":{}}}],["1.2.0",{"_index":1428,"title":{},"body":{"changelog.html":{}}}],["1.2.1",{"_index":1426,"title":{},"body":{"changelog.html":{}}}],["1.3",{"_index":939,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricSet.html":{}}}],["1.3.0",{"_index":1417,"title":{},"body":{"changelog.html":{}}}],["1.4.1",{"_index":1412,"title":{},"body":{"changelog.html":{}}}],["1.4.2",{"_index":1407,"title":{},"body":{"changelog.html":{}}}],["1.5",{"_index":1046,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["1.5.0",{"_index":1405,"title":{},"body":{"changelog.html":{}}}],["1.5.1",{"_index":1404,"title":{},"body":{"changelog.html":{}}}],["1.5.2",{"_index":1402,"title":{},"body":{"changelog.html":{}}}],["1.5.3",{"_index":1401,"title":{},"body":{"changelog.html":{}}}],["1.5.4",{"_index":1397,"title":{},"body":{"changelog.html":{}}}],["1.6.0",{"_index":1393,"title":{},"body":{"changelog.html":{}}}],["1.7.0",{"_index":1390,"title":{},"body":{"changelog.html":{}}}],["1.8.1",{"_index":1388,"title":{},"body":{"changelog.html":{}}}],["1.8.2",{"_index":1384,"title":{},"body":{"changelog.html":{}}}],["1.8.3",{"_index":1379,"title":{},"body":{"changelog.html":{}}}],["1.8.4",{"_index":1377,"title":{},"body":{"changelog.html":{}}}],["1.8.5",{"_index":1372,"title":{},"body":{"changelog.html":{}}}],["1.8.6",{"_index":1367,"title":{},"body":{"changelog.html":{}}}],["1.8.7",{"_index":1364,"title":{},"body":{"changelog.html":{}}}],["1.8.8",{"_index":1360,"title":{},"body":{"changelog.html":{}}}],["1.9.0",{"_index":1356,"title":{},"body":{"changelog.html":{}}}],["1.9.1",{"_index":1346,"title":{},"body":{"changelog.html":{}}}],["1/1",{"_index":1462,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["1/2",{"_index":1497,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":1461,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":190,"title":{},"body":{"classes/Buckets.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"changelog.html":{}}}],["10/10",{"_index":1749,"title":{},"body":{"unit-test.html":{}}}],["100",{"_index":441,"title":{},"body":{"classes/HdrSnapshot.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"coverage.html":{},"unit-test.html":{}}}],["100.0",{"_index":424,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["1000",{"_index":721,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["10000",{"_index":172,"title":{},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{}}}],["1000000",{"_index":219,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{}}}],["100000000",{"_index":1622,"title":{},"body":{"index.html":{}}}],["1000000000",{"_index":1594,"title":{},"body":{"index.html":{}}}],["100m",{"_index":1623,"title":{},"body":{"index.html":{}}}],["102",{"_index":1596,"title":{},"body":{"index.html":{}}}],["11",{"_index":1299,"title":{},"body":{"changelog.html":{}}}],["11/11",{"_index":1734,"title":{},"body":{"unit-test.html":{}}}],["11/16",{"_index":1756,"title":{},"body":{"unit-test.html":{}}}],["12",{"_index":1133,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"changelog.html":{}}}],["12/12",{"_index":1804,"title":{},"body":{"unit-test.html":{}}}],["12/15",{"_index":1745,"title":{},"body":{"unit-test.html":{}}}],["12/30",{"_index":1473,"title":{},"body":{"coverage.html":{}}}],["12345",{"_index":1579,"title":{},"body":{"index.html":{}}}],["127.0.0.4",{"_index":1559,"title":{},"body":{"index.html":{}}}],["13/15",{"_index":1798,"title":{},"body":{"unit-test.html":{}}}],["13/19",{"_index":1490,"title":{},"body":{"coverage.html":{}}}],["13/31",{"_index":1467,"title":{},"body":{"coverage.html":{}}}],["14",{"_index":1369,"title":{},"body":{"changelog.html":{}}}],["14/14",{"_index":1498,"title":{},"body":{"coverage.html":{}}}],["14/16",{"_index":1791,"title":{},"body":{"unit-test.html":{}}}],["15",{"_index":295,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Metered.html":{},"interfaces/MovingAverage.html":{},"classes/StopWatch.html":{}}}],["15/15",{"_index":1476,"title":{},"body":{"coverage.html":{}}}],["15/17",{"_index":1758,"title":{},"body":{"unit-test.html":{}}}],["15/21",{"_index":1781,"title":{},"body":{"unit-test.html":{}}}],["15/33",{"_index":1465,"title":{},"body":{"coverage.html":{}}}],["16",{"_index":1337,"title":{},"body":{"changelog.html":{}}}],["16/16",{"_index":1491,"title":{},"body":{"coverage.html":{}}}],["16/34",{"_index":1472,"title":{},"body":{"coverage.html":{}}}],["167/174",{"_index":1775,"title":{},"body":{"unit-test.html":{}}}],["17",{"_index":1293,"title":{},"body":{"changelog.html":{}}}],["17/17",{"_index":1799,"title":{},"body":{"unit-test.html":{}}}],["171/178",{"_index":1771,"title":{},"body":{"unit-test.html":{}}}],["18",{"_index":1398,"title":{},"body":{"changelog.html":{}}}],["18/19",{"_index":1807,"title":{},"body":{"unit-test.html":{}}}],["18/20",{"_index":1794,"title":{},"body":{"unit-test.html":{}}}],["19",{"_index":1385,"title":{},"body":{"changelog.html":{}}}],["2.0.1",{"_index":1503,"title":{},"body":{"dependencies.html":{}}}],["2.5",{"_index":188,"title":{},"body":{"classes/Buckets.html":{}}}],["2/2",{"_index":1458,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["20",{"_index":1134,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"changelog.html":{}}}],["20/20",{"_index":1736,"title":{},"body":{"unit-test.html":{}}}],["20/38",{"_index":1479,"title":{},"body":{"coverage.html":{}}}],["2017",{"_index":1380,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["2018",{"_index":1292,"title":{},"body":{"changelog.html":{}}}],["21",{"_index":1318,"title":{},"body":{"changelog.html":{}}}],["21/24",{"_index":1816,"title":{},"body":{"unit-test.html":{}}}],["21/25",{"_index":1790,"title":{},"body":{"unit-test.html":{}}}],["22",{"_index":1135,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"changelog.html":{}}}],["22/22",{"_index":1786,"title":{},"body":{"unit-test.html":{}}}],["24.25",{"_index":1142,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["24/42",{"_index":1475,"title":{},"body":{"coverage.html":{}}}],["25",{"_index":1136,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"changelog.html":{}}}],["25/28",{"_index":1743,"title":{},"body":{"unit-test.html":{}}}],["25/43",{"_index":1500,"title":{},"body":{"coverage.html":{}}}],["26",{"_index":1391,"title":{},"body":{"changelog.html":{}}}],["26/29",{"_index":1739,"title":{},"body":{"unit-test.html":{}}}],["27",{"_index":1301,"title":{},"body":{"changelog.html":{},"overview.html":{}}}],["27/27",{"_index":1760,"title":{},"body":{"unit-test.html":{}}}],["28",{"_index":1357,"title":{},"body":{"changelog.html":{}}}],["28/37",{"_index":1783,"title":{},"body":{"unit-test.html":{}}}],["28/39",{"_index":1778,"title":{},"body":{"unit-test.html":{}}}],["29",{"_index":1345,"title":{},"body":{"changelog.html":{}}}],["29/29",{"_index":1492,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["3",{"_index":442,"title":{},"body":{"classes/HdrSnapshot.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"index.html":{}}}],["3.3.4",{"_index":1309,"title":{},"body":{"changelog.html":{}}}],["3/3",{"_index":1459,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["3/4",{"_index":1764,"title":{},"body":{"unit-test.html":{}}}],["30",{"_index":1137,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"changelog.html":{},"coverage.html":{}}}],["30.000",{"_index":325,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["30/48",{"_index":1484,"title":{},"body":{"coverage.html":{}}}],["31",{"_index":1438,"title":{},"body":{"changelog.html":{}}}],["31/35",{"_index":1817,"title":{},"body":{"unit-test.html":{}}}],["32",{"_index":1138,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"overview.html":{}}}],["32/32",{"_index":1494,"title":{},"body":{"coverage.html":{}}}],["32/35",{"_index":1754,"title":{},"body":{"unit-test.html":{}}}],["32bit",{"_index":664,"title":{},"body":{"classes/Int64Wrapper.html":{}}}],["33",{"_index":1460,"title":{},"body":{"coverage.html":{}}}],["36",{"_index":1143,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["37",{"_index":1810,"title":{},"body":{"unit-test.html":{}}}],["39/41",{"_index":1800,"title":{},"body":{"unit-test.html":{}}}],["4.390",{"_index":1598,"title":{},"body":{"index.html":{}}}],["4/4",{"_index":1485,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["4/5",{"_index":1469,"title":{},"body":{"coverage.html":{}}}],["4/6",{"_index":1747,"title":{},"body":{"unit-test.html":{}}}],["40",{"_index":1139,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"coverage.html":{}}}],["41",{"_index":1466,"title":{},"body":{"coverage.html":{}}}],["41/43",{"_index":1796,"title":{},"body":{"unit-test.html":{}}}],["43/45",{"_index":1806,"title":{},"body":{"unit-test.html":{}}}],["45",{"_index":1464,"title":{},"body":{"coverage.html":{}}}],["47",{"_index":1471,"title":{},"body":{"coverage.html":{}}}],["48/48",{"_index":1767,"title":{},"body":{"unit-test.html":{}}}],["48/56",{"_index":1809,"title":{},"body":{"unit-test.html":{}}}],["5",{"_index":189,"title":{},"body":{"classes/Buckets.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"classes/HdrSnapshot.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Metered.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MovingAverage.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"classes/StopWatch.html":{}}}],["5/5",{"_index":1481,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":760,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"coverage.html":{}}}],["500",{"_index":323,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["50th",{"_index":389,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["51,25",{"_index":1145,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["52",{"_index":1478,"title":{},"body":{"coverage.html":{}}}],["55",{"_index":1140,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["55/90",{"_index":1487,"title":{},"body":{"coverage.html":{}}}],["56",{"_index":1141,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["57",{"_index":1474,"title":{},"body":{"coverage.html":{}}}],["58",{"_index":1499,"title":{},"body":{"coverage.html":{}}}],["6",{"_index":1330,"title":{},"body":{"changelog.html":{}}}],["6/6",{"_index":1480,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["6/7",{"_index":1763,"title":{},"body":{"unit-test.html":{}}}],["6/9",{"_index":1741,"title":{},"body":{"unit-test.html":{}}}],["60",{"_index":292,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["61",{"_index":1486,"title":{},"body":{"coverage.html":{}}}],["62",{"_index":1483,"title":{},"body":{"coverage.html":{}}}],["64bit",{"_index":662,"title":{},"body":{"classes/Int64Wrapper.html":{},"changelog.html":{}}}],["67",{"_index":1740,"title":{},"body":{"unit-test.html":{}}}],["68",{"_index":1489,"title":{},"body":{"coverage.html":{}}}],["69",{"_index":1755,"title":{},"body":{"unit-test.html":{}}}],["7",{"_index":1331,"title":{},"body":{"changelog.html":{}}}],["7/19",{"_index":1811,"title":{},"body":{"unit-test.html":{}}}],["7/7",{"_index":1495,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["71",{"_index":1780,"title":{},"body":{"unit-test.html":{}}}],["72",{"_index":1777,"title":{},"body":{"unit-test.html":{}}}],["73",{"_index":1821,"title":{},"body":{"unit-test.html":{}}}],["75",{"_index":762,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"unit-test.html":{}}}],["75th",{"_index":375,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["76",{"_index":1782,"title":{},"body":{"unit-test.html":{}}}],["8",{"_index":832,"title":{},"body":{"interfaces/Logger.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"changelog.html":{}}}],["8/11",{"_index":1822,"title":{},"body":{"unit-test.html":{}}}],["8/26",{"_index":1488,"title":{},"body":{"coverage.html":{}}}],["8/8",{"_index":1496,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["80",{"_index":1468,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["80/86",{"_index":1774,"title":{},"body":{"unit-test.html":{}}}],["82",{"_index":1792,"title":{},"body":{"unit-test.html":{}}}],["82/93",{"_index":1772,"title":{},"body":{"unit-test.html":{}}}],["84",{"_index":1789,"title":{},"body":{"unit-test.html":{}}}],["86",{"_index":1762,"title":{},"body":{"unit-test.html":{}}}],["87",{"_index":1797,"title":{},"body":{"unit-test.html":{}}}],["88",{"_index":1757,"title":{},"body":{"unit-test.html":{}}}],["88/91",{"_index":1818,"title":{},"body":{"unit-test.html":{}}}],["89",{"_index":1742,"title":{},"body":{"unit-test.html":{}}}],["9",{"_index":1332,"title":{},"body":{"changelog.html":{}}}],["9/11",{"_index":1793,"title":{},"body":{"unit-test.html":{}}}],["9/12",{"_index":1820,"title":{},"body":{"unit-test.html":{}}}],["9/9",{"_index":1493,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["90",{"_index":1738,"title":{},"body":{"unit-test.html":{}}}],["91",{"_index":1753,"title":{},"body":{"unit-test.html":{}}}],["91/94",{"_index":1815,"title":{},"body":{"unit-test.html":{}}}],["93",{"_index":1773,"title":{},"body":{"unit-test.html":{}}}],["95",{"_index":764,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"unit-test.html":{}}}],["95th",{"_index":378,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["96",{"_index":1770,"title":{},"body":{"unit-test.html":{}}}],["97",{"_index":1814,"title":{},"body":{"unit-test.html":{}}}],["98",{"_index":766,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["98th",{"_index":380,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["99",{"_index":768,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["99.9",{"_index":770,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["99.9th",{"_index":382,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["99th",{"_index":384,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["a.b.c",{"_index":1662,"title":{},"body":{"index.html":{}}}],["abov",{"_index":1698,"title":{},"body":{"license.html":{}}}],["abstract",{"_index":7,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Clock.html":{},"interfaces/IMetricReporter.html":{},"interfaces/LogLine.html":{},"interfaces/Logger.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Metric.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"classes/StdClock.html":{},"interfaces/Tags.html":{},"interfaces/Time.html":{}}}],["accessor",{"_index":681,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{}}}],["accord",{"_index":204,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{}}}],["action",{"_index":1719,"title":{},"body":{"license.html":{}}}],["actual",{"_index":248,"title":{},"body":{"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Metered.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{}}}],["ad",{"_index":478,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{},"changelog.html":{},"index.html":{}}}],["add",{"_index":254,"title":{},"body":{"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/IMetricReporter.html":{},"classes/Int64Wrapper.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/MovingAverage.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Reservoir.html":{},"classes/SlidingWindowReservoir.html":{},"classes/StopWatch.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"index.html":{}}}],["add(valu",{"_index":659,"title":{},"body":{"classes/Int64Wrapper.html":{}}}],["addduration(dur",{"_index":1215,"title":{},"body":{"classes/StopWatch.html":{}}}],["addlistener(listen",{"_index":924,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["addmetricregistri",{"_index":461,"title":{},"body":{"interfaces/IMetricReporter.html":{}}}],["addmetricregistry(metricregistri",{"_index":466,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["addtag",{"_index":31,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Taggable.html":{}}}],["addtags(tag",{"_index":69,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"interfaces/Taggable.html":{}}}],["adher",{"_index":1288,"title":{},"body":{"changelog.html":{}}}],["adjust",{"_index":1394,"title":{},"body":{"changelog.html":{}}}],["afterreport",{"_index":493,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["afterreport(ctx",{"_index":550,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["afterward",{"_index":553,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["afterwarsd",{"_index":564,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["again",{"_index":896,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["alias",{"_index":1726,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["alloc",{"_index":1644,"title":{},"body":{"index.html":{}}}],["alpha",{"_index":269,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["alpha_15_minute_1_second_sampler",{"_index":273,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["alpha_15_minute_5_second_sampler",{"_index":274,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["alpha_1_minute_1_second_sampler",{"_index":271,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["alpha_1_minute_5_second_sampler",{"_index":272,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["alpha_5_minute_1_second_sampler",{"_index":275,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["alpha_5_minute_5_second_sampler",{"_index":276,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["alway",{"_index":228,"title":{},"body":{"classes/Clock.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"classes/StdClock.html":{},"interfaces/Tags.html":{},"interfaces/Time.html":{},"index.html":{}}}],["amount",{"_index":866,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["analyz",{"_index":1524,"title":{},"body":{"index.html":{}}}],["and/or",{"_index":1692,"title":{},"body":{"license.html":{}}}],["anerror",{"_index":428,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["any).id",{"_index":618,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["anymor",{"_index":1387,"title":{},"body":{"changelog.html":{}}}],["appli",{"_index":494,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{},"index.html":{}}}],["applic",{"_index":57,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"interfaces/MetricEntry.html":{},"changelog.html":{},"index.html":{}}}],["arg",{"_index":834,"title":{},"body":{"interfaces/Logger.html":{}}}],["argument",{"_index":607,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/LogLine.html":{},"interfaces/Logger.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["aris",{"_index":1723,"title":{},"body":{"license.html":{}}}],["around",{"_index":1621,"title":{},"body":{"index.html":{}}}],["arr",{"_index":1057,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["arr.length",{"_index":1058,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["arr[0",{"_index":1059,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["array",{"_index":255,"title":{},"body":{"classes/DefaultReservoir.html":{},"interfaces/Gauge.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Reservoir.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"interfaces/Tags.html":{},"changelog.html":{},"index.html":{}}}],["array(count",{"_index":173,"title":{},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{}}}],["arraylength",{"_index":1574,"title":{},"body":{"index.html":{}}}],["arraylength.getvalue();histogram",{"_index":1584,"title":{},"body":{"index.html":{}}}],["arraylengthgaug",{"_index":1569,"title":{},"body":{"index.html":{}}}],["arraylengthgauge(\"arraylength",{"_index":1575,"title":{},"body":{"index.html":{}}}],["associ",{"_index":66,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metric.html":{},"license.html":{}}}],["assum",{"_index":210,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{},"miscellaneous/functions.html":{}}}],["async",{"_index":547,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Tags.html":{},"changelog.html":{}}}],["asynchron",{"_index":1237,"title":{},"body":{"classes/StopWatch.html":{}}}],["attribut",{"_index":683,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"changelog.html":{}}}],["author",{"_index":1712,"title":{},"body":{"license.html":{}}}],["avail",{"_index":830,"title":{},"body":{"interfaces/Logger.html":{}}}],["averag",{"_index":268,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MovingAverage.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"classes/StopWatch.html":{}}}],["average.t",{"_index":265,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{},"coverage.html":{},"unit-test.html":{}}}],["average.ts:105",{"_index":305,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{}}}],["average.ts:113",{"_index":288,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{}}}],["average.ts:136",{"_index":308,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{}}}],["average.ts:146",{"_index":311,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{}}}],["average.ts:157",{"_index":310,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{}}}],["average.ts:171",{"_index":321,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{}}}],["average.ts:187",{"_index":312,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{}}}],["average.ts:19",{"_index":1087,"title":{},"body":{"interfaces/MovingAverage.html":{}}}],["average.ts:29",{"_index":1088,"title":{},"body":{"interfaces/MovingAverage.html":{}}}],["average.ts:38",{"_index":1090,"title":{},"body":{"interfaces/MovingAverage.html":{}}}],["average.ts:47",{"_index":1089,"title":{},"body":{"interfaces/MovingAverage.html":{}}}],["average.ts:59",{"_index":293,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{}}}],["average.ts:60",{"_index":294,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{}}}],["average.ts:61",{"_index":298,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{}}}],["average.ts:62",{"_index":299,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{}}}],["average.ts:63",{"_index":296,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{}}}],["average.ts:64",{"_index":297,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{}}}],["average.ts:73",{"_index":289,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{}}}],["average.ts:81",{"_index":302,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{}}}],["average.ts:89",{"_index":303,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{}}}],["average.ts:97",{"_index":301,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{}}}],["avg",{"_index":277,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["await",{"_index":558,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{},"index.html":{}}}],["b",{"_index":175,"title":{},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"index.html":{}}}],["back",{"_index":649,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["badg",{"_index":1403,"title":{},"body":{"changelog.html":{}}}],["base",{"_index":8,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"interfaces/IMetricReporter.html":{},"interfaces/Metric.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Tags.html":{},"changelog.html":{}}}],["basemetr",{"_index":1,"title":{"classes/BaseMetric.html":{}},"body":{"classes/BaseMetric.html":{},"interfaces/Gauge.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/StopWatch.html":{},"changelog.html":{},"coverage.html":{},"index.html":{}}}],["basemetric.count",{"_index":61,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{}}}],["basenam",{"_index":892,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["basereport",{"_index":863,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["basic",{"_index":1449,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["batch",{"_index":1520,"title":{},"body":{"index.html":{}}}],["befor",{"_index":548,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["beforereport",{"_index":492,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["beforereport(ctx",{"_index":549,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["begin",{"_index":1175,"title":{},"body":{"classes/SlidingWindowReservoir.html":{}}}],["between",{"_index":438,"title":{},"body":{"classes/HdrSnapshot.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/StopWatch.html":{},"index.html":{}}}],["book",{"_index":1515,"title":{},"body":{"index.html":{}}}],["boolean",{"_index":636,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["boundari",{"_index":150,"title":{},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"classes/HdrSnapshot.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["branch",{"_index":1667,"title":{},"body":{"index.html":{},"unit-test.html":{}}}],["bucket",{"_index":140,"title":{"classes/Buckets.html":{}},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"classes/HdrSnapshot.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/StopWatch.html":{},"changelog.html":{},"coverage.html":{}}}],["bucketcount",{"_index":136,"title":{"interfaces/BucketCounting.html":{}},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"classes/HdrSnapshot.html":{},"classes/StopWatch.html":{},"changelog.html":{},"coverage.html":{}}}],["buckets(boundari",{"_index":174,"title":{},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{}}}],["buckets=new",{"_index":440,"title":{},"body":{"classes/HdrSnapshot.html":{},"classes/StopWatch.html":{}}}],["bucketwidth",{"_index":168,"title":{},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{}}}],["buffer",{"_index":1642,"title":{},"body":{"index.html":{}}}],["bug",{"_index":1297,"title":{},"body":{"changelog.html":{}}}],["build",{"_index":740,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/Sampling.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"changelog.html":{},"index.html":{}}}],["buildrun",{"_index":1652,"title":{},"body":{"index.html":{}}}],["c",{"_index":612,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{},"license.html":{}}}],["calcul",{"_index":266,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["call",{"_index":371,"title":{},"body":{"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"interfaces/Metered.html":{},"interfaces/MetricRegistryListener.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"interfaces/Tags.html":{},"index.html":{}}}],["callcount",{"_index":1601,"title":{},"body":{"index.html":{}}}],["callcount.get15minuter",{"_index":1606,"title":{},"body":{"index.html":{}}}],["callcount.get1minuter",{"_index":1610,"title":{},"body":{"index.html":{}}}],["callcount.get5minuter",{"_index":1608,"title":{},"body":{"index.html":{}}}],["callcount.getcount",{"_index":1604,"title":{},"body":{"index.html":{}}}],["callcount.getmeanrate();tim",{"_index":1611,"title":{},"body":{"index.html":{}}}],["callcount.mark(1",{"_index":1603,"title":{},"body":{"index.html":{}}}],["callstat",{"_index":1612,"title":{},"body":{"index.html":{}}}],["callstats.addduration(100",{"_index":1614,"title":{},"body":{"index.html":{}}}],["callstats.get15minuter",{"_index":1616,"title":{},"body":{"index.html":{}}}],["callstats.get1minuter",{"_index":1618,"title":{},"body":{"index.html":{}}}],["callstats.get5minuter",{"_index":1617,"title":{},"body":{"index.html":{}}}],["callstats.getcount",{"_index":1615,"title":{},"body":{"index.html":{}}}],["callstats.getmeanr",{"_index":1619,"title":{},"body":{"index.html":{}}}],["callstats.getsnapshot",{"_index":1620,"title":{},"body":{"index.html":{}}}],["callstats.newstopwatch",{"_index":1625,"title":{},"body":{"index.html":{}}}],["callstats.tim",{"_index":1629,"title":{},"body":{"index.html":{}}}],["callstats.timeasync(async",{"_index":1631,"title":{},"body":{"index.html":{}}}],["capac",{"_index":245,"title":{},"body":{"classes/DefaultReservoir.html":{},"interfaces/Reservoir.html":{},"classes/SlidingWindowReservoir.html":{},"index.html":{}}}],["carbon",{"_index":1376,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["catch",{"_index":409,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["catch((err",{"_index":1241,"title":{},"body":{"classes/StopWatch.html":{}}}],["caus",{"_index":1553,"title":{},"body":{"index.html":{}}}],["certain",{"_index":865,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["chai",{"_index":1450,"title":{},"body":{"changelog.html":{}}}],["chang",{"_index":528,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetadataContainer.html":{},"interfaces/MetricEntry.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{},"changelog.html":{}}}],["changelog",{"_index":1283,"title":{"changelog.html":{}},"body":{"changelog.html":{}}}],["charg",{"_index":1681,"title":{},"body":{"license.html":{}}}],["check",{"_index":632,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"interfaces/Tags.html":{},"index.html":{}}}],["child",{"_index":1033,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["choos",{"_index":483,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["cint64",{"_index":1358,"title":{},"body":{"changelog.html":{},"dependencies.html":{}}}],["cint64\").int64",{"_index":671,"title":{},"body":{"classes/Int64Wrapper.html":{},"miscellaneous/variables.html":{}}}],["claim",{"_index":1715,"title":{},"body":{"license.html":{}}}],["class",{"_index":0,"title":{"classes/BaseMetric.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"classes/HdrSnapshot.html":{},"classes/Int64Wrapper.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/SimpleSnapshot.html":{},"classes/SlidingWindowReservoir.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"classes/TimeUnit.html":{}},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"interfaces/Counting.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/MovingAverage.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"changelog.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["clock",{"_index":197,"title":{"classes/Clock.html":{}},"body":{"classes/Clock.html":{},"interfaces/IMetricReporter.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Tags.html":{},"interfaces/Time.html":{},"changelog.html":{},"coverage.html":{}}}],["clock:49",{"_index":1197,"title":{},"body":{"classes/StdClock.html":{}}}],["clock=new",{"_index":539,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["clock=this.defaultclock",{"_index":1016,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["code",{"_index":1251,"title":{},"body":{"interfaces/Taggable.html":{},"changelog.html":{}}}],["collect",{"_index":260,"title":{},"body":{"classes/DefaultReservoir.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricSet.html":{},"interfaces/Reservoir.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"index.html":{}}}],["collection.length",{"_index":691,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{}}}],["collection.s",{"_index":694,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{}}}],["combin",{"_index":530,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"classes/StopWatch.html":{},"interfaces/Tags.html":{}}}],["comment",{"_index":1362,"title":{},"body":{"changelog.html":{}}}],["commit",{"_index":1444,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["common",{"_index":715,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"index.html":{}}}],["commonli",{"_index":11,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{}}}],["compat",{"_index":1400,"title":{},"body":{"changelog.html":{}}}],["compil",{"_index":1323,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["compodoc",{"_index":1348,"title":{},"body":{"changelog.html":{}}}],["compon",{"_index":227,"title":{},"body":{"classes/Clock.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{},"changelog.html":{}}}],["compos",{"_index":1651,"title":{},"body":{"index.html":{}}}],["condit",{"_index":1697,"title":{},"body":{"license.html":{}}}],["config",{"_index":1227,"title":{},"body":{"classes/StopWatch.html":{},"changelog.html":{}}}],["configur",{"_index":1526,"title":{},"body":{"index.html":{}}}],["connect",{"_index":1560,"title":{},"body":{"index.html":{},"license.html":{}}}],["consid",{"_index":1131,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["consol",{"_index":719,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"changelog.html":{},"index.html":{}}}],["console.log(`ad",{"_index":1633,"title":{},"body":{"index.html":{}}}],["console.log(`remov",{"_index":1634,"title":{},"body":{"index.html":{}}}],["const",{"_index":118,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"interfaces/Counting.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"classes/Int64Wrapper.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/MovingAverage.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Tags.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"index.html":{}}}],["constructor",{"_index":177,"title":{},"body":{"classes/Buckets.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"classes/HdrSnapshot.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MovingAverage.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"classes/StopWatch.html":{},"classes/TimeUnit.html":{},"changelog.html":{}}}],["constructor(alpha",{"_index":286,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["constructor(boundari",{"_index":178,"title":{},"body":{"classes/Buckets.html":{}}}],["constructor(clock",{"_index":1202,"title":{},"body":{"classes/StopWatch.html":{}}}],["constructor(initi",{"_index":657,"title":{},"body":{"classes/Int64Wrapper.html":{}}}],["constructor(listen",{"_index":1080,"title":{},"body":{"classes/MetricRegistryListenerRegistration.html":{}}}],["constructor(maxs",{"_index":243,"title":{},"body":{"classes/DefaultReservoir.html":{},"interfaces/Reservoir.html":{},"classes/SlidingWindowReservoir.html":{}}}],["constructor(metricref",{"_index":884,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["constructor(nam",{"_index":346,"title":{},"body":{"interfaces/Gauge.html":{},"index.html":{}}}],["constructor(nanosecondsperunit",{"_index":1264,"title":{},"body":{"classes/TimeUnit.html":{}}}],["constructor(opt",{"_index":541,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Tags.html":{}}}],["constructor(priv",{"_index":411,"title":{},"body":{"classes/HdrSnapshot.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["constructor(refer",{"_index":368,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["constructor(valu",{"_index":1111,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["contain",{"_index":107,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/Metric.html":{}}}],["container.t",{"_index":836,"title":{},"body":{"interfaces/MetadataContainer.html":{},"coverage.html":{},"unit-test.html":{}}}],["container.ts:19",{"_index":838,"title":{},"body":{"interfaces/MetadataContainer.html":{}}}],["container.ts:29",{"_index":837,"title":{},"body":{"interfaces/MetadataContainer.html":{}}}],["container.ts:39",{"_index":842,"title":{},"body":{"interfaces/MetadataContainer.html":{}}}],["container.ts:50",{"_index":843,"title":{},"body":{"interfaces/MetadataContainer.html":{}}}],["context",{"_index":512,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["contract",{"_index":1720,"title":{},"body":{"license.html":{}}}],["conveni",{"_index":1200,"title":{},"body":{"classes/StopWatch.html":{},"changelog.html":{}}}],["convert",{"_index":668,"title":{},"body":{"classes/Int64Wrapper.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"classes/TimeUnit.html":{}}}],["convertto",{"_index":1262,"title":{},"body":{"classes/TimeUnit.html":{}}}],["convertto(valu",{"_index":1266,"title":{},"body":{"classes/TimeUnit.html":{}}}],["copi",{"_index":1591,"title":{},"body":{"index.html":{},"license.html":{}}}],["copyright",{"_index":1676,"title":{},"body":{"license.html":{}}}],["correspond",{"_index":151,"title":{},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{}}}],["corrspond",{"_index":923,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["count",{"_index":138,"title":{"interfaces/Counting.html":{}},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"classes/HdrSnapshot.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/StopWatch.html":{},"coverage.html":{},"index.html":{}}}],["countabl",{"_index":154,"title":{},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{}}}],["counter",{"_index":24,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{},"changelog.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["counter#getcount",{"_index":741,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["counter(nam",{"_index":1012,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["counter.getcount",{"_index":582,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["counter.getgroup",{"_index":749,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["counter.getnam",{"_index":746,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["counterctx",{"_index":571,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["counterctx.metr",{"_index":577,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["counterresult",{"_index":584,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["coverag",{"_index":1455,"title":{"coverage.html":{}},"body":{"changelog.html":{},"coverage.html":{},"unit-test.html":{}}}],["creat",{"_index":164,"title":{},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/MovingAverage.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Reservoir.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StopWatch.html":{},"interfaces/Tags.html":{},"classes/TimeUnit.html":{}}}],["createmetricsetreportcontext",{"_index":608,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["createmetricsetreportcontext(ctx",{"_index":572,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["createoverallreportcontext",{"_index":606,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["createreportingcontext",{"_index":563,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["csv",{"_index":1327,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["ctx",{"_index":556,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["ctx.date",{"_index":752,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["ctx.date.gettim",{"_index":621,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["ctx.logmetadata",{"_index":753,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["ctx.logmetadata.group",{"_index":748,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["ctx.logmetadata.measur",{"_index":747,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["ctx.logmetadata.tag",{"_index":750,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["ctx.metric",{"_index":615,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["current",{"_index":146,"title":{},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"interfaces/Counting.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"interfaces/IMetricReporter.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/MovingAverage.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"classes/StdClock.html":{},"interfaces/Tags.html":{},"interfaces/Time.html":{},"index.html":{}}}],["d",{"_index":1668,"title":{},"body":{"index.html":{}}}],["damag",{"_index":1716,"title":{},"body":{"license.html":{}}}],["data",{"_index":1525,"title":{},"body":{"index.html":{}}}],["date",{"_index":517,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["date(this.options.clock.time().millisecond",{"_index":570,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["date.now",{"_index":223,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{}}}],["day",{"_index":1281,"title":{},"body":{"classes/TimeUnit.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["db",{"_index":1567,"title":{},"body":{"index.html":{}}}],["deal",{"_index":1685,"title":{},"body":{"license.html":{}}}],["debug",{"_index":824,"title":{},"body":{"interfaces/Logger.html":{}}}],["decim",{"_index":436,"title":{},"body":{"classes/HdrSnapshot.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["default",{"_index":48,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/SimpleSnapshot.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["defaultclock",{"_index":920,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["defaultnamefactory(basenam",{"_index":919,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["defaultreservoir",{"_index":231,"title":{"classes/DefaultReservoir.html":{}},"body":{"classes/DefaultReservoir.html":{},"interfaces/Reservoir.html":{},"classes/SlidingWindowReservoir.html":{},"coverage.html":{}}}],["defin",{"_index":51,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"interfaces/Counting.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metered.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricSet.html":{},"interfaces/MovingAverage.html":{},"interfaces/OverallReportContext.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"classes/TimeUnit.html":{},"changelog.html":{}}}],["definit",{"_index":1099,"title":{},"body":{"interfaces/ScheduledMetricReporterOptions.html":{},"miscellaneous/typealiases.html":{}}}],["delet",{"_index":930,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["depend",{"_index":322,"title":{"dependencies.html":{}},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"classes/HdrSnapshot.html":{},"interfaces/Metered.html":{},"interfaces/MovingAverage.html":{},"changelog.html":{},"dependencies.html":{}}}],["deploy",{"_index":1519,"title":{},"body":{"index.html":{}}}],["deprec",{"_index":937,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricSet.html":{},"changelog.html":{}}}],["descript",{"_index":6,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"interfaces/Counting.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/Logger.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metered.html":{},"interfaces/Metric.html":{},"interfaces/MetricEntry.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSet.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/MovingAverage.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"changelog.html":{},"miscellaneous/functions.html":{}}}],["description=nul",{"_index":1010,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["determin",{"_index":199,"title":{},"body":{"classes/Clock.html":{},"interfaces/IMetricReporter.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Tags.html":{},"interfaces/Time.html":{}}}],["dev",{"_index":1349,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["deviat",{"_index":394,"title":{},"body":{"classes/HdrSnapshot.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["diff",{"_index":1162,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"classes/StopWatch.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["diff(on",{"_index":215,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{},"miscellaneous/functions.html":{}}}],["differ",{"_index":313,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MovingAverage.html":{},"changelog.html":{},"index.html":{}}}],["directgaug",{"_index":912,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["directli",{"_index":862,"title":{},"body":{"interfaces/MetricEntry.html":{},"index.html":{}}}],["distribut",{"_index":166,"title":{},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"index.html":{},"license.html":{}}}],["divid",{"_index":315,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["doc",{"_index":1296,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["docker",{"_index":1649,"title":{},"body":{"index.html":{}}}],["document",{"_index":1286,"title":{},"body":{"changelog.html":{},"coverage.html":{},"license.html":{}}}],["doesn't",{"_index":1386,"title":{},"body":{"changelog.html":{}}}],["don't",{"_index":1425,"title":{},"body":{"changelog.html":{}}}],["durat",{"_index":214,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Time.html":{},"index.html":{}}}],["dure",{"_index":1645,"title":{},"body":{"index.html":{}}}],["e",{"_index":410,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["e.g",{"_index":158,"title":{},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Metered.html":{},"interfaces/MetricEntry.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MovingAverage.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"interfaces/Snapshot.html":{},"classes/TimeUnit.html":{},"index.html":{}}}],["each",{"_index":531,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{},"changelog.html":{},"index.html":{}}}],["editorconfig",{"_index":1419,"title":{},"body":{"changelog.html":{}}}],["elaps",{"_index":208,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{},"miscellaneous/functions.html":{}}}],["elasticsearch",{"_index":1378,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["element",{"_index":1641,"title":{},"body":{"index.html":{}}}],["embed",{"_index":1218,"title":{},"body":{"classes/StopWatch.html":{}}}],["empti",{"_index":399,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["end",{"_index":162,"title":{},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"index.html":{}}}],["ensur",{"_index":864,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["entri",{"_index":505,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["entry.t",{"_index":860,"title":{},"body":{"interfaces/MetricEntry.html":{},"coverage.html":{},"unit-test.html":{}}}],["enumer",{"_index":1731,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["equal",{"_index":1270,"title":{},"body":{"classes/TimeUnit.html":{}}}],["eras",{"_index":1414,"title":{},"body":{"changelog.html":{}}}],["err",{"_index":1242,"title":{},"body":{"classes/StopWatch.html":{}}}],["error",{"_index":825,"title":{},"body":{"interfaces/Logger.html":{},"index.html":{}}}],["error(\"modul",{"_index":444,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["errorcount",{"_index":1550,"title":{},"body":{"index.html":{}}}],["errorcount.getcount",{"_index":1555,"title":{},"body":{"index.html":{}}}],["errorcount.incr",{"_index":1554,"title":{},"body":{"index.html":{}}}],["errorcount.increment(1",{"_index":1552,"title":{},"body":{"index.html":{}}}],["errorcount.reset();ev",{"_index":1556,"title":{},"body":{"index.html":{}}}],["es2017",{"_index":1334,"title":{},"body":{"changelog.html":{}}}],["es6",{"_index":1335,"title":{},"body":{"changelog.html":{}}}],["etc",{"_index":1389,"title":{},"body":{"changelog.html":{}}}],["event",{"_index":139,"title":{},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/IMetricReporter.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Metered.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/MovingAverage.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"classes/StopWatch.html":{},"interfaces/Tags.html":{},"changelog.html":{},"coverage.html":{},"index.html":{},"license.html":{}}}],["event(\"application_start",{"_index":1561,"title":{},"body":{"index.html":{}}}],["event.gettim",{"_index":729,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["everyth",{"_index":153,"title":{},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{}}}],["evnet",{"_index":497,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["exampl",{"_index":19,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"classes/HdrSnapshot.html":{},"classes/Int64Wrapper.html":{},"interfaces/MetricEntry.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/SimpleSnapshot.html":{},"classes/SlidingWindowReservoir.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"classes/TimeUnit.html":{},"changelog.html":{},"index.html":{}}}],["execut",{"_index":1646,"title":{},"body":{"index.html":{}}}],["exponenti",{"_index":176,"title":{},"body":{"classes/Buckets.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["exponential(initi",{"_index":192,"title":{},"body":{"classes/Buckets.html":{}}}],["exponentiallyweightedmovingaverag",{"_index":263,"title":{"classes/ExponentiallyWeightedMovingAverage.html":{}},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{},"coverage.html":{}}}],["export",{"_index":110,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"interfaces/Counting.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/Logger.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metered.html":{},"interfaces/Metric.html":{},"interfaces/MetricEntry.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSet.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/MovingAverage.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{}}}],["express",{"_index":1705,"title":{},"body":{"license.html":{}}}],["extend",{"_index":112,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"interfaces/Counting.html":{},"interfaces/Gauge.html":{},"classes/HdrSnapshot.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Metered.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricSet.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Time.html":{},"changelog.html":{},"index.html":{}}}],["extractor",{"_index":696,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{}}}],["f",{"_index":1235,"title":{},"body":{"classes/StopWatch.html":{}}}],["factor",{"_index":193,"title":{},"body":{"classes/Buckets.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["factori",{"_index":921,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["featur",{"_index":524,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["feed",{"_index":1395,"title":{},"body":{"changelog.html":{}}}],["few",{"_index":1540,"title":{},"body":{"index.html":{}}}],["field",{"_index":744,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"changelog.html":{},"index.html":{}}}],["figur",{"_index":435,"title":{},"body":{"classes/HdrSnapshot.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["figures=3",{"_index":434,"title":{},"body":{"classes/HdrSnapshot.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["file",{"_index":4,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"interfaces/Counting.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/Logger.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metered.html":{},"interfaces/Metric.html":{},"interfaces/MetricEntry.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSet.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/MovingAverage.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"changelog.html":{},"coverage.html":{},"license.html":{},"unit-test.html":{}}}],["fileset",{"_index":1442,"title":{},"body":{"changelog.html":{}}}],["filter",{"_index":609,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["filter((metr",{"_index":616,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["filter((result",{"_index":624,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["filter(metricregistry.iscount",{"_index":943,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["filter(metricregistry.isgaug",{"_index":949,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["filter(metricregistry.ishistogram",{"_index":952,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["filter(metricregistry.ismet",{"_index":955,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["filter(metricregistry.ispuremonotonecount",{"_index":962,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["filter(metricregistry.istim",{"_index":958,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["final",{"_index":567,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetadataContainer.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"classes/StopWatch.html":{},"interfaces/Tags.html":{}}}],["find",{"_index":1055,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["firemetricadded(nam",{"_index":1066,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["firemetricremoved(nam",{"_index":1070,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["first",{"_index":211,"title":{},"body":{"classes/Clock.html":{},"interfaces/Logger.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{},"changelog.html":{},"miscellaneous/functions.html":{}}}],["fit",{"_index":1708,"title":{},"body":{"license.html":{}}}],["fix",{"_index":1294,"title":{},"body":{"changelog.html":{}}}],["fluent",{"_index":1314,"title":{},"body":{"changelog.html":{}}}],["flushev",{"_index":462,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{},"changelog.html":{}}}],["fo",{"_index":1096,"title":{},"body":{"interfaces/Sampling.html":{},"interfaces/Summarizing.html":{}}}],["folder",{"_index":1373,"title":{},"body":{"changelog.html":{}}}],["follow",{"_index":1132,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"license.html":{}}}],["foreach((registr",{"_index":944,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["format",{"_index":1287,"title":{},"body":{"changelog.html":{}}}],["found",{"_index":445,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["fr",{"_index":1666,"title":{},"body":{"index.html":{}}}],["free",{"_index":1680,"title":{},"body":{"license.html":{}}}],["function",{"_index":13,"title":{"miscellaneous/functions.html":{}},"body":{"classes/BaseMetric.html":{},"classes/Clock.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/IMetricReporter.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Logger.html":{},"interfaces/Metered.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/MovingAverage.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Tags.html":{},"interfaces/Time.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"unit-test.html":{}}}],["function'",{"_index":1231,"title":{},"body":{"classes/StopWatch.html":{}}}],["furnish",{"_index":1695,"title":{},"body":{"license.html":{}}}],["futur",{"_index":839,"title":{},"body":{"interfaces/MetadataContainer.html":{}}}],["garbag",{"_index":1530,"title":{},"body":{"index.html":{}}}],["gather",{"_index":1639,"title":{},"body":{"index.html":{}}}],["gaug",{"_index":337,"title":{"interfaces/Gauge.html":{}},"body":{"interfaces/Gauge.html":{},"interfaces/IMetricReporter.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MetricEntry.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"interfaces/Tags.html":{},"changelog.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["gauge'",{"_index":754,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["gauge.getgroup",{"_index":757,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["gauge.getnam",{"_index":756,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["gauge.getvalu",{"_index":589,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["gauge.t",{"_index":680,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"unit-test.html":{}}}],["gauge.ts:13",{"_index":704,"title":{},"body":{"interfaces/LengthMethodInterface.html":{}}}],["gauge.ts:33",{"_index":1172,"title":{},"body":{"interfaces/SizeMethodInterface.html":{}}}],["gaugectx",{"_index":573,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["gaugectx.metr",{"_index":585,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["gaugeregistr",{"_index":914,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["gaugeresult",{"_index":587,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["gener",{"_index":918,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["generatename(nam",{"_index":1062,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["get",{"_index":113,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"interfaces/Counting.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metered.html":{},"interfaces/Metric.html":{},"interfaces/MetricEntry.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSet.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/MovingAverage.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["get15minuter",{"_index":846,"title":{},"body":{"interfaces/Metered.html":{},"classes/StopWatch.html":{}}}],["get1minuter",{"_index":847,"title":{},"body":{"interfaces/Metered.html":{},"classes/StopWatch.html":{}}}],["get5minuter",{"_index":848,"title":{},"body":{"interfaces/Metered.html":{},"classes/StopWatch.html":{}}}],["get75thpercentil",{"_index":358,"title":{},"body":{"classes/HdrSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["get95thpercentil",{"_index":359,"title":{},"body":{"classes/HdrSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["get98thpercentil",{"_index":360,"title":{},"body":{"classes/HdrSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["get999thpercentil",{"_index":361,"title":{},"body":{"classes/HdrSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["get99thpercentil",{"_index":362,"title":{},"body":{"classes/HdrSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["getalpha",{"_index":282,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["getaverag",{"_index":283,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["getaverage(unit",{"_index":309,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["getbucket",{"_index":143,"title":{},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"classes/StopWatch.html":{}}}],["getbyname(nam",{"_index":1060,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getcount",{"_index":144,"title":{},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/Metered.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/StopWatch.html":{},"changelog.html":{}}}],["getcounter(nam",{"_index":971,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getcounterlist",{"_index":940,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"changelog.html":{}}}],["getcountersbynam",{"_index":970,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getcountersbyname(nam",{"_index":984,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getdefaultclock",{"_index":934,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getdescript",{"_index":32,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"changelog.html":{}}}],["getfirstbyname(nam",{"_index":1056,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getgaug",{"_index":948,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"changelog.html":{}}}],["getgauge(nam",{"_index":973,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getgaugelist",{"_index":947,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"changelog.html":{}}}],["getgaugesbynam",{"_index":972,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getgaugesbyname(nam",{"_index":986,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getgroup",{"_index":33,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Groupable.html":{},"interfaces/Metric.html":{}}}],["gethistogram",{"_index":951,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"changelog.html":{}}}],["gethistogram(nam",{"_index":976,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["gethistogramlist",{"_index":950,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"changelog.html":{}}}],["gethistogramsbynam",{"_index":975,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["gethistogramsbyname(nam",{"_index":988,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getlog",{"_index":724,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["getmax",{"_index":363,"title":{},"body":{"classes/HdrSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["getmean",{"_index":364,"title":{},"body":{"classes/HdrSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["getmeanr",{"_index":849,"title":{},"body":{"interfaces/Metered.html":{},"classes/StopWatch.html":{}}}],["getmedian",{"_index":365,"title":{},"body":{"classes/HdrSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["getmet",{"_index":954,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"changelog.html":{}}}],["getmetadata",{"_index":34,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/MetadataContainer.html":{}}}],["getmetadata(nam",{"_index":76,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metric.html":{}}}],["getmetadatamap",{"_index":35,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metric.html":{}}}],["getmeter(nam",{"_index":978,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getmeterlist",{"_index":953,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"changelog.html":{}}}],["getmetersbynam",{"_index":977,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getmetersbyname(nam",{"_index":989,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getmetr",{"_index":963,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricSet.html":{},"changelog.html":{}}}],["getmetric(nam",{"_index":968,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getmetriclist",{"_index":964,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricSet.html":{},"changelog.html":{}}}],["getmetricsbynam",{"_index":967,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getmetricsbyname(nam",{"_index":982,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getmin",{"_index":366,"title":{},"body":{"classes/HdrSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["getmonotonecounterlist",{"_index":961,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"changelog.html":{}}}],["getmonotonecountersbyname(nam",{"_index":985,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getnam",{"_index":36,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"changelog.html":{}}}],["getnanosecondsperunit",{"_index":1263,"title":{},"body":{"classes/TimeUnit.html":{}}}],["getnumber(valu",{"_index":650,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["getsnapshot",{"_index":452,"title":{},"body":{"classes/HdrSnapshot.html":{},"interfaces/Sampling.html":{},"classes/StopWatch.html":{}}}],["getstddev",{"_index":367,"title":{},"body":{"classes/HdrSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["getsum",{"_index":1221,"title":{},"body":{"classes/StopWatch.html":{},"interfaces/Summarizing.html":{}}}],["gettag",{"_index":37,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/IMetricReporter.html":{},"interfaces/Metric.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{}}}],["gettag(nam",{"_index":81,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"interfaces/Taggable.html":{}}}],["gettim",{"_index":957,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"changelog.html":{}}}],["gettimer(nam",{"_index":980,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["gettimerlist",{"_index":956,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"changelog.html":{}}}],["gettimersbynam",{"_index":979,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["gettimersbyname(nam",{"_index":990,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getunit",{"_index":284,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["getvalu",{"_index":340,"title":{},"body":{"interfaces/Gauge.html":{},"classes/HdrSnapshot.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"interfaces/Snapshot.html":{},"index.html":{}}}],["getvalue(0.5",{"_index":1127,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["getvalue(0.75",{"_index":1115,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["getvalue(0.95",{"_index":1117,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["getvalue(0.98",{"_index":1119,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["getvalue(0.99",{"_index":1123,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["getvalue(0.999",{"_index":1121,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["getvalue(quantil",{"_index":395,"title":{},"body":{"classes/HdrSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["gh",{"_index":1669,"title":{},"body":{"index.html":{}}}],["git",{"_index":1661,"title":{},"body":{"index.html":{}}}],["give",{"_index":54,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/IMetricReporter.html":{},"interfaces/Metric.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["given",{"_index":327,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/MovingAverage.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{},"classes/TimeUnit.html":{}}}],["global.consol",{"_index":1536,"title":{},"body":{"index.html":{}}}],["grant",{"_index":1679,"title":{},"body":{"license.html":{}}}],["graph",{"_index":875,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["graphit",{"_index":1532,"title":{},"body":{"index.html":{}}}],["group",{"_index":18,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Groupable.html":{},"interfaces/IMetricReporter.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{},"changelog.html":{},"index.html":{}}}],["group=nul",{"_index":1009,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["groupabl",{"_index":105,"title":{"interfaces/Groupable.html":{}},"body":{"classes/BaseMetric.html":{},"interfaces/Groupable.html":{},"interfaces/Metric.html":{},"changelog.html":{},"coverage.html":{}}}],["hand",{"_index":867,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["handl",{"_index":508,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["handleresult",{"_index":568,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["haschanged(metricid",{"_index":637,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["have",{"_index":527,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricEntry.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["haven't",{"_index":868,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["hdr",{"_index":403,"title":{},"body":{"classes/HdrSnapshot.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["hdrhistogram",{"_index":356,"title":{},"body":{"classes/HdrSnapshot.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"changelog.html":{},"coverage.html":{},"index.html":{}}}],["hdrhistogram(lowest",{"_index":1024,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["hdrsnapshot",{"_index":353,"title":{"classes/HdrSnapshot.html":{}},"body":{"classes/HdrSnapshot.html":{},"coverage.html":{}}}],["hdrsnapshot(thi",{"_index":451,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["health",{"_index":869,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["healthi",{"_index":871,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["helper",{"_index":507,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["here",{"_index":841,"title":{},"body":{"interfaces/MetadataContainer.html":{}}}],["herebi",{"_index":1678,"title":{},"body":{"license.html":{}}}],["high",{"_index":317,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["histogram",{"_index":157,"title":{},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"classes/StopWatch.html":{},"interfaces/Tags.html":{},"changelog.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["histogram#getcount",{"_index":758,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["histogram(reservoir",{"_index":1028,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/StopWatch.html":{}}}],["histogram.getcount",{"_index":594,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["histogram.getgroup",{"_index":775,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["histogram.getnam",{"_index":773,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["histogram.getsnapshot",{"_index":774,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["histogram.t",{"_index":355,"title":{},"body":{"classes/HdrSnapshot.html":{},"coverage.html":{},"unit-test.html":{},"miscellaneous/variables.html":{}}}],["histogram.ts:109",{"_index":385,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["histogram.ts:120",{"_index":390,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["histogram.ts:130",{"_index":398,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["histogram.ts:140",{"_index":400,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["histogram.ts:151",{"_index":387,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["histogram.ts:162",{"_index":392,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["histogram.ts:173",{"_index":396,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["histogram.ts:26",{"_index":369,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["histogram.ts:43",{"_index":370,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["histogram.ts:54",{"_index":377,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["histogram.ts:65",{"_index":379,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["histogram.ts:76",{"_index":381,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["histogram.ts:87",{"_index":383,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["histogram.ts:98",{"_index":388,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["histogramctx",{"_index":574,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["histogramctx.metr",{"_index":590,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["histogramresult",{"_index":592,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["hoc",{"_index":485,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{},"changelog.html":{},"index.html":{}}}],["holder",{"_index":1713,"title":{},"body":{"license.html":{}}}],["homepag",{"_index":1350,"title":{},"body":{"changelog.html":{}}}],["hour",{"_index":1260,"title":{},"body":{"classes/TimeUnit.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["hrd",{"_index":373,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["http://metrics.dropwizard.io",{"_index":1509,"title":{},"body":{"index.html":{}}}],["https://github.com/doubret",{"_index":1305,"title":{},"body":{"changelog.html":{}}}],["https://github.com/rstiller/inspector",{"_index":1302,"title":{},"body":{"changelog.html":{}}}],["https://github.com/rwfaulkn",{"_index":1371,"title":{},"body":{"changelog.html":{}}}],["id",{"_index":28,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"changelog.html":{}}}],["identifi",{"_index":1456,"title":{},"body":{"coverage.html":{}}}],["igroup",{"_index":1430,"title":{},"body":{"changelog.html":{}}}],["imag",{"_index":1650,"title":{},"body":{"index.html":{}}}],["imetricreport",{"_index":458,"title":{"interfaces/IMetricReporter.html":{}},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{},"coverage.html":{}}}],["immedi",{"_index":490,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{},"changelog.html":{}}}],["implement",{"_index":10,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"interfaces/Counting.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Metered.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/MovingAverage.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Reservoir.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Tags.html":{},"interfaces/Time.html":{},"changelog.html":{},"index.html":{}}}],["impli",{"_index":1706,"title":{},"body":{"license.html":{}}}],["import",{"_index":103,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"interfaces/Counting.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/Logger.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metered.html":{},"interfaces/Metric.html":{},"interfaces/MetricEntry.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSet.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/MovingAverage.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"changelog.html":{},"index.html":{}}}],["includ",{"_index":525,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MetricEntry.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{},"license.html":{}}}],["inclus",{"_index":439,"title":{},"body":{"classes/HdrSnapshot.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["increas",{"_index":1518,"title":{},"body":{"index.html":{}}}],["increment",{"_index":1392,"title":{},"body":{"changelog.html":{}}}],["index",{"_index":20,"title":{"index.html":{}},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"interfaces/Counting.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/Logger.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metered.html":{},"interfaces/Metric.html":{},"interfaces/MetricEntry.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSet.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/MovingAverage.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indexof(metr",{"_index":1002,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["indexof(metrics[0",{"_index":996,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["influx",{"_index":1533,"title":{},"body":{"index.html":{}}}],["info",{"_index":2,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"interfaces/Counting.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/Logger.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metered.html":{},"interfaces/Metric.html":{},"interfaces/MetricEntry.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSet.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/MovingAverage.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{}}}],["inherit",{"_index":1196,"title":{},"body":{"classes/StdClock.html":{}}}],["initi",{"_index":195,"title":{},"body":{"classes/Buckets.html":{},"interfaces/Gauge.html":{},"classes/Int64Wrapper.html":{},"changelog.html":{}}}],["initial=0",{"_index":672,"title":{},"body":{"classes/Int64Wrapper.html":{}}}],["insert",{"_index":1073,"title":{},"body":{"interfaces/MetricRegistryListener.html":{},"classes/SlidingWindowReservoir.html":{}}}],["inspector",{"_index":447,"title":{},"body":{"classes/HdrSnapshot.html":{},"index.html":{}}}],["instal",{"_index":429,"title":{},"body":{"classes/HdrSnapshot.html":{},"index.html":{}}}],["instanc",{"_index":53,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Buckets.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metric.html":{},"interfaces/MetricEntry.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSet.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/MovingAverage.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Reservoir.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StopWatch.html":{},"interfaces/Tags.html":{},"classes/TimeUnit.html":{},"changelog.html":{},"index.html":{}}}],["instance.getmetr",{"_index":917,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["instance.getvalu",{"_index":913,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["instance.metricref",{"_index":904,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["instance.metricref.getvalu",{"_index":915,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["instanceof",{"_index":903,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["instead",{"_index":941,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricSet.html":{},"changelog.html":{}}}],["int64",{"_index":669,"title":{},"body":{"classes/Int64Wrapper.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["int64(initi",{"_index":674,"title":{},"body":{"classes/Int64Wrapper.html":{}}}],["int64_t",{"_index":654,"title":{},"body":{"classes/Int64Wrapper.html":{}}}],["int64wrapp",{"_index":652,"title":{"classes/Int64Wrapper.html":{}},"body":{"classes/Int64Wrapper.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"changelog.html":{},"coverage.html":{}}}],["integ",{"_index":666,"title":{},"body":{"classes/Int64Wrapper.html":{},"changelog.html":{},"index.html":{}}}],["interfac",{"_index":111,"title":{"interfaces/BucketCounting.html":{},"interfaces/Counting.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"interfaces/IMetricReporter.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/Logger.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metered.html":{},"interfaces/Metric.html":{},"interfaces/MetricEntry.html":{},"interfaces/MetricRegistryListener.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSet.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/MovingAverage.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"interfaces/Snapshot.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"interfaces/Time.html":{}},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"interfaces/Counting.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"interfaces/IMetricReporter.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/Logger.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metered.html":{},"interfaces/Metric.html":{},"interfaces/MetricEntry.html":{},"interfaces/MetricRegistryListener.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSet.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/MovingAverage.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"interfaces/Time.html":{},"changelog.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["intern",{"_index":1228,"title":{},"body":{"classes/StopWatch.html":{},"changelog.html":{},"index.html":{}}}],["interv",{"_index":278,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{},"interfaces/ScheduledMetricReporterOptions.html":{}}}],["introduc",{"_index":1313,"title":{},"body":{"changelog.html":{}}}],["invoc",{"_index":1209,"title":{},"body":{"classes/StopWatch.html":{}}}],["invok",{"_index":1065,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/StopWatch.html":{}}}],["iscount",{"_index":1408,"title":{},"body":{"changelog.html":{}}}],["iscounter(inst",{"_index":902,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["isgaug",{"_index":1415,"title":{},"body":{"changelog.html":{}}}],["isgauge(inst",{"_index":911,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["ishistogram",{"_index":1409,"title":{},"body":{"changelog.html":{}}}],["ishistogram(inst",{"_index":908,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["islengthattributeinterface(collect",{"_index":689,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{}}}],["islengthmethodinterface(collect",{"_index":692,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{}}}],["ismet",{"_index":1410,"title":{},"body":{"changelog.html":{}}}],["ismeter(inst",{"_index":909,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["ismetricset",{"_index":1416,"title":{},"body":{"changelog.html":{}}}],["ismetricset(inst",{"_index":916,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["ismonotonecounter(inst",{"_index":905,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["isnan(counter.getcount",{"_index":745,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["isnan(gauge.getvalu",{"_index":755,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["isnan(histogram.getcount",{"_index":772,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["isnan(meter.getcount",{"_index":802,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["isnan(quantil",{"_index":1164,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["isnan(timer.getcount",{"_index":814,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["isnan(valu",{"_index":651,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["ispuremonotonecount",{"_index":1347,"title":{},"body":{"changelog.html":{}}}],["ispuremonotonecounter(inst",{"_index":906,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["issizeattributeinterface(collect",{"_index":693,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{}}}],["issizemethodinterface(collect",{"_index":695,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{}}}],["istim",{"_index":1411,"title":{},"body":{"changelog.html":{}}}],["istimer(inst",{"_index":910,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["it'",{"_index":487,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/Int64Wrapper.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["itagg",{"_index":1431,"title":{},"body":{"changelog.html":{}}}],["javascript",{"_index":663,"title":{},"body":{"classes/Int64Wrapper.html":{}}}],["jenkin",{"_index":1452,"title":{},"body":{"changelog.html":{}}}],["jenkinsfil",{"_index":1354,"title":{},"body":{"changelog.html":{}}}],["jsdoc",{"_index":1361,"title":{},"body":{"changelog.html":{}}}],["keep",{"_index":534,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricRegistryListener.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Tags.html":{},"changelog.html":{}}}],["key",{"_index":128,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/IMetricReporter.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metric.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["keyword",{"_index":1363,"title":{},"body":{"changelog.html":{}}}],["kind",{"_index":1704,"title":{},"body":{"license.html":{}}}],["last",{"_index":314,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/IMetricReporter.html":{},"interfaces/Metered.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/MovingAverage.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"classes/StopWatch.html":{},"interfaces/Tags.html":{},"changelog.html":{}}}],["lastmodifiedfunct",{"_index":614,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["lastmodifiedfunction(metr",{"_index":620,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["lastreport",{"_index":638,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricEntry.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["lastvalu",{"_index":635,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricEntry.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["latenc",{"_index":1585,"title":{},"body":{"index.html":{}}}],["latest",{"_index":877,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["length",{"_index":682,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"interfaces/Snapshot.html":{},"changelog.html":{}}}],["lengthattributeinterfac",{"_index":678,"title":{"interfaces/LengthAttributeInterface.html":{}},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"coverage.html":{}}}],["lengthmethodinterfac",{"_index":684,"title":{"interfaces/LengthMethodInterface.html":{}},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"coverage.html":{}}}],["level",{"_index":728,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/Logger.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["liabil",{"_index":1717,"title":{},"body":{"license.html":{}}}],["liabl",{"_index":1714,"title":{},"body":{"license.html":{}}}],["lib",{"_index":1826,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lib/.../clock.t",{"_index":1506,"title":{},"body":{"miscellaneous/functions.html":{}}}],["lib/.../hdr",{"_index":1825,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lib/.../int64.t",{"_index":1824,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lib/.../metr",{"_index":1727,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["lib/.../schedul",{"_index":1729,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["lib/.../siz",{"_index":1730,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["lib/.../tim",{"_index":1823,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lib/metrics/clock.t",{"_index":198,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["lib/metrics/clock.ts:49",{"_index":202,"title":{},"body":{"classes/Clock.html":{}}}],["lib/metrics/clock.ts:68",{"_index":1195,"title":{},"body":{"classes/StdClock.html":{}}}],["lib/metrics/counter.t",{"_index":1463,"title":{},"body":{"coverage.html":{}}}],["lib/metrics/counting.t",{"_index":137,"title":{},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"coverage.html":{}}}],["lib/metrics/counting.ts:120",{"_index":145,"title":{},"body":{"interfaces/BucketCounting.html":{}}}],["lib/metrics/counting.ts:130",{"_index":149,"title":{},"body":{"interfaces/BucketCounting.html":{}}}],["lib/metrics/counting.ts:20",{"_index":230,"title":{},"body":{"interfaces/Counting.html":{}}}],["lib/metrics/counting.ts:43",{"_index":196,"title":{},"body":{"classes/Buckets.html":{}}}],["lib/metrics/counting.ts:67",{"_index":194,"title":{},"body":{"classes/Buckets.html":{}}}],["lib/metrics/counting.ts:88",{"_index":179,"title":{},"body":{"classes/Buckets.html":{}}}],["lib/metrics/counting.ts:97",{"_index":191,"title":{},"body":{"classes/Buckets.html":{}}}],["lib/metrics/event.t",{"_index":1470,"title":{},"body":{"coverage.html":{}}}],["lib/metrics/gauge.t",{"_index":338,"title":{},"body":{"interfaces/Gauge.html":{},"coverage.html":{}}}],["lib/metrics/gauge.ts:21",{"_index":341,"title":{},"body":{"interfaces/Gauge.html":{}}}],["lib/metrics/groupable.t",{"_index":350,"title":{},"body":{"interfaces/Groupable.html":{},"coverage.html":{}}}],["lib/metrics/groupable.ts:18",{"_index":351,"title":{},"body":{"interfaces/Groupable.html":{}}}],["lib/metrics/groupable.ts:27",{"_index":352,"title":{},"body":{"interfaces/Groupable.html":{}}}],["lib/metrics/hdr",{"_index":354,"title":{},"body":{"classes/HdrSnapshot.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["lib/metrics/histogram.t",{"_index":1477,"title":{},"body":{"coverage.html":{}}}],["lib/metrics/int64.t",{"_index":653,"title":{},"body":{"classes/Int64Wrapper.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["lib/metrics/int64.ts:21",{"_index":658,"title":{},"body":{"classes/Int64Wrapper.html":{}}}],["lib/metrics/int64.ts:40",{"_index":660,"title":{},"body":{"classes/Int64Wrapper.html":{}}}],["lib/metrics/int64.ts:51",{"_index":661,"title":{},"body":{"classes/Int64Wrapper.html":{}}}],["lib/metrics/int64.ts:61",{"_index":667,"title":{},"body":{"classes/Int64Wrapper.html":{}}}],["lib/metrics/metadata",{"_index":835,"title":{},"body":{"interfaces/MetadataContainer.html":{},"coverage.html":{}}}],["lib/metrics/meter.t",{"_index":1482,"title":{},"body":{"coverage.html":{}}}],["lib/metrics/metered.t",{"_index":844,"title":{},"body":{"interfaces/Metered.html":{},"coverage.html":{}}}],["lib/metrics/metered.ts:20",{"_index":853,"title":{},"body":{"interfaces/Metered.html":{}}}],["lib/metrics/metered.ts:28",{"_index":850,"title":{},"body":{"interfaces/Metered.html":{}}}],["lib/metrics/metered.ts:36",{"_index":852,"title":{},"body":{"interfaces/Metered.html":{}}}],["lib/metrics/metered.ts:44",{"_index":851,"title":{},"body":{"interfaces/Metered.html":{}}}],["lib/metrics/metered.ts:52",{"_index":855,"title":{},"body":{"interfaces/Metered.html":{}}}],["lib/metrics/metr",{"_index":879,"title":{},"body":{"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricSet.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["lib/metrics/metric.t",{"_index":5,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"coverage.html":{}}}],["lib/metrics/metric.ts:105",{"_index":67,"title":{},"body":{"classes/BaseMetric.html":{}}}],["lib/metrics/metric.ts:113",{"_index":59,"title":{},"body":{"classes/BaseMetric.html":{}}}],["lib/metrics/metric.ts:121",{"_index":65,"title":{},"body":{"classes/BaseMetric.html":{}}}],["lib/metrics/metric.ts:123",{"_index":79,"title":{},"body":{"classes/BaseMetric.html":{}}}],["lib/metrics/metric.ts:127",{"_index":77,"title":{},"body":{"classes/BaseMetric.html":{}}}],["lib/metrics/metric.ts:131",{"_index":85,"title":{},"body":{"classes/BaseMetric.html":{}}}],["lib/metrics/metric.ts:137",{"_index":95,"title":{},"body":{"classes/BaseMetric.html":{}}}],["lib/metrics/metric.ts:142",{"_index":80,"title":{},"body":{"classes/BaseMetric.html":{}}}],["lib/metrics/metric.ts:146",{"_index":97,"title":{},"body":{"classes/BaseMetric.html":{}}}],["lib/metrics/metric.ts:151",{"_index":73,"title":{},"body":{"classes/BaseMetric.html":{}}}],["lib/metrics/metric.ts:155",{"_index":91,"title":{},"body":{"classes/BaseMetric.html":{}}}],["lib/metrics/metric.ts:160",{"_index":75,"title":{},"body":{"classes/BaseMetric.html":{}}}],["lib/metrics/metric.ts:164",{"_index":93,"title":{},"body":{"classes/BaseMetric.html":{}}}],["lib/metrics/metric.ts:169",{"_index":83,"title":{},"body":{"classes/BaseMetric.html":{}}}],["lib/metrics/metric.ts:173",{"_index":82,"title":{},"body":{"classes/BaseMetric.html":{}}}],["lib/metrics/metric.ts:177",{"_index":99,"title":{},"body":{"classes/BaseMetric.html":{}}}],["lib/metrics/metric.ts:182",{"_index":101,"title":{},"body":{"classes/BaseMetric.html":{}}}],["lib/metrics/metric.ts:187",{"_index":70,"title":{},"body":{"classes/BaseMetric.html":{}}}],["lib/metrics/metric.ts:192",{"_index":87,"title":{},"body":{"classes/BaseMetric.html":{}}}],["lib/metrics/metric.ts:197",{"_index":89,"title":{},"body":{"classes/BaseMetric.html":{}}}],["lib/metrics/metric.ts:202",{"_index":102,"title":{},"body":{"classes/BaseMetric.html":{}}}],["lib/metrics/metric.ts:23",{"_index":857,"title":{},"body":{"interfaces/Metric.html":{}}}],["lib/metrics/metric.ts:32",{"_index":859,"title":{},"body":{"interfaces/Metric.html":{}}}],["lib/metrics/metric.ts:40",{"_index":856,"title":{},"body":{"interfaces/Metric.html":{}}}],["lib/metrics/metric.ts:49",{"_index":858,"title":{},"body":{"interfaces/Metric.html":{}}}],["lib/metrics/metric.ts:73",{"_index":52,"title":{},"body":{"classes/BaseMetric.html":{}}}],["lib/metrics/metric.ts:81",{"_index":62,"title":{},"body":{"classes/BaseMetric.html":{}}}],["lib/metrics/metric.ts:89",{"_index":68,"title":{},"body":{"classes/BaseMetric.html":{}}}],["lib/metrics/metric.ts:97",{"_index":60,"title":{},"body":{"classes/BaseMetric.html":{}}}],["lib/metrics/mov",{"_index":264,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{},"coverage.html":{}}}],["lib/metrics/reporter/logg",{"_index":706,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"coverage.html":{}}}],["lib/metrics/reporter/logger.t",{"_index":822,"title":{},"body":{"interfaces/Logger.html":{},"coverage.html":{}}}],["lib/metrics/reporter/metr",{"_index":459,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricEntry.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["lib/metrics/reporter/schedul",{"_index":1098,"title":{},"body":{"interfaces/ScheduledMetricReporterOptions.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["lib/metrics/reservoir.t",{"_index":232,"title":{},"body":{"classes/DefaultReservoir.html":{},"interfaces/Reservoir.html":{},"classes/SlidingWindowReservoir.html":{},"coverage.html":{}}}],["lib/metrics/reservoir.ts:113",{"_index":251,"title":{},"body":{"classes/DefaultReservoir.html":{}}}],["lib/metrics/reservoir.ts:136",{"_index":1178,"title":{},"body":{"classes/SlidingWindowReservoir.html":{}}}],["lib/metrics/reservoir.ts:144",{"_index":1177,"title":{},"body":{"classes/SlidingWindowReservoir.html":{}}}],["lib/metrics/reservoir.ts:152",{"_index":1176,"title":{},"body":{"classes/SlidingWindowReservoir.html":{}}}],["lib/metrics/reservoir.ts:170",{"_index":1179,"title":{},"body":{"classes/SlidingWindowReservoir.html":{}}}],["lib/metrics/reservoir.ts:183",{"_index":1181,"title":{},"body":{"classes/SlidingWindowReservoir.html":{}}}],["lib/metrics/reservoir.ts:19",{"_index":1092,"title":{},"body":{"interfaces/Reservoir.html":{}}}],["lib/metrics/reservoir.ts:198",{"_index":1180,"title":{},"body":{"classes/SlidingWindowReservoir.html":{}}}],["lib/metrics/reservoir.ts:28",{"_index":1094,"title":{},"body":{"interfaces/Reservoir.html":{}}}],["lib/metrics/reservoir.ts:36",{"_index":1093,"title":{},"body":{"interfaces/Reservoir.html":{}}}],["lib/metrics/reservoir.ts:58",{"_index":246,"title":{},"body":{"classes/DefaultReservoir.html":{}}}],["lib/metrics/reservoir.ts:66",{"_index":244,"title":{},"body":{"classes/DefaultReservoir.html":{}}}],["lib/metrics/reservoir.ts:84",{"_index":247,"title":{},"body":{"classes/DefaultReservoir.html":{}}}],["lib/metrics/reservoir.ts:97",{"_index":253,"title":{},"body":{"classes/DefaultReservoir.html":{}}}],["lib/metrics/s",{"_index":679,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["lib/metrics/sampling.t",{"_index":1095,"title":{},"body":{"interfaces/Sampling.html":{},"coverage.html":{}}}],["lib/metrics/sampling.ts:19",{"_index":1097,"title":{},"body":{"interfaces/Sampling.html":{}}}],["lib/metrics/snapshot.t",{"_index":1110,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"coverage.html":{}}}],["lib/metrics/snapshot.ts:105",{"_index":1191,"title":{},"body":{"interfaces/Snapshot.html":{}}}],["lib/metrics/snapshot.ts:114",{"_index":1192,"title":{},"body":{"interfaces/Snapshot.html":{}}}],["lib/metrics/snapshot.ts:134",{"_index":1112,"title":{},"body":{"classes/SimpleSnapshot.html":{}}}],["lib/metrics/snapshot.ts:153",{"_index":1114,"title":{},"body":{"classes/SimpleSnapshot.html":{}}}],["lib/metrics/snapshot.ts:163",{"_index":1116,"title":{},"body":{"classes/SimpleSnapshot.html":{}}}],["lib/metrics/snapshot.ts:17",{"_index":1182,"title":{},"body":{"interfaces/Snapshot.html":{}}}],["lib/metrics/snapshot.ts:173",{"_index":1118,"title":{},"body":{"classes/SimpleSnapshot.html":{}}}],["lib/metrics/snapshot.ts:183",{"_index":1120,"title":{},"body":{"classes/SimpleSnapshot.html":{}}}],["lib/metrics/snapshot.ts:193",{"_index":1122,"title":{},"body":{"classes/SimpleSnapshot.html":{}}}],["lib/metrics/snapshot.ts:203",{"_index":1126,"title":{},"body":{"classes/SimpleSnapshot.html":{}}}],["lib/metrics/snapshot.ts:213",{"_index":1124,"title":{},"body":{"classes/SimpleSnapshot.html":{}}}],["lib/metrics/snapshot.ts:223",{"_index":1128,"title":{},"body":{"classes/SimpleSnapshot.html":{}}}],["lib/metrics/snapshot.ts:233",{"_index":1147,"title":{},"body":{"classes/SimpleSnapshot.html":{}}}],["lib/metrics/snapshot.ts:243",{"_index":1148,"title":{},"body":{"classes/SimpleSnapshot.html":{}}}],["lib/metrics/snapshot.ts:25",{"_index":1183,"title":{},"body":{"interfaces/Snapshot.html":{}}}],["lib/metrics/snapshot.ts:253",{"_index":1125,"title":{},"body":{"classes/SimpleSnapshot.html":{}}}],["lib/metrics/snapshot.ts:269",{"_index":1129,"title":{},"body":{"classes/SimpleSnapshot.html":{}}}],["lib/metrics/snapshot.ts:303",{"_index":1130,"title":{},"body":{"classes/SimpleSnapshot.html":{}}}],["lib/metrics/snapshot.ts:33",{"_index":1184,"title":{},"body":{"interfaces/Snapshot.html":{}}}],["lib/metrics/snapshot.ts:41",{"_index":1185,"title":{},"body":{"interfaces/Snapshot.html":{}}}],["lib/metrics/snapshot.ts:49",{"_index":1186,"title":{},"body":{"interfaces/Snapshot.html":{}}}],["lib/metrics/snapshot.ts:57",{"_index":1189,"title":{},"body":{"interfaces/Snapshot.html":{}}}],["lib/metrics/snapshot.ts:65",{"_index":1187,"title":{},"body":{"interfaces/Snapshot.html":{}}}],["lib/metrics/snapshot.ts:73",{"_index":1190,"title":{},"body":{"interfaces/Snapshot.html":{}}}],["lib/metrics/snapshot.ts:81",{"_index":1193,"title":{},"body":{"interfaces/Snapshot.html":{}}}],["lib/metrics/snapshot.ts:89",{"_index":1194,"title":{},"body":{"interfaces/Snapshot.html":{}}}],["lib/metrics/snapshot.ts:97",{"_index":1188,"title":{},"body":{"interfaces/Snapshot.html":{}}}],["lib/metrics/summarizing.t",{"_index":1245,"title":{},"body":{"interfaces/Summarizing.html":{},"coverage.html":{}}}],["lib/metrics/summarizing.ts:18",{"_index":1246,"title":{},"body":{"interfaces/Summarizing.html":{}}}],["lib/metrics/taggable.t",{"_index":1247,"title":{},"body":{"interfaces/Taggable.html":{},"coverage.html":{}}}],["lib/metrics/taggable.ts:17",{"_index":1252,"title":{},"body":{"interfaces/Taggable.html":{}}}],["lib/metrics/taggable.ts:26",{"_index":1250,"title":{},"body":{"interfaces/Taggable.html":{}}}],["lib/metrics/taggable.ts:36",{"_index":1255,"title":{},"body":{"interfaces/Taggable.html":{}}}],["lib/metrics/taggable.ts:45",{"_index":1256,"title":{},"body":{"interfaces/Taggable.html":{}}}],["lib/metrics/taggable.ts:54",{"_index":1248,"title":{},"body":{"interfaces/Taggable.html":{}}}],["lib/metrics/taggable.ts:63",{"_index":1253,"title":{},"body":{"interfaces/Taggable.html":{}}}],["lib/metrics/taggable.ts:72",{"_index":1254,"title":{},"body":{"interfaces/Taggable.html":{}}}],["lib/metrics/tim",{"_index":1258,"title":{},"body":{"classes/TimeUnit.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["lib/metrics/timer.t",{"_index":1199,"title":{},"body":{"classes/StopWatch.html":{},"coverage.html":{}}}],["lib/metrics/timer.ts:31",{"_index":1204,"title":{},"body":{"classes/StopWatch.html":{}}}],["lib/metrics/timer.ts:39",{"_index":1205,"title":{},"body":{"classes/StopWatch.html":{}}}],["lib/metrics/timer.ts:47",{"_index":1203,"title":{},"body":{"classes/StopWatch.html":{}}}],["lib/metrics/timer.ts:67",{"_index":1206,"title":{},"body":{"classes/StopWatch.html":{}}}],["lib/metrics/timer.ts:79",{"_index":1208,"title":{},"body":{"classes/StopWatch.html":{}}}],["librari",{"_index":823,"title":{},"body":{"interfaces/Logger.html":{},"index.html":{}}}],["licens",{"_index":1447,"title":{"license.html":{}},"body":{"changelog.html":{},"license.html":{}}}],["limit",{"_index":1687,"title":{},"body":{"license.html":{}}}],["line",{"_index":708,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"changelog.html":{},"unit-test.html":{}}}],["line:pref",{"_index":1543,"title":{},"body":{"index.html":{}}}],["linear",{"_index":165,"title":{},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{}}}],["linear(start",{"_index":170,"title":{},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{}}}],["link",{"_index":155,"title":{},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MetricEntry.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSet.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"interfaces/Snapshot.html":{},"classes/StopWatch.html":{},"interfaces/Tags.html":{}}}],["lint",{"_index":1446,"title":{},"body":{"changelog.html":{}}}],["list",{"_index":959,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricSet.html":{},"index.html":{}}}],["listen",{"_index":888,"title":{},"body":{"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"changelog.html":{},"index.html":{}}}],["listener.metricadded(nam",{"_index":1069,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["listener.metricremoved(nam",{"_index":1071,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["listener.t",{"_index":1072,"title":{},"body":{"interfaces/MetricRegistryListener.html":{},"coverage.html":{},"unit-test.html":{}}}],["listener.ts:19",{"_index":1077,"title":{},"body":{"interfaces/MetricRegistryListener.html":{}}}],["listener.ts:28",{"_index":1079,"title":{},"body":{"interfaces/MetricRegistryListener.html":{}}}],["local",{"_index":1648,"title":{},"body":{"index.html":{}}}],["log",{"_index":707,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/Logger.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"changelog.html":{},"index.html":{}}}],["logger",{"_index":710,"title":{"interfaces/Logger.html":{}},"body":{"interfaces/LogLine.html":{},"interfaces/Logger.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"changelog.html":{},"coverage.html":{}}}],["loggerreport",{"_index":717,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"coverage.html":{},"index.html":{}}}],["loggerreporteropt",{"_index":718,"title":{"interfaces/LoggerReporterOptions.html":{}},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"coverage.html":{}}}],["loggerreportingcontext",{"_index":714,"title":{"interfaces/LoggerReportingContext.html":{}},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"coverage.html":{}}}],["logic",{"_index":205,"title":{},"body":{"classes/Clock.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{}}}],["loglin",{"_index":705,"title":{"interfaces/LogLine.html":{}},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"coverage.html":{}}}],["logline.metadata",{"_index":732,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["logline.result.metadata",{"_index":739,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["logmetadata",{"_index":716,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["lower",{"_index":1168,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["lowest",{"_index":431,"title":{},"body":{"classes/HdrSnapshot.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["lowest=1",{"_index":430,"title":{},"body":{"classes/HdrSnapshot.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["m",{"_index":515,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["m.getnam",{"_index":1053,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["m.metricref",{"_index":995,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["m.setgroup(metric.getnam",{"_index":1043,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["m1",{"_index":1609,"title":{},"body":{"index.html":{}}}],["m15",{"_index":1605,"title":{},"body":{"index.html":{}}}],["m15_rate",{"_index":798,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["m1_rate",{"_index":800,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["m5",{"_index":1607,"title":{},"body":{"index.html":{}}}],["m5_rate",{"_index":799,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["main",{"_index":1439,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["maintain",{"_index":437,"title":{},"body":{"classes/HdrSnapshot.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["mamang",{"_index":981,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["manag",{"_index":898,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["mani",{"_index":1514,"title":{},"body":{"index.html":{}}}],["manual",{"_index":927,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/StopWatch.html":{}}}],["map",{"_index":63,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"interfaces/Counting.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/Logger.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metered.html":{},"interfaces/Metric.html":{},"interfaces/MetricEntry.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSet.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/MovingAverage.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"changelog.html":{},"dependencies.html":{},"index.html":{}}}],["map((m",{"_index":994,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["map((metr",{"_index":622,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["map((registr",{"_index":960,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["map.set(registration.nam",{"_index":945,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["mark",{"_index":160,"title":{},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{}}}],["match",{"_index":135,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"interfaces/Counting.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/Logger.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metered.html":{},"interfaces/Metric.html":{},"interfaces/MetricEntry.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSet.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/MovingAverage.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"unit-test.html":{},"miscellaneous/variables.html":{}}}],["math.exp",{"_index":291,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["math.floor(po",{"_index":1171,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["math.round(po",{"_index":1166,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["math.sqrt(sum",{"_index":1163,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["max",{"_index":249,"title":{},"body":{"classes/DefaultReservoir.html":{},"classes/HdrSnapshot.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/Reservoir.html":{},"classes/SlidingWindowReservoir.html":{}}}],["max=100",{"_index":433,"title":{},"body":{"classes/HdrSnapshot.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["maximum",{"_index":235,"title":{},"body":{"classes/DefaultReservoir.html":{},"classes/HdrSnapshot.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/Reservoir.html":{},"classes/SimpleSnapshot.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{}}}],["maxsiz",{"_index":239,"title":{},"body":{"classes/DefaultReservoir.html":{},"interfaces/Reservoir.html":{},"classes/SlidingWindowReservoir.html":{}}}],["mean",{"_index":141,"title":{},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"classes/HdrSnapshot.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Metered.html":{},"interfaces/MetricEntry.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"classes/StopWatch.html":{},"index.html":{}}}],["mean_rat",{"_index":801,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["meant",{"_index":1510,"title":{},"body":{"index.html":{}}}],["measur",{"_index":735,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Metered.html":{},"classes/StopWatch.html":{},"index.html":{}}}],["measurement_typ",{"_index":736,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["memberof",{"_index":114,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"interfaces/Counting.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metered.html":{},"interfaces/Metric.html":{},"interfaces/MetricEntry.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSet.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/MovingAverage.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{}}}],["memori",{"_index":1529,"title":{},"body":{"index.html":{}}}],["merchant",{"_index":1707,"title":{},"body":{"license.html":{}}}],["merg",{"_index":1690,"title":{},"body":{"license.html":{}}}],["messag",{"_index":709,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/Logger.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["metadata",{"_index":29,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Groupable.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metric.html":{},"changelog.html":{}}}],["metadatacontain",{"_index":106,"title":{"interfaces/MetadataContainer.html":{}},"body":{"classes/BaseMetric.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metric.html":{},"changelog.html":{},"coverage.html":{}}}],["meter",{"_index":501,"title":{"interfaces/Metered.html":{}},"body":{"interfaces/IMetricReporter.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Metered.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"classes/StopWatch.html":{},"interfaces/Tags.html":{},"changelog.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["meter#getcount",{"_index":797,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["meter(clock",{"_index":1020,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/StopWatch.html":{}}}],["meter.getcount",{"_index":599,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["meter.getgroup",{"_index":804,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["meter.getnam",{"_index":803,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["meterctx",{"_index":575,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["meterctx.metr",{"_index":595,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["meterresult",{"_index":597,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["method",{"_index":30,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"interfaces/Counting.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metered.html":{},"interfaces/Metric.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricSet.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"classes/TimeUnit.html":{},"changelog.html":{}}}],["metric",{"_index":9,"title":{"interfaces/Metric.html":{}},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Metered.html":{},"interfaces/Metric.html":{},"interfaces/MetricEntry.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSet.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Sampling.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Tags.html":{},"changelog.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["metric'",{"_index":1249,"title":{},"body":{"interfaces/Taggable.html":{}}}],["metric.getgroup",{"_index":1063,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metric.getgroup()}.${nam",{"_index":1064,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metric.getmetriclist().foreach((m",{"_index":1042,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metric.getmetrics().foreach((m",{"_index":1051,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metric.metricref",{"_index":966,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metric.nam",{"_index":1061,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metric.setdescription(descript",{"_index":1036,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metric.setgroup(group",{"_index":1035,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metric.setname(this.generatename(nam",{"_index":1049,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metricad",{"_index":1074,"title":{},"body":{"interfaces/MetricRegistryListener.html":{}}}],["metricadded(nam",{"_index":1076,"title":{},"body":{"interfaces/MetricRegistryListener.html":{},"index.html":{}}}],["metricentri",{"_index":504,"title":{"interfaces/MetricEntry.html":{}},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricEntry.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{},"changelog.html":{},"coverage.html":{}}}],["metricentry.lastreport",{"_index":643,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["metricentry.lastvalu",{"_index":641,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["metricid",{"_index":617,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["metricnam",{"_index":893,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metricref",{"_index":883,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metricref.getnam",{"_index":901,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metricregistr",{"_index":878,"title":{"classes/MetricRegistration.html":{}},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"changelog.html":{},"coverage.html":{}}}],["metricregistration(metr",{"_index":1039,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metricregistri",{"_index":467,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{},"coverage.html":{},"index.html":{}}}],["metricregistry.defaultnamefactori",{"_index":922,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metricregistry.iscounter(inst",{"_index":907,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metricregistry.isgauge(metr",{"_index":1037,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metricregistry.ismetricset(metr",{"_index":1041,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metricregistrylisten",{"_index":887,"title":{"interfaces/MetricRegistryListener.html":{}},"body":{"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"coverage.html":{},"index.html":{}}}],["metricregistrylistenerregistr",{"_index":897,"title":{"classes/MetricRegistryListenerRegistration.html":{}},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"coverage.html":{},"index.html":{}}}],["metricregistrylistenerregistration(listen",{"_index":926,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metricregistry}'",{"_index":552,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["metricremov",{"_index":1075,"title":{},"body":{"interfaces/MetricRegistryListener.html":{}}}],["metricremoved(nam",{"_index":1078,"title":{},"body":{"interfaces/MetricRegistryListener.html":{},"index.html":{}}}],["metricreport",{"_index":519,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Tags.html":{},"coverage.html":{},"index.html":{}}}],["metricreporteropt",{"_index":520,"title":{"interfaces/MetricReporterOptions.html":{}},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Tags.html":{},"coverage.html":{}}}],["metrics.foreach((metr",{"_index":1001,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metrics.length",{"_index":993,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metrics/issues/3",{"_index":1370,"title":{},"body":{"changelog.html":{}}}],["metrics/lib/metrics/clock.t",{"_index":1733,"title":{},"body":{"unit-test.html":{}}}],["metrics/lib/metrics/counter.t",{"_index":1735,"title":{},"body":{"unit-test.html":{}}}],["metrics/lib/metrics/counting.t",{"_index":1737,"title":{},"body":{"unit-test.html":{}}}],["metrics/lib/metrics/event.t",{"_index":1744,"title":{},"body":{"unit-test.html":{}}}],["metrics/lib/metrics/gauge.t",{"_index":1748,"title":{},"body":{"unit-test.html":{}}}],["metrics/lib/metrics/groupable.t",{"_index":1751,"title":{},"body":{"unit-test.html":{}}}],["metrics/lib/metrics/hdr",{"_index":1752,"title":{},"body":{"unit-test.html":{}}}],["metrics/lib/metrics/histogram.t",{"_index":1759,"title":{},"body":{"unit-test.html":{}}}],["metrics/lib/metrics/int64.t",{"_index":1761,"title":{},"body":{"unit-test.html":{}}}],["metrics/lib/metrics/metadata",{"_index":1765,"title":{},"body":{"unit-test.html":{}}}],["metrics/lib/metrics/meter.t",{"_index":1766,"title":{},"body":{"unit-test.html":{}}}],["metrics/lib/metrics/metered.t",{"_index":1768,"title":{},"body":{"unit-test.html":{}}}],["metrics/lib/metrics/metr",{"_index":1769,"title":{},"body":{"unit-test.html":{}}}],["metrics/lib/metrics/metric.t",{"_index":1776,"title":{},"body":{"unit-test.html":{}}}],["metrics/lib/metrics/mov",{"_index":1784,"title":{},"body":{"unit-test.html":{}}}],["metrics/lib/metrics/reporter/logg",{"_index":1808,"title":{},"body":{"unit-test.html":{}}}],["metrics/lib/metrics/reporter/logger.t",{"_index":1812,"title":{},"body":{"unit-test.html":{}}}],["metrics/lib/metrics/reporter/metr",{"_index":1813,"title":{},"body":{"unit-test.html":{}}}],["metrics/lib/metrics/reporter/schedul",{"_index":1819,"title":{},"body":{"unit-test.html":{}}}],["metrics/lib/metrics/reservoir.t",{"_index":1785,"title":{},"body":{"unit-test.html":{}}}],["metrics/lib/metrics/s",{"_index":1788,"title":{},"body":{"unit-test.html":{}}}],["metrics/lib/metrics/sampling.t",{"_index":1787,"title":{},"body":{"unit-test.html":{}}}],["metrics/lib/metrics/snapshot.t",{"_index":1795,"title":{},"body":{"unit-test.html":{}}}],["metrics/lib/metrics/summarizing.t",{"_index":1801,"title":{},"body":{"unit-test.html":{}}}],["metrics/lib/metrics/taggable.t",{"_index":1802,"title":{},"body":{"unit-test.html":{}}}],["metrics/lib/metrics/tim",{"_index":1803,"title":{},"body":{"unit-test.html":{}}}],["metrics/lib/metrics/timer.t",{"_index":1805,"title":{},"body":{"unit-test.html":{}}}],["metrics/pull/10",{"_index":1311,"title":{},"body":{"changelog.html":{}}}],["metrics/pull/11",{"_index":1303,"title":{},"body":{"changelog.html":{}}}],["metrics/pull/8",{"_index":1316,"title":{},"body":{"changelog.html":{}}}],["metrics[0",{"_index":999,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metricset",{"_index":889,"title":{"interfaces/MetricSet.html":{}},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricSet.html":{},"coverage.html":{}}}],["metricsetreportcontext",{"_index":511,"title":{"interfaces/MetricSetReportContext.html":{}},"body":{"interfaces/IMetricReporter.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{},"coverage.html":{}}}],["metricst",{"_index":537,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["metrictyp",{"_index":506,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{}}}],["microsecond",{"_index":1269,"title":{},"body":{"classes/TimeUnit.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["microsecond.convertto(1000",{"_index":1271,"title":{},"body":{"classes/TimeUnit.html":{}}}],["millisecond",{"_index":206,"title":{},"body":{"classes/Clock.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/IMetricReporter.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/MovingAverage.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"classes/StdClock.html":{},"interfaces/Tags.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["millisecond}",{"_index":1104,"title":{},"body":{"interfaces/ScheduledMetricReporterOptions.html":{}}}],["min",{"_index":391,"title":{},"body":{"classes/HdrSnapshot.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["minim",{"_index":634,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["minimum",{"_index":522,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricEntry.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"interfaces/Tags.html":{},"changelog.html":{}}}],["minreportingtimeout",{"_index":529,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["minreportingtimeout=1",{"_index":540,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["minut",{"_index":326,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/IMetricReporter.html":{},"interfaces/Metered.html":{},"interfaces/MetricEntry.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/MovingAverage.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"classes/StopWatch.html":{},"interfaces/Tags.html":{},"classes/TimeUnit.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["minute.convertto(this.options.minreportingtimeout",{"_index":642,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["miscellan",{"_index":1505,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1448,"title":{},"body":{"changelog.html":{},"index.html":{},"license.html":{}}}],["mnt/c/git/inspector",{"_index":1732,"title":{},"body":{"unit-test.html":{}}}],["mocha",{"_index":1383,"title":{},"body":{"changelog.html":{}}}],["modifi",{"_index":1689,"title":{},"body":{"license.html":{}}}],["modul",{"_index":404,"title":{"modules.html":{}},"body":{"classes/HdrSnapshot.html":{},"changelog.html":{},"modules.html":{},"miscellaneous/variables.html":{}}}],["monitor",{"_index":1507,"title":{},"body":{"index.html":{}}}],["monoton",{"_index":626,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{},"index.html":{}}}],["monotonecount",{"_index":156,"title":{},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/IMetricReporter.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{},"changelog.html":{},"coverage.html":{},"index.html":{}}}],["monotonecounter#getcount",{"_index":742,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["monotonecounter(nam",{"_index":1015,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["monotonecounterresult",{"_index":579,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["more",{"_index":318,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["move",{"_index":267,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["movingaverag",{"_index":270,"title":{"interfaces/MovingAverage.html":{}},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{},"coverage.html":{}}}],["multipl",{"_index":882,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"changelog.html":{}}}],["multipli",{"_index":306,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["mutat",{"_index":1352,"title":{},"body":{"changelog.html":{}}}],["myarray",{"_index":1573,"title":{},"body":{"index.html":{}}}],["myarray.push(1",{"_index":1581,"title":{},"body":{"index.html":{}}}],["myarray.push(2",{"_index":1582,"title":{},"body":{"index.html":{}}}],["myarray.push(3",{"_index":1583,"title":{},"body":{"index.html":{}}}],["n\\tcount",{"_index":776,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["n\\tm15_rate",{"_index":805,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["n\\tm1_rate",{"_index":809,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["n\\tm5_rate",{"_index":807,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["n\\tmax",{"_index":777,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["n\\tmean",{"_index":779,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["n\\tmean_rat",{"_index":811,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["n\\tmin",{"_index":781,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["n\\tp50",{"_index":783,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["n\\tp75",{"_index":785,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["n\\tp95",{"_index":787,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["n\\tp98",{"_index":789,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["n\\tp99",{"_index":791,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["n\\tp999",{"_index":793,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["n\\tstddev",{"_index":795,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["name",{"_index":16,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Buckets.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricSet.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StopWatch.html":{},"interfaces/Taggable.html":{},"classes/TimeUnit.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["namefactori",{"_index":891,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"miscellaneous/typealiases.html":{}}}],["names.foreach((nam",{"_index":131,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{}}}],["nan",{"_index":386,"title":{},"body":{"classes/HdrSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["nanosecond",{"_index":207,"title":{},"body":{"classes/Clock.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["nanosecond.convertto(1000",{"_index":1268,"title":{},"body":{"classes/TimeUnit.html":{}}}],["nanosecond.convertto(this.timeunitinnanosecond",{"_index":335,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["nanosecondsperunit",{"_index":1261,"title":{},"body":{"classes/TimeUnit.html":{}}}],["nativ",{"_index":372,"title":{},"body":{"classes/HdrSnapshot.html":{},"classes/Int64Wrapper.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["nativehistogram",{"_index":405,"title":{},"body":{"classes/HdrSnapshot.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["nativehistogram(lowest",{"_index":449,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["necessari",{"_index":1513,"title":{},"body":{"index.html":{}}}],["necessarili",{"_index":611,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricEntry.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["need",{"_index":12,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/IMetricReporter.html":{},"interfaces/Metric.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["new",{"_index":64,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"classes/DefaultReservoir.html":{},"interfaces/Groupable.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"classes/Int64Wrapper.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Reservoir.html":{},"classes/SlidingWindowReservoir.html":{},"classes/StopWatch.html":{},"interfaces/Tags.html":{},"classes/TimeUnit.html":{},"changelog.html":{},"coverage.html":{},"index.html":{},"unit-test.html":{},"miscellaneous/variables.html":{}}}],["newcounter(nam",{"_index":1011,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["newhdrhistogram",{"_index":1023,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"changelog.html":{}}}],["newhistogram",{"_index":1026,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["newmet",{"_index":1018,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["newmonotonecounter(nam",{"_index":1014,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["newstopwatch",{"_index":1243,"title":{},"body":{"classes/StopWatch.html":{}}}],["newtim",{"_index":1029,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["next",{"_index":489,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{},"index.html":{}}}],["node",{"_index":831,"title":{},"body":{"interfaces/Logger.html":{},"changelog.html":{},"dependencies.html":{},"index.html":{}}}],["node/regist",{"_index":1382,"title":{},"body":{"changelog.html":{}}}],["node10",{"_index":1657,"title":{},"body":{"index.html":{}}}],["node11releas",{"_index":1658,"title":{},"body":{"index.html":{}}}],["node6",{"_index":1653,"title":{},"body":{"index.html":{}}}],["node7",{"_index":1654,"title":{},"body":{"index.html":{}}}],["node8",{"_index":1655,"title":{},"body":{"index.html":{}}}],["node9",{"_index":1656,"title":{},"body":{"index.html":{}}}],["nodej",{"_index":1306,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["nodejs.tim",{"_index":1101,"title":{},"body":{"interfaces/ScheduledMetricReporterOptions.html":{}}}],["noninfring",{"_index":1711,"title":{},"body":{"license.html":{}}}],["normal",{"_index":873,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["notabl",{"_index":1284,"title":{},"body":{"changelog.html":{}}}],["noth",{"_index":495,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["notic",{"_index":1699,"title":{},"body":{"license.html":{}}}],["now",{"_index":1353,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["npm",{"_index":1374,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["null",{"_index":406,"title":{},"body":{"classes/HdrSnapshot.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/Taggable.html":{},"miscellaneous/variables.html":{}}}],["num",{"_index":655,"title":{},"body":{"classes/Int64Wrapper.html":{}}}],["number",{"_index":46,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"interfaces/Counting.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Metered.html":{},"interfaces/Metric.html":{},"interfaces/MetricEntry.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/MovingAverage.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Reservoir.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Tags.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"index.html":{}}}],["nyc",{"_index":1454,"title":{},"body":{"changelog.html":{}}}],["o",{"_index":533,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Tags.html":{}}}],["object",{"_index":147,"title":{},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"interfaces/Counting.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MetadataContainer.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{},"changelog.html":{},"index.html":{}}}],["object.assign",{"_index":734,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["obtain",{"_index":1683,"title":{},"body":{"license.html":{}}}],["old",{"_index":237,"title":{},"body":{"classes/DefaultReservoir.html":{},"interfaces/Reservoir.html":{},"classes/SlidingWindowReservoir.html":{}}}],["older",{"_index":212,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{},"miscellaneous/functions.html":{}}}],["on",{"_index":161,"title":{},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"interfaces/Counting.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["one.millisecond",{"_index":218,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{}}}],["one.nanosecond",{"_index":217,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{}}}],["onevalu",{"_index":216,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{}}}],["option",{"_index":72,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Buckets.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"classes/Int64Wrapper.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/MovingAverage.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Reservoir.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"classes/SimpleSnapshot.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StopWatch.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"classes/TimeUnit.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["order",{"_index":1173,"title":{},"body":{"classes/SlidingWindowReservoir.html":{}}}],["origin/gh",{"_index":1673,"title":{},"body":{"index.html":{}}}],["otherwis",{"_index":1722,"title":{},"body":{"license.html":{}}}],["out",{"_index":610,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{},"license.html":{}}}],["over",{"_index":1528,"title":{},"body":{"index.html":{}}}],["overal",{"_index":454,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["overallctx",{"_index":514,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["overallreportcontext",{"_index":510,"title":{"interfaces/OverallReportContext.html":{}},"body":{"interfaces/IMetricReporter.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{},"coverage.html":{}}}],["overview",{"_index":1724,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p50",{"_index":759,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["p75",{"_index":761,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["p95",{"_index":763,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["p98",{"_index":765,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["p99",{"_index":767,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["p999",{"_index":769,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["packag",{"_index":1375,"title":{"dependencies.html":{}},"body":{"changelog.html":{},"index.html":{}}}],["package.json",{"_index":1351,"title":{},"body":{"changelog.html":{}}}],["page",{"_index":1670,"title":{},"body":{"index.html":{}}}],["param",{"_index":115,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"interfaces/Counting.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/MovingAverage.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Reservoir.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{}}}],["paramet",{"_index":71,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Groupable.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"classes/Int64Wrapper.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"classes/SimpleSnapshot.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Taggable.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"changelog.html":{},"miscellaneous/functions.html":{}}}],["particular",{"_index":1709,"title":{},"body":{"license.html":{}}}],["pass",{"_index":304,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/Logger.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MovingAverage.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/StopWatch.html":{},"index.html":{}}}],["path",{"_index":1440,"title":{},"body":{"changelog.html":{}}}],["per",{"_index":324,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{},"classes/StopWatch.html":{},"index.html":{}}}],["percentil",{"_index":376,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["permiss",{"_index":1677,"title":{},"body":{"license.html":{}}}],["permit",{"_index":1694,"title":{},"body":{"license.html":{}}}],["person",{"_index":1682,"title":{},"body":{"license.html":{}}}],["pipelin",{"_index":1453,"title":{},"body":{"changelog.html":{}}}],["playground",{"_index":1307,"title":{},"body":{"changelog.html":{}}}],["pleas",{"_index":446,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["po",{"_index":1165,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["point",{"_index":203,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["pool",{"_index":1233,"title":{},"body":{"classes/StopWatch.html":{}}}],["portion",{"_index":1702,"title":{},"body":{"license.html":{}}}],["posit",{"_index":258,"title":{},"body":{"classes/DefaultReservoir.html":{},"interfaces/Reservoir.html":{},"classes/SimpleSnapshot.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{}}}],["possibl",{"_index":432,"title":{},"body":{"classes/HdrSnapshot.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["precis",{"_index":171,"title":{},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"index.html":{}}}],["precision=10000",{"_index":169,"title":{},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{}}}],["previous",{"_index":477,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["print",{"_index":727,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"index.html":{}}}],["privat",{"_index":22,"title":{},"body":{"classes/BaseMetric.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/MovingAverage.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Reservoir.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StopWatch.html":{},"interfaces/Tags.html":{},"classes/TimeUnit.html":{},"changelog.html":{},"index.html":{}}}],["procedur",{"_index":551,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["process",{"_index":484,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["prog",{"_index":1100,"title":{},"body":{"interfaces/ScheduledMetricReporterOptions.html":{}}}],["progress",{"_index":200,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{}}}],["project",{"_index":1285,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["prometheu",{"_index":1340,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["promis",{"_index":472,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"classes/StopWatch.html":{},"interfaces/Tags.html":{},"changelog.html":{},"index.html":{}}}],["properti",{"_index":21,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Buckets.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LogLine.html":{},"interfaces/Logger.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MetricEntry.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"classes/SlidingWindowReservoir.html":{},"classes/StopWatch.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{}}}],["protect",{"_index":25,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/IMetricReporter.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Metric.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"interfaces/Tags.html":{}}}],["provid",{"_index":426,"title":{},"body":{"classes/HdrSnapshot.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"license.html":{}}}],["proxi",{"_index":881,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["prune",{"_index":1672,"title":{},"body":{"index.html":{}}}],["public",{"_index":26,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"interfaces/Counting.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/MovingAverage.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Reservoir.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Tags.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"changelog.html":{},"index.html":{}}}],["publish",{"_index":1659,"title":{},"body":{"index.html":{},"license.html":{}}}],["publishdoc",{"_index":1674,"title":{},"body":{"index.html":{}}}],["publishlicens",{"_index":1675,"title":{},"body":{"index.html":{}}}],["purpos",{"_index":1710,"title":{},"body":{"license.html":{}}}],["push",{"_index":1663,"title":{},"body":{"index.html":{}}}],["pushgateway",{"_index":1534,"title":{},"body":{"index.html":{}}}],["quantil",{"_index":397,"title":{},"body":{"classes/HdrSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["queu",{"_index":488,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["queue",{"_index":344,"title":{},"body":{"interfaces/Gauge.html":{},"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{},"changelog.html":{},"index.html":{}}}],["queuesiz",{"_index":1571,"title":{},"body":{"index.html":{}}}],["queuesize.getvalu",{"_index":1580,"title":{},"body":{"index.html":{}}}],["queuesize.setvalue(12345",{"_index":1578,"title":{},"body":{"index.html":{}}}],["random",{"_index":257,"title":{},"body":{"classes/DefaultReservoir.html":{},"interfaces/Reservoir.html":{},"classes/SlidingWindowReservoir.html":{}}}],["rang",{"_index":163,"title":{},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"index.html":{}}}],["rate",{"_index":307,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Metered.html":{},"interfaces/MovingAverage.html":{},"classes/StopWatch.html":{},"index.html":{}}}],["re",{"_index":1240,"title":{},"body":{"classes/StopWatch.html":{}}}],["reach",{"_index":236,"title":{},"body":{"classes/DefaultReservoir.html":{},"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Reservoir.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Tags.html":{}}}],["readm",{"_index":1319,"title":{},"body":{"changelog.html":{}}}],["readonli",{"_index":27,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Buckets.html":{},"interfaces/IMetricReporter.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Metric.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Tags.html":{}}}],["record",{"_index":401,"title":{},"body":{"classes/HdrSnapshot.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"index.html":{}}}],["refactor",{"_index":1328,"title":{},"body":{"changelog.html":{}}}],["refer",{"_index":357,"title":{},"body":{"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{},"changelog.html":{},"index.html":{}}}],["referenc",{"_index":374,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["reflect",{"_index":840,"title":{},"body":{"interfaces/MetadataContainer.html":{}}}],["regardless",{"_index":339,"title":{},"body":{"interfaces/Gauge.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["regist",{"_index":516,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{},"changelog.html":{}}}],["register",{"_index":1045,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["register(nam",{"_index":1048,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["registermetr",{"_index":1047,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"changelog.html":{}}}],["registermetric(metr",{"_index":1034,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["registr",{"_index":894,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"index.html":{}}}],["registration.metricref",{"_index":946,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["registration.remove();metr",{"_index":1638,"title":{},"body":{"index.html":{}}}],["registri",{"_index":502,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{},"changelog.html":{},"coverage.html":{},"index.html":{},"unit-test.html":{}}}],["registry'",{"_index":566,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["registry.addlistener(new",{"_index":1635,"title":{},"body":{"index.html":{}}}],["registry.getcounterlist",{"_index":583,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["registry.getgaugelist",{"_index":586,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["registry.gethistogramlist",{"_index":591,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["registry.getmeterlist",{"_index":596,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["registry.getmonotonecounterlist",{"_index":578,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["registry.gettag",{"_index":645,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["registry.gettags().foreach((tag",{"_index":646,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["registry.gettimerlist",{"_index":601,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["registry.newcounter(\"newalloc",{"_index":1647,"title":{},"body":{"index.html":{}}}],["registry.newcounter(\"request",{"_index":1637,"title":{},"body":{"index.html":{}}}],["registry.newcounter(\"requestcount",{"_index":1545,"title":{},"body":{"index.html":{}}}],["registry.newhdrhistogram(\"requestlat",{"_index":1595,"title":{},"body":{"index.html":{}}}],["registry.newhistogram(\"requestlat",{"_index":1587,"title":{},"body":{"index.html":{}}}],["registry.newmeter(\"callcount",{"_index":1602,"title":{},"body":{"index.html":{}}}],["registry.newmonotonecounter(\"errorcount",{"_index":1551,"title":{},"body":{"index.html":{}}}],["registry.newtimer(\"callstat",{"_index":1613,"title":{},"body":{"index.html":{}}}],["registry.newtimer(\"request",{"_index":1537,"title":{},"body":{"index.html":{}}}],["registry.registermetric(arraylength",{"_index":1577,"title":{},"body":{"index.html":{}}}],["registry.registermetric(capac",{"_index":1643,"title":{},"body":{"index.html":{}}}],["registry.registermetric(queues",{"_index":1576,"title":{},"body":{"index.html":{}}}],["registry.t",{"_index":880,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"unit-test.html":{}}}],["registry.ts:25",{"_index":1081,"title":{},"body":{"classes/MetricRegistryListenerRegistration.html":{}}}],["registry.ts:42",{"_index":1082,"title":{},"body":{"classes/MetricRegistryListenerRegistration.html":{}}}],["registry.ts:64",{"_index":886,"title":{},"body":{"classes/MetricRegistration.html":{}}}],["registry.ts:71",{"_index":885,"title":{},"body":{"classes/MetricRegistration.html":{}}}],["relat",{"_index":1433,"title":{},"body":{"changelog.html":{}}}],["releas",{"_index":1660,"title":{},"body":{"index.html":{}}}],["remain",{"_index":471,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["remov",{"_index":476,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetadataContainer.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"changelog.html":{},"index.html":{}}}],["removecount",{"_index":1420,"title":{},"body":{"changelog.html":{}}}],["removecounter(nam",{"_index":1003,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["removegaug",{"_index":1421,"title":{},"body":{"changelog.html":{}}}],["removegauge(nam",{"_index":1005,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["removehistogram",{"_index":1422,"title":{},"body":{"changelog.html":{}}}],["removehistogram(nam",{"_index":1006,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["removelistener(listen",{"_index":928,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["removemet",{"_index":1423,"title":{},"body":{"changelog.html":{}}}],["removemetadata",{"_index":38,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/MetadataContainer.html":{}}}],["removemetadata(nam",{"_index":84,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metric.html":{}}}],["removemeter(nam",{"_index":1007,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["removemetr",{"_index":991,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"changelog.html":{}}}],["removemetric(nam",{"_index":992,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["removemetricregistri",{"_index":463,"title":{},"body":{"interfaces/IMetricReporter.html":{}}}],["removemetricregistry(metricregistri",{"_index":474,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["removemetrics(nam",{"_index":1000,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["removetag",{"_index":39,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Taggable.html":{}}}],["removetag(nam",{"_index":86,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"interfaces/Taggable.html":{}}}],["removetags(...nam",{"_index":88,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"interfaces/Taggable.html":{}}}],["removetim",{"_index":1424,"title":{},"body":{"changelog.html":{}}}],["removetimer(nam",{"_index":1008,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["renam",{"_index":1429,"title":{},"body":{"changelog.html":{}}}],["replac",{"_index":238,"title":{},"body":{"classes/DefaultReservoir.html":{},"interfaces/Reservoir.html":{},"classes/SlidingWindowReservoir.html":{}}}],["report",{"_index":343,"title":{},"body":{"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"interfaces/IMetricReporter.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MetricEntry.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/StopWatch.html":{},"interfaces/Tags.html":{},"changelog.html":{},"index.html":{}}}],["reportcount",{"_index":627,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["reporter.addmetricregistry(registri",{"_index":1538,"title":{},"body":{"index.html":{}}}],["reporter.reportevent(event);gaug",{"_index":1568,"title":{},"body":{"index.html":{}}}],["reporter.start",{"_index":1539,"title":{},"body":{"index.html":{}}}],["reporter.t",{"_index":460,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Tags.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"unit-test.html":{}}}],["reporter.ts:135",{"_index":473,"title":{},"body":{"interfaces/IMetricReporter.html":{}}}],["reporter.ts:144",{"_index":498,"title":{},"body":{"interfaces/IMetricReporter.html":{}}}],["reporter.ts:153",{"_index":499,"title":{},"body":{"interfaces/IMetricReporter.html":{}}}],["reporter.ts:162",{"_index":500,"title":{},"body":{"interfaces/IMetricReporter.html":{}}}],["reporter.ts:171",{"_index":468,"title":{},"body":{"interfaces/IMetricReporter.html":{}}}],["reporter.ts:180",{"_index":475,"title":{},"body":{"interfaces/IMetricReporter.html":{}}}],["reporter.ts:198",{"_index":481,"title":{},"body":{"interfaces/IMetricReporter.html":{}}}],["reporter.ts:20",{"_index":1257,"title":{},"body":{"interfaces/Tags.html":{}}}],["reporter.ts:206",{"_index":469,"title":{},"body":{"interfaces/IMetricReporter.html":{}}}],["reporter.ts:27",{"_index":1091,"title":{},"body":{"interfaces/OverallReportContext.html":{}}}],["reportev",{"_index":464,"title":{},"body":{"interfaces/IMetricReporter.html":{},"changelog.html":{}}}],["reportevent(ev",{"_index":479,"title":{},"body":{"interfaces/IMetricReporter.html":{}}}],["reportevent>(ev",{"_index":532,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["reportfunct",{"_index":613,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["reportfunction(metr",{"_index":623,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["reportgauge(gaug",{"_index":628,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["reporthistogram(histogram",{"_index":629,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["reportingcontext",{"_index":513,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["reportingresult",{"_index":518,"title":{"interfaces/ReportingResult.html":{}},"body":{"interfaces/IMetricReporter.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{},"coverage.html":{}}}],["reportinterv",{"_index":720,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/ScheduledMetricReporterOptions.html":{}}}],["reportmeter(met",{"_index":630,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["reportmetr",{"_index":565,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["reportmetricregistry(ctx",{"_index":569,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["reporttimer(tim",{"_index":631,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["repres",{"_index":152,"title":{},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"interfaces/Counting.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"interfaces/Metered.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricSet.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"classes/SlidingWindowReservoir.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{}}}],["represent",{"_index":109,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Int64Wrapper.html":{},"interfaces/Metric.html":{}}}],["request",{"_index":845,"title":{},"body":{"interfaces/Metered.html":{},"index.html":{}}}],["requestcount",{"_index":1544,"title":{},"body":{"index.html":{}}}],["requestcount.decrement(1",{"_index":1547,"title":{},"body":{"index.html":{}}}],["requestcount.getcount",{"_index":1548,"title":{},"body":{"index.html":{}}}],["requestcount.increment(1",{"_index":1546,"title":{},"body":{"index.html":{}}}],["requestcount.reset();monotonecount",{"_index":1549,"title":{},"body":{"index.html":{}}}],["requestlat",{"_index":1586,"title":{},"body":{"index.html":{}}}],["requestlatency.getsnapshot",{"_index":1592,"title":{},"body":{"index.html":{}}}],["requestlatency.update(102000",{"_index":1597,"title":{},"body":{"index.html":{}}}],["requestlatency.update(12345",{"_index":1588,"title":{},"body":{"index.html":{}}}],["requestlatency.update(23456",{"_index":1589,"title":{},"body":{"index.html":{}}}],["requestlatency.update(34567",{"_index":1590,"title":{},"body":{"index.html":{}}}],["requestlatency.update(4390000",{"_index":1599,"title":{},"body":{"index.html":{}}}],["requests.tim",{"_index":1541,"title":{},"body":{"index.html":{}}}],["require(\"n",{"_index":408,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["require(\"nod",{"_index":670,"title":{},"body":{"classes/Int64Wrapper.html":{},"miscellaneous/variables.html":{}}}],["reservoir",{"_index":234,"title":{"interfaces/Reservoir.html":{}},"body":{"classes/DefaultReservoir.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/Reservoir.html":{},"classes/SlidingWindowReservoir.html":{},"classes/StopWatch.html":{},"coverage.html":{}}}],["reservoir=nul",{"_index":1022,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["resolv",{"_index":496,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["resourc",{"_index":1523,"title":{},"body":{"index.html":{}}}],["restart",{"_index":1174,"title":{},"body":{"classes/SlidingWindowReservoir.html":{}}}],["restrict",{"_index":1686,"title":{},"body":{"license.html":{}}}],["result",{"_index":134,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"interfaces/Counting.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/Logger.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metered.html":{},"interfaces/Metric.html":{},"interfaces/MetricEntry.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSet.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/MovingAverage.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"unit-test.html":{},"miscellaneous/variables.html":{}}}],["result.result",{"_index":625,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["retun",{"_index":1102,"title":{},"body":{"interfaces/ScheduledMetricReporterOptions.html":{}}}],["return",{"_index":74,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"interfaces/Counting.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metered.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSet.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/MovingAverage.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"changelog.html":{},"index.html":{}}}],["right",{"_index":1688,"title":{},"body":{"license.html":{}}}],["rimraf",{"_index":1413,"title":{},"body":{"changelog.html":{}}}],["rm",{"_index":1665,"title":{},"body":{"index.html":{}}}],["run",{"_index":509,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricEntry.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Tags.html":{},"index.html":{}}}],["safe",{"_index":895,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["sale",{"_index":1516,"title":{},"body":{"index.html":{}}}],["same",{"_index":876,"title":{},"body":{"interfaces/MetricEntry.html":{},"changelog.html":{}}}],["sampl",{"_index":159,"title":{"interfaces/Sampling.html":{}},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"interfaces/Counting.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"classes/HdrSnapshot.html":{},"interfaces/MovingAverage.html":{},"interfaces/Sampling.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Time.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["sampler",{"_index":1019,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["samplerate=1",{"_index":1017,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["save",{"_index":1511,"title":{},"body":{"index.html":{}}}],["schedul",{"_index":713,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{}}}],["scheduledmetricreport",{"_index":711,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"coverage.html":{}}}],["scheduledmetricreporteropt",{"_index":712,"title":{"interfaces/ScheduledMetricReporterOptions.html":{}},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"coverage.html":{}}}],["scheduledreport",{"_index":1326,"title":{},"body":{"changelog.html":{}}}],["script",{"_index":1325,"title":{},"body":{"changelog.html":{}}}],["second",{"_index":213,"title":{},"body":{"classes/Clock.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MovingAverage.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["sell",{"_index":1693,"title":{},"body":{"license.html":{}}}],["semant",{"_index":1289,"title":{},"body":{"changelog.html":{}}}],["send",{"_index":470,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{},"index.html":{}}}],["seri",{"_index":1566,"title":{},"body":{"index.html":{}}}],["set",{"_index":15,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"interfaces/IMetricReporter.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/StopWatch.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"changelog.html":{}}}],["set.t",{"_index":1083,"title":{},"body":{"interfaces/MetricSet.html":{},"coverage.html":{},"unit-test.html":{}}}],["set.ts:21",{"_index":1086,"title":{},"body":{"interfaces/MetricSet.html":{}}}],["set.ts:29",{"_index":1085,"title":{},"body":{"interfaces/MetricSet.html":{}}}],["setdefaultclock(defaultclock",{"_index":936,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["setdescript",{"_index":40,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"changelog.html":{}}}],["setdescription(descript",{"_index":90,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{}}}],["setgroup",{"_index":41,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Groupable.html":{}}}],["setgroup(group",{"_index":92,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Groupable.html":{},"interfaces/Metric.html":{}}}],["setinterv",{"_index":722,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"index.html":{}}}],["setlog(log",{"_index":726,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["setmetadata",{"_index":42,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/MetadataContainer.html":{}}}],["setmetadata(nam",{"_index":94,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metric.html":{}}}],["setnam",{"_index":43,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"changelog.html":{}}}],["setname(nam",{"_index":96,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{}}}],["setnamefactory(namefactori",{"_index":932,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["settag",{"_index":44,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/IMetricReporter.html":{},"interfaces/Taggable.html":{}}}],["settag(\"compon",{"_index":1565,"title":{},"body":{"index.html":{}}}],["settag(\"mod",{"_index":1564,"title":{},"body":{"index.html":{}}}],["settag(nam",{"_index":98,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"interfaces/Taggable.html":{}}}],["settags(tag",{"_index":100,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/IMetricReporter.html":{},"interfaces/Metric.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{}}}],["setter",{"_index":1315,"title":{},"body":{"changelog.html":{}}}],["setup",{"_index":1445,"title":{},"body":{"changelog.html":{}}}],["setvalue(\"start",{"_index":1563,"title":{},"body":{"index.html":{}}}],["setvalue(valu",{"_index":349,"title":{},"body":{"interfaces/Gauge.html":{}}}],["shall",{"_index":1700,"title":{},"body":{"license.html":{}}}],["ship",{"_index":1531,"title":{},"body":{"index.html":{}}}],["sign",{"_index":665,"title":{},"body":{"classes/Int64Wrapper.html":{}}}],["signal",{"_index":1562,"title":{},"body":{"index.html":{}}}],["similar",{"_index":1508,"title":{},"body":{"index.html":{}}}],["simpl",{"_index":233,"title":{},"body":{"classes/DefaultReservoir.html":{},"interfaces/Gauge.html":{},"interfaces/Reservoir.html":{},"classes/SlidingWindowReservoir.html":{}}}],["simplegaug",{"_index":345,"title":{},"body":{"interfaces/Gauge.html":{},"coverage.html":{},"index.html":{}}}],["simplegauge(\"requestcount",{"_index":1572,"title":{},"body":{"index.html":{}}}],["simplesnapshot",{"_index":259,"title":{"classes/SimpleSnapshot.html":{}},"body":{"classes/DefaultReservoir.html":{},"interfaces/Reservoir.html":{},"classes/SimpleSnapshot.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"coverage.html":{}}}],["singl",{"_index":1084,"title":{},"body":{"interfaces/MetricSet.html":{},"index.html":{}}}],["sinlg",{"_index":562,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["sinon",{"_index":1451,"title":{},"body":{"changelog.html":{}}}],["size",{"_index":240,"title":{},"body":{"classes/DefaultReservoir.html":{},"interfaces/Gauge.html":{},"classes/HdrSnapshot.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Reservoir.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"changelog.html":{}}}],["sizeattributeinterfac",{"_index":686,"title":{"interfaces/SizeAttributeInterface.html":{}},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"coverage.html":{}}}],["sizegaug",{"_index":688,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"coverage.html":{}}}],["sizegauge.islengthattributeinterface(collect",{"_index":699,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{}}}],["sizegauge.islengthmethodinterface(collect",{"_index":701,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{}}}],["sizegauge.issizeattributeinterface(collect",{"_index":702,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{}}}],["sizegauge.issizemethodinterface(collect",{"_index":703,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{}}}],["sizemethodinterfac",{"_index":685,"title":{"interfaces/SizeMethodInterface.html":{}},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"coverage.html":{}}}],["slidingwindowreservoir",{"_index":890,"title":{"classes/SlidingWindowReservoir.html":{}},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/SlidingWindowReservoir.html":{},"coverage.html":{}}}],["slidingwindowreservoir(1024",{"_index":1027,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["snapshot",{"_index":241,"title":{"interfaces/Snapshot.html":{}},"body":{"classes/DefaultReservoir.html":{},"classes/HdrSnapshot.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"classes/SimpleSnapshot.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StopWatch.html":{},"coverage.html":{},"index.html":{}}}],["snapshot.getmean",{"_index":1624,"title":{},"body":{"index.html":{}}}],["snapshot.getmean();hdrhistogram",{"_index":1593,"title":{},"body":{"index.html":{}}}],["snapshot.getmean();met",{"_index":1600,"title":{},"body":{"index.html":{}}}],["snapshot.getmean();metriclisten",{"_index":1632,"title":{},"body":{"index.html":{}}}],["softwar",{"_index":1684,"title":{},"body":{"license.html":{}}}],["sort",{"_index":1113,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["sourc",{"_index":3,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"interfaces/Counting.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/Logger.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metered.html":{},"interfaces/Metric.html":{},"interfaces/MetricEntry.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSet.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/MovingAverage.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"changelog.html":{},"dependencies.html":{}}}],["specif",{"_index":142,"title":{},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["specifi",{"_index":250,"title":{},"body":{"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/IMetricReporter.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MetadataContainer.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/MovingAverage.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Reservoir.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"classes/TimeUnit.html":{}}}],["speicif",{"_index":733,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["standard",{"_index":393,"title":{},"body":{"classes/HdrSnapshot.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["start",{"_index":167,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"classes/StopWatch.html":{},"interfaces/Tags.html":{},"changelog.html":{},"index.html":{}}}],["starttim",{"_index":1201,"title":{},"body":{"classes/StopWatch.html":{}}}],["stat",{"_index":1535,"title":{},"body":{"index.html":{}}}],["state",{"_index":536,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"interfaces/Tags.html":{}}}],["statement",{"_index":1457,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["static",{"_index":23,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MovingAverage.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"interfaces/Snapshot.html":{},"changelog.html":{}}}],["statist",{"_index":1527,"title":{},"body":{"index.html":{}}}],["statu",{"_index":870,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["stdclock",{"_index":225,"title":{"classes/StdClock.html":{}},"body":{"classes/Clock.html":{},"interfaces/IMetricReporter.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"classes/StdClock.html":{},"interfaces/Tags.html":{},"interfaces/Time.html":{},"coverage.html":{}}}],["stddev",{"_index":771,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["stderr",{"_index":833,"title":{},"body":{"interfaces/Logger.html":{}}}],["stdout",{"_index":828,"title":{},"body":{"interfaces/Logger.html":{}}}],["stop",{"_index":465,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"classes/StopWatch.html":{},"interfaces/Tags.html":{},"changelog.html":{},"index.html":{}}}],["stopwatch",{"_index":1198,"title":{"classes/StopWatch.html":{}},"body":{"classes/StopWatch.html":{},"coverage.html":{},"index.html":{}}}],["stopwatch(this.clock",{"_index":1244,"title":{},"body":{"classes/StopWatch.html":{}}}],["storag",{"_index":1640,"title":{},"body":{"index.html":{}}}],["stream",{"_index":829,"title":{},"body":{"interfaces/Logger.html":{},"changelog.html":{}}}],["string",{"_index":58,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/StopWatch.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"index.html":{}}}],["subject",{"_index":1696,"title":{},"body":{"license.html":{}}}],["sublicens",{"_index":1691,"title":{},"body":{"license.html":{}}}],["substanti",{"_index":1701,"title":{},"body":{"license.html":{}}}],["suit",{"_index":1427,"title":{},"body":{"changelog.html":{}}}],["sum",{"_index":279,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"classes/HdrSnapshot.html":{},"interfaces/MovingAverage.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{}}}],["summar",{"_index":402,"title":{"interfaces/Summarizing.html":{}},"body":{"classes/HdrSnapshot.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"changelog.html":{},"coverage.html":{}}}],["super",{"_index":347,"title":{},"body":{"interfaces/Gauge.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/StopWatch.html":{},"index.html":{}}}],["super(nul",{"_index":443,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["super(opt",{"_index":1103,"title":{},"body":{"interfaces/ScheduledMetricReporterOptions.html":{}}}],["support",{"_index":1359,"title":{},"body":{"changelog.html":{},"dependencies.html":{},"index.html":{}}}],["support/regist",{"_index":104,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"interfaces/Counting.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/Logger.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metered.html":{},"interfaces/Metric.html":{},"interfaces/MetricEntry.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSet.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/MovingAverage.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{}}}],["synchron",{"_index":1232,"title":{},"body":{"classes/StopWatch.html":{}}}],["system",{"_index":1517,"title":{},"body":{"index.html":{}}}],["t",{"_index":78,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Gauge.html":{},"interfaces/IMetricReporter.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"classes/StopWatch.html":{},"interfaces/Tags.html":{}}}],["tabl",{"_index":1502,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["tablesort(document.getelementbyid('coverag",{"_index":1501,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["tag",{"_index":17,"title":{"interfaces/Tags.html":{}},"body":{"classes/BaseMetric.html":{},"interfaces/IMetricReporter.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Metric.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"changelog.html":{},"coverage.html":{},"index.html":{}}}],["taggabl",{"_index":108,"title":{"interfaces/Taggable.html":{}},"body":{"classes/BaseMetric.html":{},"interfaces/IMetricReporter.html":{},"interfaces/Metric.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"changelog.html":{},"coverage.html":{}}}],["taggable.gettag",{"_index":647,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["taggable.gettags().foreach((tag",{"_index":648,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["tags.foreach((valu",{"_index":127,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{}}}],["tags.set(\"appl",{"_index":1557,"title":{},"body":{"index.html":{}}}],["tags.set(\"hostnam",{"_index":1558,"title":{},"body":{"index.html":{}}}],["tags=new",{"_index":538,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["tags[key",{"_index":644,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["target",{"_index":1333,"title":{},"body":{"changelog.html":{}}}],["templat",{"_index":342,"title":{},"body":{"interfaces/Gauge.html":{},"interfaces/IMetricReporter.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MetadataContainer.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"classes/StopWatch.html":{},"interfaces/Tags.html":{}}}],["test",{"_index":1324,"title":{"unit-test.html":{}},"body":{"changelog.html":{},"index.html":{},"unit-test.html":{}}}],["tevent",{"_index":480,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["teventdata",{"_index":482,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["th",{"_index":453,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["thank",{"_index":1304,"title":{},"body":{"changelog.html":{}}}],["then((r",{"_index":1239,"title":{},"body":{"classes/StopWatch.html":{}}}],["therefor",{"_index":1229,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.a.length",{"_index":1570,"title":{},"body":{"index.html":{}}}],["this.addduration(diff(starttim",{"_index":1236,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.afterreport(ctx",{"_index":561,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["this.alpha",{"_index":329,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["this.avg",{"_index":334,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["this.beforereport(ctx",{"_index":559,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["this.buckets.boundari",{"_index":457,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["this.buildtags(ctx.registri",{"_index":751,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["this.clock",{"_index":1210,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.clock.tim",{"_index":1212,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.count",{"_index":455,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["this.createoverallreportcontext",{"_index":557,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["this.defaultclock",{"_index":935,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.descript",{"_index":122,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Gauge.html":{},"interfaces/Metric.html":{},"classes/StopWatch.html":{}}}],["this.extractor",{"_index":700,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{}}}],["this.firemetricadded(metric.getnam",{"_index":1040,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.firemetricadded(nam",{"_index":1050,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.firemetricremoved(nam",{"_index":998,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.getbyname(nam",{"_index":983,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.getbyname>(nam",{"_index":987,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.getfirstbyname(nam",{"_index":969,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.getfirstbyname>(nam",{"_index":974,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.getmax",{"_index":1167,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["this.getmean",{"_index":1161,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["this.getnumber(meter.get15minuter",{"_index":806,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["this.getnumber(meter.get1minuter",{"_index":810,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["this.getnumber(meter.get5minuter",{"_index":808,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["this.getnumber(meter.getmeanr",{"_index":812,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["this.getnumber(snapshot.get75thpercentil",{"_index":786,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["this.getnumber(snapshot.get95thpercentil",{"_index":788,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["this.getnumber(snapshot.get98thpercentil",{"_index":790,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["this.getnumber(snapshot.get999thpercentil",{"_index":794,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["this.getnumber(snapshot.get99thpercentil",{"_index":792,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["this.getnumber(snapshot.getmax",{"_index":778,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["this.getnumber(snapshot.getmean",{"_index":780,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["this.getnumber(snapshot.getmedian",{"_index":784,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["this.getnumber(snapshot.getmin",{"_index":782,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["this.getnumber(snapshot.getstddev",{"_index":796,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["this.getnumber(timer.get15minuter",{"_index":818,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["this.getnumber(timer.get1minuter",{"_index":820,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["this.getnumber(timer.get5minuter",{"_index":819,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["this.getnumber(timer.getmeanr",{"_index":821,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["this.getvalue(0.5",{"_index":1157,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["this.getvalue(0.75",{"_index":1152,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["this.getvalue(0.95",{"_index":1153,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["this.getvalue(0.98",{"_index":1154,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["this.getvalue(0.99",{"_index":1156,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["this.getvalue(0.999",{"_index":1155,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["this.group",{"_index":123,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{}}}],["this.group}.${this.nam",{"_index":133,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{}}}],["this.handleresults(ctx",{"_index":605,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["this.haschanged(metricid",{"_index":619,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["this.histogram",{"_index":448,"title":{},"body":{"classes/HdrSnapshot.html":{},"classes/StopWatch.html":{}}}],["this.histogram.getbucket",{"_index":1230,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.histogram.getcount",{"_index":1220,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.histogram.getsnapshot",{"_index":1219,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.histogram.getsum",{"_index":1222,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.histogram.update(unit.convertto(dur",{"_index":1216,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.interv",{"_index":330,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["this.listeners.foreach((listen",{"_index":1068,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.listeners.indexof(listen",{"_index":929,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.listeners.push(listen",{"_index":925,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.listeners[index",{"_index":931,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.logmetadata",{"_index":723,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["this.maxs",{"_index":261,"title":{},"body":{"classes/DefaultReservoir.html":{},"interfaces/Reservoir.html":{},"classes/SlidingWindowReservoir.html":{}}}],["this.met",{"_index":1214,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.metadata",{"_index":116,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{}}}],["this.metadata.delete(nam",{"_index":119,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{}}}],["this.metadata.get(nam",{"_index":117,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{}}}],["this.metadata.set(nam",{"_index":120,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{}}}],["this.meter.get15minuter",{"_index":1223,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.meter.get1minuter",{"_index":1225,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.meter.get5minuter",{"_index":1224,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.meter.getmeanr",{"_index":1226,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.meter.mark(1",{"_index":1217,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.metr",{"_index":942,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.metricref",{"_index":900,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.metricregistri",{"_index":554,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["this.metricregistries.indexof(metricregistri",{"_index":545,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["this.metricregistries.length",{"_index":555,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["this.metricregistries.push(metricregistri",{"_index":544,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["this.metricregistries.splice(index",{"_index":546,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["this.metrics.map((metr",{"_index":965,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.metrics.push(new",{"_index":1038,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.metrics.splice(index",{"_index":997,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.metricstates.get(metricid",{"_index":640,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["this.metricstates.has(metricid",{"_index":639,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["this.nam",{"_index":121,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Gauge.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/StopWatch.html":{},"index.html":{}}}],["this.namefactori",{"_index":933,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.namefactory(nam",{"_index":1052,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.nanosecondsperunit",{"_index":1273,"title":{},"body":{"classes/TimeUnit.html":{}}}],["this.num",{"_index":673,"title":{},"body":{"classes/Int64Wrapper.html":{}}}],["this.num.add(valu",{"_index":675,"title":{},"body":{"classes/Int64Wrapper.html":{}}}],["this.num.tonumb",{"_index":676,"title":{},"body":{"classes/Int64Wrapper.html":{}}}],["this.num.tostr",{"_index":677,"title":{},"body":{"classes/Int64Wrapper.html":{}}}],["this.opt",{"_index":542,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["this.options.log",{"_index":725,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["this.options.log.info(logline.messag",{"_index":731,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["this.options.log.info(logline.result.messag",{"_index":738,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["this.options.schedul",{"_index":1107,"title":{},"body":{"interfaces/ScheduledMetricReporterOptions.html":{}}}],["this.options.tag",{"_index":543,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["this.options.unit.convertto(this.options.reportinterv",{"_index":1105,"title":{},"body":{"interfaces/ScheduledMetricReporterOptions.html":{}}}],["this.reference.getcount",{"_index":420,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["this.reference.histogram.max",{"_index":418,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["this.reference.histogram.mean",{"_index":421,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["this.reference.histogram.min",{"_index":419,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["this.reference.histogram.percentile(50",{"_index":417,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["this.reference.histogram.percentile(75",{"_index":412,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["this.reference.histogram.percentile(95",{"_index":413,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["this.reference.histogram.percentile(98",{"_index":414,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["this.reference.histogram.percentile(99",{"_index":416,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["this.reference.histogram.percentile(99.9",{"_index":415,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["this.reference.histogram.percentile(quantil",{"_index":423,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["this.reference.histogram.stddev",{"_index":422,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["this.register(metricnam",{"_index":1054,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.registermetric(count",{"_index":1013,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.registermetric(histogram",{"_index":1025,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.registermetric(m",{"_index":1044,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.registermetric(met",{"_index":1021,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.registermetric(tim",{"_index":1031,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.registry.removelistener(this.listen",{"_index":899,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.removemetric(nam",{"_index":1004,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.removetag(nam",{"_index":132,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{}}}],["this.report",{"_index":1108,"title":{},"body":{"interfaces/ScheduledMetricReporterOptions.html":{}}}],["this.reportcounter(count",{"_index":581,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["this.reportgauge(ev",{"_index":730,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["this.reportgauge(gaug",{"_index":588,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["this.reporthistogram(histogram",{"_index":593,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["this.reportmeter(met",{"_index":598,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["this.reportmetricregistry(ctx",{"_index":560,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["this.reportmetrics(ctx",{"_index":580,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["this.reporttimer(tim",{"_index":603,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["this.setdescription(descript",{"_index":698,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{}}}],["this.setname(nam",{"_index":697,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{}}}],["this.snapshot",{"_index":450,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["this.starttim",{"_index":1211,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.sum",{"_index":336,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["this.sum.add(valu",{"_index":456,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["this.tag",{"_index":124,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{}}}],["this.tags.delete(nam",{"_index":130,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{}}}],["this.tags.get(nam",{"_index":125,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{}}}],["this.tags.set(key",{"_index":129,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{}}}],["this.tags.set(nam",{"_index":126,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{}}}],["this.tim",{"_index":1106,"title":{},"body":{"interfaces/ScheduledMetricReporterOptions.html":{},"classes/StopWatch.html":{}}}],["this.timer.addduration(diff(this.starttim",{"_index":1213,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.timer.unref",{"_index":1109,"title":{},"body":{"interfaces/ScheduledMetricReporterOptions.html":{}}}],["this.timeunitinnanosecond",{"_index":332,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["this.unit",{"_index":331,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["this.valu",{"_index":348,"title":{},"body":{"interfaces/Gauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["this.values.foreach((valu",{"_index":1160,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["this.values.length",{"_index":262,"title":{},"body":{"classes/DefaultReservoir.html":{},"interfaces/Reservoir.html":{},"classes/SimpleSnapshot.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{}}}],["this.values.sort((a",{"_index":1151,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["this.values[0",{"_index":1159,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["this.values[index",{"_index":1169,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["this.values[this.values.length",{"_index":1158,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["thread",{"_index":1522,"title":{},"body":{"index.html":{}}}],["through",{"_index":316,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{},"index.html":{}}}],["throw",{"_index":427,"title":{},"body":{"classes/HdrSnapshot.html":{},"classes/StopWatch.html":{}}}],["tick",{"_index":285,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["time",{"_index":201,"title":{"interfaces/Time.html":{}},"body":{"classes/Clock.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/IMetricReporter.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MetricEntry.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/MovingAverage.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Tags.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["time(f",{"_index":1234,"title":{},"body":{"classes/StopWatch.html":{}}}],["timeasync",{"_index":1399,"title":{},"body":{"changelog.html":{}}}],["timeasync(f",{"_index":1238,"title":{},"body":{"classes/StopWatch.html":{}}}],["timeout",{"_index":523,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricEntry.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{},"changelog.html":{}}}],["timer",{"_index":503,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"classes/StopWatch.html":{},"interfaces/Tags.html":{},"changelog.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["timer#getcount",{"_index":813,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["timer(clock",{"_index":1030,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["timer.getcount",{"_index":604,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["timer.getgroup",{"_index":817,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["timer.getnam",{"_index":815,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["timer.getsnapshot",{"_index":816,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["timer.start",{"_index":1626,"title":{},"body":{"index.html":{}}}],["timer.stop",{"_index":1627,"title":{},"body":{"index.html":{}}}],["timerctx",{"_index":576,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["timerctx.metr",{"_index":600,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["timerresult",{"_index":602,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["timestamp",{"_index":737,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MetricEntry.html":{}}}],["timeunit",{"_index":287,"title":{"classes/TimeUnit.html":{}},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"classes/StopWatch.html":{},"classes/TimeUnit.html":{},"coverage.html":{}}}],["timeunit(1",{"_index":1275,"title":{},"body":{"classes/TimeUnit.html":{},"miscellaneous/variables.html":{}}}],["timeunit(1000",{"_index":1276,"title":{},"body":{"classes/TimeUnit.html":{},"miscellaneous/variables.html":{}}}],["timeunit(1000000",{"_index":1277,"title":{},"body":{"classes/TimeUnit.html":{},"miscellaneous/variables.html":{}}}],["timeunit(1000000000",{"_index":1278,"title":{},"body":{"classes/TimeUnit.html":{},"miscellaneous/variables.html":{}}}],["timeunit(3600000000000",{"_index":1280,"title":{},"body":{"classes/TimeUnit.html":{},"miscellaneous/variables.html":{}}}],["timeunit(60000000000",{"_index":1279,"title":{},"body":{"classes/TimeUnit.html":{},"miscellaneous/variables.html":{}}}],["timeunit(86400000000000",{"_index":1282,"title":{},"body":{"classes/TimeUnit.html":{},"miscellaneous/variables.html":{}}}],["timeunitinnanosecond",{"_index":280,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["tonumb",{"_index":656,"title":{},"body":{"classes/Int64Wrapper.html":{}}}],["tort",{"_index":1721,"title":{},"body":{"license.html":{}}}],["tostr",{"_index":45,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Int64Wrapper.html":{},"interfaces/Metric.html":{}}}],["total",{"_index":854,"title":{},"body":{"interfaces/Metered.html":{}}}],["trace",{"_index":826,"title":{},"body":{"interfaces/Logger.html":{},"changelog.html":{}}}],["track",{"_index":535,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricEntry.html":{},"interfaces/MetricRegistryListener.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["transit",{"_index":1308,"title":{},"body":{"changelog.html":{}}}],["travisci",{"_index":1329,"title":{},"body":{"changelog.html":{}}}],["tri",{"_index":407,"title":{},"body":{"classes/HdrSnapshot.html":{},"classes/StopWatch.html":{}}}],["trigger",{"_index":328,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"changelog.html":{}}}],["true",{"_index":633,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["truth",{"_index":224,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{}}}],["ts",{"_index":1381,"title":{},"body":{"changelog.html":{}}}],["tsconfig",{"_index":1396,"title":{},"body":{"changelog.html":{}}}],["tslint:dis",{"_index":1542,"title":{},"body":{"index.html":{}}}],["two",{"_index":209,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{},"miscellaneous/functions.html":{}}}],["two.millisecond",{"_index":222,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{}}}],["two.nanosecond",{"_index":221,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{}}}],["twovalu",{"_index":220,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{}}}],["type",{"_index":47,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Buckets.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/Logger.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metric.html":{},"interfaces/MetricEntry.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/MovingAverage.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Reservoir.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StopWatch.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"changelog.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["type.t",{"_index":1728,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["typealias",{"_index":1725,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typedoc",{"_index":1355,"title":{},"body":{"changelog.html":{}}}],["typeof",{"_index":690,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{}}}],["typescript",{"_index":1406,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["typo",{"_index":1295,"title":{},"body":{"changelog.html":{}}}],["under",{"_index":1032,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"changelog.html":{}}}],["unhealthi",{"_index":872,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["uniqu",{"_index":55,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{}}}],["unit",{"_index":281,"title":{"unit-test.html":{}},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/IMetricReporter.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/MovingAverage.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"classes/StopWatch.html":{},"interfaces/Tags.html":{},"classes/TimeUnit.html":{},"changelog.html":{},"unit-test.html":{}}}],["unit.convertto(interv",{"_index":333,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["unit.nanosecondsperunit",{"_index":1274,"title":{},"body":{"classes/TimeUnit.html":{}}}],["unit.t",{"_index":1259,"title":{},"body":{"classes/TimeUnit.html":{},"coverage.html":{},"unit-test.html":{},"miscellaneous/variables.html":{}}}],["unit.ts:18",{"_index":1265,"title":{},"body":{"classes/TimeUnit.html":{}}}],["unit.ts:36",{"_index":1272,"title":{},"body":{"classes/TimeUnit.html":{}}}],["unit.ts:53",{"_index":1267,"title":{},"body":{"classes/TimeUnit.html":{}}}],["unreleas",{"_index":1290,"title":{},"body":{"changelog.html":{}}}],["until",{"_index":256,"title":{},"body":{"classes/DefaultReservoir.html":{},"interfaces/Reservoir.html":{},"classes/SlidingWindowReservoir.html":{}}}],["updat",{"_index":242,"title":{},"body":{"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"classes/HdrSnapshot.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"classes/SlidingWindowReservoir.html":{},"changelog.html":{},"index.html":{}}}],["update(valu",{"_index":252,"title":{},"body":{"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"classes/HdrSnapshot.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"classes/SlidingWindowReservoir.html":{}}}],["upper",{"_index":1170,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["us",{"_index":148,"title":{},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"interfaces/Counting.html":{},"interfaces/Groupable.html":{},"interfaces/IMetricReporter.html":{},"interfaces/LogLine.html":{},"interfaces/Logger.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSet.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"classes/SlidingWindowReservoir.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Tags.html":{},"interfaces/Time.html":{},"changelog.html":{},"index.html":{},"license.html":{}}}],["usag",{"_index":1512,"title":{},"body":{"index.html":{}}}],["usual",{"_index":491,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/Logger.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["util",{"_index":861,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["va.b.c",{"_index":1664,"title":{},"body":{"index.html":{}}}],["valid",{"_index":743,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["valu",{"_index":49,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metric.html":{},"interfaces/MetricEntry.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/MovingAverage.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"classes/TimeUnit.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["valueextractor",{"_index":687,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"miscellaneous/typealiases.html":{}}}],["values.length",{"_index":1150,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["values.slice(0",{"_index":1149,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["variabl",{"_index":1207,"title":{"miscellaneous/variables.html":{}},"body":{"classes/StopWatch.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["versa",{"_index":320,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["version",{"_index":938,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricSet.html":{},"changelog.html":{},"index.html":{}}}],["via",{"_index":1636,"title":{},"body":{"index.html":{}}}],["vice",{"_index":319,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["vm",{"_index":1320,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["void",{"_index":1067,"title":{},"body":{"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"changelog.html":{},"index.html":{}}}],["wait",{"_index":1521,"title":{},"body":{"index.html":{}}}],["want",{"_index":874,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["warn",{"_index":827,"title":{},"body":{"interfaces/Logger.html":{}}}],["warranti",{"_index":1703,"title":{},"body":{"license.html":{}}}],["watch",{"_index":1628,"title":{},"body":{"index.html":{}}}],["weight",{"_index":290,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["well",{"_index":521,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["wether",{"_index":486,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{}}}],["whether",{"_index":1718,"title":{},"body":{"license.html":{}}}],["who",{"_index":226,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{}}}],["within",{"_index":56,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/Metric.html":{},"changelog.html":{},"index.html":{}}}],["without",{"_index":526,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricEntry.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"interfaces/Tags.html":{},"license.html":{}}}],["work",{"_index":1630,"title":{},"body":{"index.html":{}}}],["worktre",{"_index":1671,"title":{},"body":{"index.html":{}}}],["wrapper",{"_index":425,"title":{},"body":{"classes/HdrSnapshot.html":{},"classes/Int64Wrapper.html":{},"classes/StopWatch.html":{}}}],["zero",{"_index":229,"title":{},"body":{"classes/Clock.html":{},"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportingResult.html":{},"classes/StdClock.html":{},"interfaces/Tags.html":{},"interfaces/Time.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/BaseMetric.html":{"url":"classes/BaseMetric.html","title":"class - BaseMetric","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BaseMetric\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/metric.ts\n        \n\n            \n                Description\n            \n            \n                Abstract base-class for a metric which implements commonly needed functions:\n\nget / set name\nget / set tags\nget / set group\n\n\n            \n\n\n            \n                Implements\n            \n            \n                        Metric\n            \n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Static\n                                COUNTER\n                            \n                            \n                                    Protected\n                                description\n                            \n                            \n                                    Protected\n                                group\n                            \n                            \n                                    Public\n                                    Readonly\n                                id\n                            \n                            \n                                    Protected\n                                metadata\n                            \n                            \n                                    Protected\n                                name\n                            \n                            \n                                    Protected\n                                tags\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                addTags\n                            \n                            \n                                    Public\n                                getDescription\n                            \n                            \n                                    Public\n                                getGroup\n                            \n                            \n                                    Public\n                                getMetadata\n                            \n                            \n                                    Public\n                                getMetadataMap\n                            \n                            \n                                    Public\n                                getName\n                            \n                            \n                                    Public\n                                getTag\n                            \n                            \n                                    Public\n                                getTags\n                            \n                            \n                                    Public\n                                removeMetadata\n                            \n                            \n                                    Public\n                                removeTag\n                            \n                            \n                                    Public\n                                removeTags\n                            \n                            \n                                    Public\n                                setDescription\n                            \n                            \n                                    Public\n                                setGroup\n                            \n                            \n                                    Public\n                                setMetadata\n                            \n                            \n                                    Public\n                                setName\n                            \n                            \n                                    Public\n                                setTag\n                            \n                            \n                                    Public\n                                setTags\n                            \n                            \n                                    Public\n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Static\n                            COUNTER\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        COUNTER:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/metric.ts:73\n                            \n                        \n\n                \n                    \n                        A static number instance to give an unique id within an application instance.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            description\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        description:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/metric.ts:113\n                            \n                        \n\n                \n                    \n                        The description of this metric.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            group\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        group:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/metric.ts:97\n                            \n                        \n\n                \n                    \n                        The group set to this metric.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            id\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        id:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                    \n                        \n                            Default value : BaseMetric.COUNTER++\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/metric.ts:81\n                            \n                        \n\n                \n                    \n                        The unique id of this metric instance.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            metadata\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        metadata:     Map\n\n                    \n                \n                    \n                        \n                            Type :     Map\n\n                        \n                    \n                    \n                        \n                            Default value : new Map()\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/metric.ts:121\n                            \n                        \n\n                \n                    \n                        The metadata associated with an instance of class.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            name\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        name:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/metric.ts:105\n                            \n                        \n\n                \n                    \n                        The name of this metric.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            tags\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        tags:     Map\n\n                    \n                \n                    \n                        \n                            Type :     Map\n\n                        \n                    \n                    \n                        \n                            Default value : new Map()\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/metric.ts:89\n                            \n                        \n\n                \n                    \n                        Maps of tags for this metric.\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            addTags\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        addTags(tags: Map)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metric.ts:187\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        tags\n                                                        \n                                                                    Map\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getDescription\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getDescription()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metric.ts:151\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getGroup\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getGroup()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metric.ts:160\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getMetadata\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getMetadata(name: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metric.ts:127\n                            \n                        \n\n                        \n                            \n                                Type parameters :\n                                \n                                        T\n                                \n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     T\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getMetadataMap\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getMetadataMap()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metric.ts:123\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     Map\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getName\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getName()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metric.ts:142\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getTag\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getTag(name: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metric.ts:173\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     string\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getTags\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getTags()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metric.ts:169\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     Map\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            removeMetadata\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        removeMetadata(name: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metric.ts:131\n                            \n                        \n\n                        \n                            \n                                Type parameters :\n                                \n                                        T\n                                \n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     T\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            removeTag\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        removeTag(name: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metric.ts:192\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            removeTags\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        removeTags(...names: string[])\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metric.ts:197\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        names\n                                                        \n                                                                    string[]\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            setDescription\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        setDescription(description: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metric.ts:155\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        description\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            setGroup\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        setGroup(group: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metric.ts:164\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        group\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            setMetadata\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        setMetadata(name: string, value: T)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metric.ts:137\n                            \n                        \n\n                        \n                            \n                                Type parameters :\n                                \n                                        T\n                                \n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        value\n                                                        \n                                                                    T\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            setName\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        setName(name: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metric.ts:146\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            setTag\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        setTag(name: string, value: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metric.ts:177\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        value\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            setTags\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        setTags(tags: Map)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metric.ts:182\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        tags\n                                                        \n                                                                    Map\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            toString\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        toString()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metric.ts:202\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { Groupable } from \"./groupable\";\nimport { MetadataContainer } from \"./metadata-container\";\nimport { Taggable } from \"./taggable\";\n\n/**\n * Representation for a metrics.\n *\n * @export\n * @interface Metric\n * @extends {Groupable}\n * @extends {Taggable}\n */\nexport interface Metric extends Groupable, MetadataContainer, Taggable {\n\n    /**\n     * Gets the name of the metric.\n     *\n     * @returns {string}\n     * @memberof Metric\n     */\n    getName(): string;\n\n    /**\n     * Sets the name of the metric.\n     *\n     * @param {string} name\n     * @returns {this}\n     * @memberof Metric\n     */\n    setName(name: string): this;\n\n    /**\n     * Gets the description of the metric.\n     *\n     * @returns {string}\n     * @memberof Metric\n     */\n    getDescription(): string;\n\n    /**\n     * Sets the description of the metric.\n     *\n     * @param {string} description\n     * @returns {this}\n     * @memberof Metric\n     */\n    setDescription(description: string): this;\n\n}\n\n/**\n * Abstract base-class for a metric which implements commonly needed functions:\n * - get / set name\n * - get / set tags\n * - get / set group\n *\n * @export\n * @abstract\n * @class BaseMetric\n * @implements {Metric}\n */\nexport abstract class BaseMetric implements Metric {\n\n    /**\n     * A static number instance to give an unique id within an application instance.\n     *\n     * @private\n     * @static\n     * @memberof BaseMetric\n     */\n    private static COUNTER = 0;\n\n    /**\n     * The unique id of this metric instance.\n     *\n     * @type {number}\n     * @memberof BaseMetric\n     */\n    public readonly id: number = BaseMetric.COUNTER++;\n    /**\n     * Maps of tags for this metric.\n     *\n     * @protected\n     * @type {Map}\n     * @memberof BaseMetric\n     */\n    protected tags: Map = new Map();\n    /**\n     * The group set to this metric.\n     *\n     * @protected\n     * @type {string}\n     * @memberof BaseMetric\n     */\n    protected group: string;\n    /**\n     * The name of this metric.\n     *\n     * @protected\n     * @type {string}\n     * @memberof BaseMetric\n     */\n    protected name: string;\n    /**\n     * The description of this metric.\n     *\n     * @protected\n     * @type {string}\n     * @memberof BaseMetric\n     */\n    protected description: string;\n    /**\n     * The metadata associated with an instance of class.\n     *\n     * @protected\n     * @type {Map}\n     * @memberof BaseMetric\n     */\n    protected metadata: Map = new Map();\n\n    public getMetadataMap(): Map {\n        return this.metadata;\n    }\n\n    public getMetadata(name: string): T {\n        return this.metadata.get(name) as T;\n    }\n\n    public removeMetadata(name: string): T {\n        const value = this.metadata.get(name) as T;\n        this.metadata.delete(name);\n        return value;\n    }\n\n    public setMetadata(name: string, value: T): this {\n        this.metadata.set(name, value);\n        return this;\n    }\n\n    public getName(): string {\n        return this.name;\n    }\n\n    public setName(name: string): this {\n        this.name = name;\n        return this;\n    }\n\n    public getDescription(): string {\n        return this.description;\n    }\n\n    public setDescription(description: string): this {\n        this.description = description;\n        return this;\n    }\n\n    public getGroup(): string {\n        return this.group;\n    }\n\n    public setGroup(group: string): this {\n        this.group = group;\n        return this;\n    }\n\n    public getTags(): Map {\n        return this.tags;\n    }\n\n    public getTag(name: string): string {\n        return this.tags.get(name);\n    }\n\n    public setTag(name: string, value: string): this {\n        this.tags.set(name, value);\n        return this;\n    }\n\n    public setTags(tags: Map): this {\n        this.tags = tags;\n        return this;\n    }\n\n    public addTags(tags: Map): this {\n        tags.forEach((value, key) => this.tags.set(key, value));\n        return this;\n    }\n\n    public removeTag(name: string): this {\n        this.tags.delete(name);\n        return this;\n    }\n\n    public removeTags(...names: string[]): this {\n        names.forEach((name) => this.removeTag(name));\n        return this;\n    }\n\n    public toString(): string {\n        if (this.group) {\n            return `${this.group}.${this.name}`;\n        }\n        return this.name;\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BucketCounting.html":{"url":"interfaces/BucketCounting.html","title":"interface - BucketCounting","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  BucketCounting\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/counting.ts\n        \n\n            \n                Description\n            \n            \n                Interface for defining counting events based on Buckets.\nThe meaning of the countings is implementation-specific.\n\n            \n\n            \n                Extends\n            \n            \n                    Metric\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    getBuckets\n                                \n                                \n                                    getCounts\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getBuckets\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetBuckets()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/counting.ts:120\n                            \n                        \n\n\n                \n                    \n                            Gets the current Buckets object used to do the counting.\n\n\n                            \n                            \n                            \n                                Returns :     Buckets\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getCounts\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetCounts()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/counting.ts:130\n                            \n                        \n\n\n                \n                    \n                            Gets a mapping from the boundary to the count of events\nwithin the corresponding boundary.\nThe meaning of the count is implementation specific.\n\n\n                            \n                            \n                            \n                                Returns :     Map\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { Metric } from \"./metric\";\n\n/**\n * Represents everything that is countable ({@link Counter}, {@link MonotoneCounter}, {@link Histogram}).\n *\n * @export\n * @interface Counting\n * @extends {Metric}\n */\nexport interface Counting extends Metric {\n\n    /**\n     * Gets the current count - e.g. the number of samples in Histogram or the value of a counter.\n     *\n     * @returns {number}\n     * @memberof Counting\n     */\n    getCount(): number;\n\n}\n\n/**\n * Contains boundaries used to mark one end of a value range.\n *\n * @export\n * @class Buckets\n */\nexport class Buckets {\n\n    /**\n     * Creates a new Buckets object with linear-distributed values.\n     *\n     * @static\n     * @param {number} start\n     * @param {number} bucketWidth\n     * @param {number} count\n     * @param {number} [precision=10000]\n     * @returns {Buckets}\n     * @memberof Buckets\n     */\n    public static linear(start: number, bucketWidth: number, count: number, precision = 10000): Buckets {\n        const boundaries = new Array(count);\n        const buckets = new Buckets(boundaries);\n        for (let i = 0; i  a - b);\n    }\n\n}\n\n/**\n * Interface for defining counting events based on Buckets.\n * The meaning of the countings is implementation-specific.\n *\n * @export\n * @interface BucketCounting\n * @extends {Metric}\n */\nexport interface BucketCounting extends Metric {\n\n    /**\n     * Gets the current Buckets object used to do the counting.\n     *\n     * @returns {Buckets}\n     * @memberof BucketCounting\n     */\n    getBuckets(): Buckets;\n\n    /**\n     * Gets a mapping from the boundary to the count of events\n     * within the corresponding boundary.\n     * The meaning of the count is implementation specific.\n     *\n     * @returns {Map}\n     * @memberof BucketCounting\n     */\n    getCounts(): Map;\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Buckets.html":{"url":"classes/Buckets.html","title":"class - Buckets","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Buckets\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/counting.ts\n        \n\n            \n                Description\n            \n            \n                Contains boundaries used to mark one end of a value range.\n\n            \n\n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                boundaries\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                exponential\n                            \n                            \n                                    Static\n                                linear\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(boundaries: number[])\n                    \n                \n                        \n                            \n                                Defined in lib/metrics/counting.ts:88\n                            \n                        \n\n                \n                    \n                            Creates an instance of Buckets.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        boundaries\n                                                  \n                                                        \n                                                                    number[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            boundaries\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        boundaries:     number[]\n\n                    \n                \n                    \n                        \n                            Type :     number[]\n\n                        \n                    \n                    \n                        \n                            Default value : [0.005, 0.01, 0.025, 0.05, 0.1, 0.25, 0.5, 1, 2.5, 5, 10]\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/counting.ts:97\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            exponential\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        exponential(initial: number, factor: number, count: number, precision: number)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/counting.ts:67\n                            \n                        \n\n\n                \n                    \n                            Creates a new Buckets object with exponentially distributed values.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Default value\n                                            \n                                        \n                                        \n                                                \n                                                        initial\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n\n                                                \n                                                \n                                                        factor\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n\n                                                \n                                                \n                                                        count\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n\n                                                \n                                                \n                                                        precision\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                10000\n                                                        \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Buckets\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            linear\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        linear(start: number, bucketWidth: number, count: number, precision: number)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/counting.ts:43\n                            \n                        \n\n\n                \n                    \n                            Creates a new Buckets object with linear-distributed values.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Default value\n                                            \n                                        \n                                        \n                                                \n                                                        start\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n\n                                                \n                                                \n                                                        bucketWidth\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n\n                                                \n                                                \n                                                        count\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n\n                                                \n                                                \n                                                        precision\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                10000\n                                                        \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Buckets\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { Metric } from \"./metric\";\n\n/**\n * Represents everything that is countable ({@link Counter}, {@link MonotoneCounter}, {@link Histogram}).\n *\n * @export\n * @interface Counting\n * @extends {Metric}\n */\nexport interface Counting extends Metric {\n\n    /**\n     * Gets the current count - e.g. the number of samples in Histogram or the value of a counter.\n     *\n     * @returns {number}\n     * @memberof Counting\n     */\n    getCount(): number;\n\n}\n\n/**\n * Contains boundaries used to mark one end of a value range.\n *\n * @export\n * @class Buckets\n */\nexport class Buckets {\n\n    /**\n     * Creates a new Buckets object with linear-distributed values.\n     *\n     * @static\n     * @param {number} start\n     * @param {number} bucketWidth\n     * @param {number} count\n     * @param {number} [precision=10000]\n     * @returns {Buckets}\n     * @memberof Buckets\n     */\n    public static linear(start: number, bucketWidth: number, count: number, precision = 10000): Buckets {\n        const boundaries = new Array(count);\n        const buckets = new Buckets(boundaries);\n        for (let i = 0; i  a - b);\n    }\n\n}\n\n/**\n * Interface for defining counting events based on Buckets.\n * The meaning of the countings is implementation-specific.\n *\n * @export\n * @interface BucketCounting\n * @extends {Metric}\n */\nexport interface BucketCounting extends Metric {\n\n    /**\n     * Gets the current Buckets object used to do the counting.\n     *\n     * @returns {Buckets}\n     * @memberof BucketCounting\n     */\n    getBuckets(): Buckets;\n\n    /**\n     * Gets a mapping from the boundary to the count of events\n     * within the corresponding boundary.\n     * The meaning of the count is implementation specific.\n     *\n     * @returns {Map}\n     * @memberof BucketCounting\n     */\n    getCounts(): Map;\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Clock.html":{"url":"classes/Clock.html","title":"class - Clock","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Clock\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/clock.ts\n        \n\n            \n                Description\n            \n            \n                Abstraction of a clock. Used to determine progress in time.\n\n            \n\n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Abstract\n                                time\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Abstract\n                            time\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        time()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/clock.ts:49\n                            \n                        \n\n\n                \n                    \n                            Gets the current point in time according to the logic of the clock implementation.\n\n\n                            \n                            \n                            \n                                Returns :     Time\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\n/**\n * Represents a point in time.\n *\n * @export\n * @interface Time\n */\nexport interface Time {\n    milliseconds: number;\n    nanoseconds: number;\n}\n\n/**\n * Gets the time elapsed from parameter one to parameter two in nanoseconds.\n *\n * Also assumes that the first point in time is older than the second point in time.\n *\n * @export\n * @param {Time} one time sample\n * @param {Time} two time sample\n * @returns {number} a duration in nanoseconds\n */\nexport function diff(one: Time, two: Time): number {\n    if (!one || !two) {\n        return 0;\n    }\n    const oneValue: number = one.nanoseconds + one.milliseconds * 1000000;\n    const twoValue: number = two.nanoseconds + two.milliseconds * 1000000;\n    return twoValue - oneValue;\n}\n\n/**\n * Abstraction of a clock. Used to determine progress in time.\n *\n * @export\n * @abstract\n * @class Clock\n */\nexport abstract class Clock {\n\n    /**\n     * Gets the current point in time according to the logic of the clock implementation.\n     *\n     * @abstract\n     * @returns {Time}\n     * @memberof Clock\n     */\n    public abstract time(): Time;\n\n}\n\n/**\n * Default implementation of a Clock. Uses Date.now() as source of truth.\n *\n * @export\n * @class StdClock\n * @extends {Clock}\n */\nexport class StdClock extends Clock {\n\n    /**\n     * Returns a Time object whos nanoseconds component is always zero.\n     *\n     * @returns {Time}\n     * @memberof StdClock\n     */\n    public time(): Time {\n        const time = {\n            milliseconds: Date.now(),\n            nanoseconds: 0,\n        };\n        return time;\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Counting.html":{"url":"interfaces/Counting.html","title":"interface - Counting","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Counting\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/counting.ts\n        \n\n            \n                Description\n            \n            \n                Represents everything that is countable (Counter, MonotoneCounter, Histogram).\n\n            \n\n            \n                Extends\n            \n            \n                    Metric\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    getCount\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getCount\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetCount()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/counting.ts:20\n                            \n                        \n\n\n                \n                    \n                            Gets the current count - e.g. the number of samples in Histogram or the value of a counter.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { Metric } from \"./metric\";\n\n/**\n * Represents everything that is countable ({@link Counter}, {@link MonotoneCounter}, {@link Histogram}).\n *\n * @export\n * @interface Counting\n * @extends {Metric}\n */\nexport interface Counting extends Metric {\n\n    /**\n     * Gets the current count - e.g. the number of samples in Histogram or the value of a counter.\n     *\n     * @returns {number}\n     * @memberof Counting\n     */\n    getCount(): number;\n\n}\n\n/**\n * Contains boundaries used to mark one end of a value range.\n *\n * @export\n * @class Buckets\n */\nexport class Buckets {\n\n    /**\n     * Creates a new Buckets object with linear-distributed values.\n     *\n     * @static\n     * @param {number} start\n     * @param {number} bucketWidth\n     * @param {number} count\n     * @param {number} [precision=10000]\n     * @returns {Buckets}\n     * @memberof Buckets\n     */\n    public static linear(start: number, bucketWidth: number, count: number, precision = 10000): Buckets {\n        const boundaries = new Array(count);\n        const buckets = new Buckets(boundaries);\n        for (let i = 0; i  a - b);\n    }\n\n}\n\n/**\n * Interface for defining counting events based on Buckets.\n * The meaning of the countings is implementation-specific.\n *\n * @export\n * @interface BucketCounting\n * @extends {Metric}\n */\nexport interface BucketCounting extends Metric {\n\n    /**\n     * Gets the current Buckets object used to do the counting.\n     *\n     * @returns {Buckets}\n     * @memberof BucketCounting\n     */\n    getBuckets(): Buckets;\n\n    /**\n     * Gets a mapping from the boundary to the count of events\n     * within the corresponding boundary.\n     * The meaning of the count is implementation specific.\n     *\n     * @returns {Map}\n     * @memberof BucketCounting\n     */\n    getCounts(): Map;\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DefaultReservoir.html":{"url":"classes/DefaultReservoir.html","title":"class - DefaultReservoir","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DefaultReservoir\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/reservoir.ts\n        \n\n            \n                Description\n            \n            \n                Simple implementation of a reservoir.\nIt has a maximum number of values, if the maximum\nis reached old values are replaced by new values.\n\n            \n\n\n            \n                Implements\n            \n            \n                        Reservoir\n            \n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                maxSize\n                            \n                            \n                                    Private\n                                values\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                size\n                            \n                            \n                                    Public\n                                snapshot\n                            \n                            \n                                    Public\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(maxSize: number)\n                    \n                \n                        \n                            \n                                Defined in lib/metrics/reservoir.ts:66\n                            \n                        \n\n                \n                    \n                            Creates an instance of DefaultReservoir.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        maxSize\n                                                  \n                                                        \n                                                                    number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            maxSize\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        maxSize:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/reservoir.ts:66\n                            \n                        \n\n                \n                    \n                        The capacity of this reservoir.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            values\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        values:     number[]\n\n                    \n                \n                    \n                        \n                            Type :     number[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/reservoir.ts:58\n                            \n                        \n\n                \n                    \n                        The values.\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            size\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        size()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/reservoir.ts:84\n                            \n                        \n\n\n                \n                    \n                            Gets the actual number of value, but at max the specified maximum.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            snapshot\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        snapshot()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/reservoir.ts:113\n                            \n                        \n\n\n                \n                    \n                            Creates a new snapshot instance.\n\n\n                            \n                            \n                            \n                                Returns :     Snapshot\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            update\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        update(value: number)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/reservoir.ts:97\n                            \n                        \n\n\n                \n                    \n                            Adds the value to the array of numbers until the maximum number of\nvalues is reached. If the maximum number of values is reached\nan old value at a random position is replaced with the specified value.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        value\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { SimpleSnapshot, Snapshot } from \"./snapshot\";\n\n/**\n * Represents a collection of values.\n *\n * @export\n * @interface Reservoir\n */\nexport interface Reservoir {\n\n    /**\n     * Gets the capacity of this reservoir.\n     *\n     * @returns {number}\n     * @memberof Reservoir\n     */\n    size(): number;\n\n    /**\n     * Adds a value to the reservoir.\n     *\n     * @param {number} value\n     * @returns {this}\n     * @memberof Reservoir\n     */\n    update(value: number): this;\n\n    /**\n     * Creates a new snapshot of this reservoir.\n     *\n     * @returns {Snapshot}\n     * @memberof Reservoir\n     */\n    snapshot(): Snapshot;\n\n}\n\n/**\n * Simple implementation of a reservoir.\n * It has a maximum number of values, if the maximum\n * is reached old values are replaced by new values.\n *\n * @export\n * @class DefaultReservoir\n * @implements {Reservoir}\n */\nexport class DefaultReservoir implements Reservoir {\n\n    /**\n     * The values.\n     *\n     * @private\n     * @type {number[]}\n     * @memberof DefaultReservoir\n     */\n    private values: number[] = [];\n    /**\n     * The capacity of this reservoir.\n     *\n     * @private\n     * @type {number}\n     * @memberof DefaultReservoir\n     */\n    private maxSize: number;\n\n    /**\n     * Creates an instance of DefaultReservoir.\n     *\n     * @param {number} maxSize\n     * @memberof DefaultReservoir\n     */\n    public constructor(maxSize: number) {\n        this.maxSize = maxSize;\n    }\n\n    /**\n     * Gets the actual number of value, but at max the specified maximum.\n     *\n     * @returns {number}\n     * @memberof DefaultReservoir\n     */\n    public size(): number {\n        return this.values.length;\n    }\n\n    /**\n     * Adds the value to the array of numbers until the maximum number of\n     * values is reached. If the maximum number of values is reached\n     * an old value at a random position is replaced with the specified value.\n     *\n     * @param {number} value\n     * @returns {this}\n     * @memberof DefaultReservoir\n     */\n    public update(value: number): this {\n        if (this.values.length \n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExponentiallyWeightedMovingAverage.html":{"url":"classes/ExponentiallyWeightedMovingAverage.html","title":"class - ExponentiallyWeightedMovingAverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExponentiallyWeightedMovingAverage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/moving-average.ts\n        \n\n            \n                Description\n            \n            \n                Calculates the moving average with an exponential alpha value.\n\n            \n\n\n            \n                Implements\n            \n            \n                        MovingAverage\n            \n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                alpha\n                            \n                            \n                                    Static\n                                ALPHA_1_MINUTE_1_SECOND_SAMPLERATE\n                            \n                            \n                                    Static\n                                ALPHA_1_MINUTE_5_SECOND_SAMPLERATE\n                            \n                            \n                                    Static\n                                ALPHA_15_MINUTE_1_SECOND_SAMPLERATE\n                            \n                            \n                                    Static\n                                ALPHA_15_MINUTE_5_SECOND_SAMPLERATE\n                            \n                            \n                                    Static\n                                ALPHA_5_MINUTE_1_SECOND_SAMPLERATE\n                            \n                            \n                                    Static\n                                ALPHA_5_MINUTE_5_SECOND_SAMPLERATE\n                            \n                            \n                                    Private\n                                avg\n                            \n                            \n                                    Private\n                                interval\n                            \n                            \n                                    Private\n                                sum\n                            \n                            \n                                    Private\n                                timeUnitInNanoseconds\n                            \n                            \n                                    Private\n                                unit\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getAlpha\n                            \n                            \n                                    Public\n                                getAverage\n                            \n                            \n                                    Public\n                                getUnit\n                            \n                            \n                                    Public\n                                tick\n                            \n                            \n                                    Public\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(alpha: number, interval: number, unit: TimeUnit)\n                    \n                \n                        \n                            \n                                Defined in lib/metrics/moving-average.ts:113\n                            \n                        \n\n                \n                    \n                            Creates an instance of ExponentiallyWeightedMovingAverage.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        alpha\n                                                  \n                                                        \n                                                                    number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        interval\n                                                  \n                                                        \n                                                                    number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        unit\n                                                  \n                                                        \n                                                                    TimeUnit\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            alpha\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        alpha:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/moving-average.ts:73\n                            \n                        \n\n                \n                    \n                        Alpha component (weight) of the moving average.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            ALPHA_1_MINUTE_1_SECOND_SAMPLERATE\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        ALPHA_1_MINUTE_1_SECOND_SAMPLERATE:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                    \n                        \n                            Default value : 1 - Math.exp(-(1 / 60))\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/moving-average.ts:59\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            ALPHA_1_MINUTE_5_SECOND_SAMPLERATE\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        ALPHA_1_MINUTE_5_SECOND_SAMPLERATE:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                    \n                        \n                            Default value : 1 - Math.exp(-(5 / 60))\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/moving-average.ts:60\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            ALPHA_15_MINUTE_1_SECOND_SAMPLERATE\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        ALPHA_15_MINUTE_1_SECOND_SAMPLERATE:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                    \n                        \n                            Default value : 1 - Math.exp(-(1 / (60 * 15)))\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/moving-average.ts:63\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            ALPHA_15_MINUTE_5_SECOND_SAMPLERATE\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        ALPHA_15_MINUTE_5_SECOND_SAMPLERATE:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                    \n                        \n                            Default value : 1 - Math.exp(-(5 / (60 * 15)))\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/moving-average.ts:64\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            ALPHA_5_MINUTE_1_SECOND_SAMPLERATE\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        ALPHA_5_MINUTE_1_SECOND_SAMPLERATE:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                    \n                        \n                            Default value : 1 - Math.exp(-(1 / (60 * 5)))\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/moving-average.ts:61\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            ALPHA_5_MINUTE_5_SECOND_SAMPLERATE\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        ALPHA_5_MINUTE_5_SECOND_SAMPLERATE:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                    \n                        \n                            Default value : 1 - Math.exp(-(5 / (60 * 5)))\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/moving-average.ts:62\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            avg\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        avg:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                    \n                        \n                            Default value : -1.0\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/moving-average.ts:97\n                            \n                        \n\n                \n                    \n                        The current average.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            interval\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        interval:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/moving-average.ts:81\n                            \n                        \n\n                \n                    \n                        The sampling interval.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            sum\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        sum:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/moving-average.ts:89\n                            \n                        \n\n                \n                    \n                        The sum of all values passed to the update function.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            timeUnitInNanoseconds\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        timeUnitInNanoseconds:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/moving-average.ts:105\n                            \n                        \n\n                \n                    \n                        Multiplier of the time unit specified in the constructor in nanoseconds.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            unit\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        unit:     TimeUnit\n\n                    \n                \n                    \n                        \n                            Type :     TimeUnit\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/moving-average.ts:113\n                            \n                        \n\n                \n                    \n                        The time unit of the sampling rate.\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getAlpha\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getAlpha()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/moving-average.ts:136\n                            \n                        \n\n\n                \n                    \n                            Gets the alpha value.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getAverage\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getAverage(unit: TimeUnit)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/moving-average.ts:157\n                            \n                        \n\n\n                \n                    \n                            Gets the average in the specified time unit.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        unit\n                                                        \n                                                                    TimeUnit\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getUnit\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getUnit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/moving-average.ts:146\n                            \n                        \n\n\n                \n                    \n                            Gets the time unit.\n\n\n                            \n                            \n                            \n                                Returns :     TimeUnit\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            tick\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        tick()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/moving-average.ts:187\n                            \n                        \n\n\n                \n                    \n                            Updates the current average by multiplying the alpha value with the difference\nof the last average and the current average.\nAverages are calculated by dividing the sum through the sampling interval.\nIf the alpha value is high the last average has more weight and vice versa.\n\n\n                            \n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            update\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        update(value: number)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/moving-average.ts:171\n                            \n                        \n\n\n                \n                    \n                            Adds the value to the current sum.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        value\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { NANOSECOND, TimeUnit } from \"./time-unit\";\n\n/**\n * Represents an average value which depends on an alpha factor.\n *\n * @export\n * @interface MovingAverage\n */\nexport interface MovingAverage {\n\n    /**\n     * Gets the alpha value.\n     *\n     * @returns {number}\n     * @memberof MovingAverage\n     */\n    getAlpha(): number;\n\n    /**\n     * Gets the average for the specified time unit -\n     * e.g. 500 per second or 0.5 per millisecond or 30.000 per minute.\n     *\n     * @param {TimeUnit} unit\n     * @returns {number}\n     * @memberof MovingAverage\n     */\n    getAverage(unit: TimeUnit): number;\n\n    /**\n     * Adds the given value to the logic of the implementation.\n     *\n     * @param {number} value\n     * @returns {this}\n     * @memberof MovingAverage\n     */\n    update(value: number): this;\n\n    /**\n     * Triggers the actual average to be updated.\n     * A tick represents an update event.\n     *\n     * @returns {this}\n     * @memberof MovingAverage\n     */\n    tick(): this;\n}\n\n/**\n * Calculates the moving average with an exponential alpha value.\n *\n * @export\n * @class ExponentiallyWeightedMovingAverage\n * @implements {MovingAverage}\n */\nexport class ExponentiallyWeightedMovingAverage implements MovingAverage {\n\n    public static ALPHA_1_MINUTE_1_SECOND_SAMPLERATE: number = 1 - Math.exp(-(1 / 60));\n    public static ALPHA_1_MINUTE_5_SECOND_SAMPLERATE: number = 1 - Math.exp(-(5 / 60));\n    public static ALPHA_5_MINUTE_1_SECOND_SAMPLERATE: number = 1 - Math.exp(-(1 / (60 * 5)));\n    public static ALPHA_5_MINUTE_5_SECOND_SAMPLERATE: number = 1 - Math.exp(-(5 / (60 * 5)));\n    public static ALPHA_15_MINUTE_1_SECOND_SAMPLERATE: number = 1 - Math.exp(-(1 / (60 * 15)));\n    public static ALPHA_15_MINUTE_5_SECOND_SAMPLERATE: number = 1 - Math.exp(-(5 / (60 * 15)));\n\n    /**\n     * Alpha component (weight) of the moving average.\n     *\n     * @private\n     * @type {number}\n     * @memberof ExponentiallyWeightedMovingAverage\n     */\n    private alpha: number;\n    /**\n     * The sampling interval.\n     *\n     * @private\n     * @type {number}\n     * @memberof ExponentiallyWeightedMovingAverage\n     */\n    private interval: number;\n    /**\n     * The sum of all values passed to the update function.\n     *\n     * @private\n     * @type {number}\n     * @memberof ExponentiallyWeightedMovingAverage\n     */\n    private sum: number = 0;\n    /**\n     * The current average.\n     *\n     * @private\n     * @type {number}\n     * @memberof ExponentiallyWeightedMovingAverage\n     */\n    private avg: number = -1.0;\n    /**\n     * Multiplier of the time unit specified in the constructor in nanoseconds.\n     *\n     * @private\n     * @type {number}\n     * @memberof ExponentiallyWeightedMovingAverage\n     */\n    private timeUnitInNanoseconds: number;\n    /**\n     * The time unit of the sampling rate.\n     *\n     * @private\n     * @type {TimeUnit}\n     * @memberof ExponentiallyWeightedMovingAverage\n     */\n    private unit: TimeUnit;\n\n    /**\n     * Creates an instance of ExponentiallyWeightedMovingAverage.\n     *\n     * @param {number} alpha\n     * @param {number} interval\n     * @param {TimeUnit} unit\n     * @memberof ExponentiallyWeightedMovingAverage\n     */\n    public constructor(alpha: number, interval: number, unit: TimeUnit) {\n        this.alpha = alpha;\n        this.interval = interval;\n        this.unit = unit;\n        this.timeUnitInNanoseconds = unit.convertTo(interval, NANOSECOND);\n    }\n\n    /**\n     * Gets the alpha value.\n     *\n     * @returns {number}\n     * @memberof ExponentiallyWeightedMovingAverage\n     */\n    public getAlpha(): number {\n        return this.alpha;\n    }\n\n    /**\n     * Gets the time unit.\n     *\n     * @returns {TimeUnit}\n     * @memberof ExponentiallyWeightedMovingAverage\n     */\n    public getUnit(): TimeUnit {\n        return this.unit;\n    }\n\n    /**\n     * Gets the average in the specified time unit.\n     *\n     * @param {TimeUnit} unit\n     * @returns {number}\n     * @memberof ExponentiallyWeightedMovingAverage\n     */\n    public getAverage(unit: TimeUnit): number {\n        if (this.avg === -1.0) {\n            return 0;\n        }\n        return this.avg * NANOSECOND.convertTo(this.timeUnitInNanoseconds, unit);\n    }\n\n    /**\n     * Adds the value to the current sum.\n     *\n     * @param {number} value\n     * @returns {this}\n     * @memberof ExponentiallyWeightedMovingAverage\n     */\n    public update(value: number): this {\n        this.sum += value;\n        return this;\n    }\n\n    /**\n     * Updates the current average by multiplying the alpha value with the difference\n     * of the last average and the current average.\n     *\n     * Averages are calculated by dividing the sum through the sampling interval.\n     *\n     * If the alpha value is high the last average has more weight and vice versa.\n     *\n     * @returns {this}\n     * @memberof ExponentiallyWeightedMovingAverage\n     */\n    public tick(): this {\n        const sum = this.sum;\n        const avg = sum / this.interval;\n        this.sum -= sum;\n\n        if (this.avg === -1.0) {\n            this.avg = avg;\n        } else {\n            this.avg += this.alpha * (avg - this.avg);\n        }\n        return this;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Gauge.html":{"url":"interfaces/Gauge.html","title":"interface - Gauge","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Gauge\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/gauge.ts\n        \n\n            \n                Description\n            \n            \n                A gauge can represent any value - regardless of the type.\n\n            \n\n            \n                Extends\n            \n            \n                    Metric\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    getValue\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getValue\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetValue()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/gauge.ts:21\n                            \n                        \n\n\n                \n                    \n                            Gets the current value of the gauge.\n\n\n                            \n                            \n                            \n                                Returns :     T\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { BaseMetric, Metric } from \"./metric\";\n\n/**\n * A gauge can represent any value - regardless of the type.\n *\n * @export\n * @interface Gauge\n * @extends {Metric}\n * @template T\n */\nexport interface Gauge extends Metric {\n\n    /**\n     * Gets the current value of the gauge.\n     *\n     * @returns {T}\n     * @memberof Gauge\n     */\n    getValue(): T;\n\n}\n\n/**\n * A simple number-base gauge - e.g. for reporting the current size of an array or map or queue.\n *\n * @export\n * @class SimpleGauge\n * @extends {BaseMetric}\n * @implements {Gauge}\n */\nexport class SimpleGauge extends BaseMetric implements Gauge {\n\n    /**\n     * The value - initially set to 0.\n     *\n     * @private\n     * @type {number}\n     * @memberof SimpleGauge\n     */\n    private value: number = 0;\n\n    /**\n     * Creates an instance of SimpleGauge with an optional name.\n     *\n     * @param {string} [name] optional metric name.\n     * @param {string} [description] optional metric description.\n     * @memberof SimpleGauge\n     */\n    public constructor(name?: string, description?: string) {\n        super();\n        this.name = name;\n        this.description = description;\n    }\n\n    /**\n     * Gets the current value.\n     *\n     * @returns {number}\n     * @memberof SimpleGauge\n     */\n    public getValue(): number {\n        return this.value;\n    }\n\n    /**\n     * Sets the current value.\n     *\n     * @param {number} value\n     * @returns {this}\n     * @memberof SimpleGauge\n     */\n    public setValue(value: number): this {\n        this.value = value;\n        return this;\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Groupable.html":{"url":"interfaces/Groupable.html","title":"interface - Groupable","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Groupable\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/groupable.ts\n        \n\n            \n                Description\n            \n            \n                Name-based (string) grouping interface - the group as metadata\nof a metric is used in some metric-reporter.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    getGroup\n                                \n                                \n                                    setGroup\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getGroup\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetGroup()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/groupable.ts:18\n                            \n                        \n\n\n                \n                    \n                            Gets the group name.\n\n\n                            \n                            \n                            \n                                Returns :     string\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            setGroup\n                            \n                            \n                        \n                    \n                \n                \n                    \nsetGroup(group: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/groupable.ts:27\n                            \n                        \n\n\n                \n                    \n                            Sets the group name.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        group\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                the new group name\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\n/**\n * Name-based (string) grouping interface - the group as metadata\n * of a metric is used in some metric-reporter.\n *\n * @export\n * @interface Groupable\n */\nexport interface Groupable {\n\n    /**\n     * Gets the group name.\n     *\n     * @returns {string}\n     * @memberof Groupable\n     */\n    getGroup(): string;\n\n    /**\n     * Sets the group name.\n     *\n     * @param {string} group the new group name\n     * @returns {this}\n     * @memberof Groupable\n     */\n    setGroup(group: string): this;\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HdrSnapshot.html":{"url":"classes/HdrSnapshot.html","title":"class - HdrSnapshot","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HdrSnapshot\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/hdr-histogram.ts\n        \n\n            \n                Description\n            \n            \n                Snapshot implementation for a HdrHistogram reference.\n\n            \n\n\n            \n                Implements\n            \n            \n                        Snapshot\n            \n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                get75thPercentile\n                            \n                            \n                                    Public\n                                get95thPercentile\n                            \n                            \n                                    Public\n                                get98thPercentile\n                            \n                            \n                                    Public\n                                get999thPercentile\n                            \n                            \n                                    Public\n                                get99thPercentile\n                            \n                            \n                                    Public\n                                getMax\n                            \n                            \n                                    Public\n                                getMean\n                            \n                            \n                                    Public\n                                getMedian\n                            \n                            \n                                    Public\n                                getMin\n                            \n                            \n                                    Public\n                                getStdDev\n                            \n                            \n                                    Public\n                                getValue\n                            \n                            \n                                    Public\n                                getValues\n                            \n                            \n                                    Public\n                                size\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(reference: any)\n                    \n                \n                        \n                            \n                                Defined in lib/metrics/hdr-histogram.ts:26\n                            \n                        \n\n                \n                    \n                            Creates an instance of HdrSnapshot.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reference\n                                                  \n                                                        \n                                                                    any\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            get75thPercentile\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        get75thPercentile()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/hdr-histogram.ts:43\n                            \n                        \n\n\n                \n                    \n                            Calls the native hrd-histogram implementation of the\nreferenced HdrHistogram for the 75th percentile.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            get95thPercentile\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        get95thPercentile()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/hdr-histogram.ts:54\n                            \n                        \n\n\n                \n                    \n                            Calls the native hrd-histogram implementation of the\nreferenced HdrHistogram for the 95th percentile.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            get98thPercentile\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        get98thPercentile()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/hdr-histogram.ts:65\n                            \n                        \n\n\n                \n                    \n                            Calls the native hrd-histogram implementation of the\nreferenced HdrHistogram for the 98th percentile.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            get999thPercentile\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        get999thPercentile()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/hdr-histogram.ts:76\n                            \n                        \n\n\n                \n                    \n                            Calls the native hrd-histogram implementation of the\nreferenced HdrHistogram for the 99.9th percentile.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            get99thPercentile\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        get99thPercentile()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/hdr-histogram.ts:87\n                            \n                        \n\n\n                \n                    \n                            Calls the native hrd-histogram implementation of the\nreferenced HdrHistogram for the 99th percentile.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getMax\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getMax()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/hdr-histogram.ts:109\n                            \n                        \n\n\n                \n                    \n                            Calls the native hrd-histogram implementation of the\nreferenced HdrHistogram for the max value - if NaN returns 0.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getMean\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getMean()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/hdr-histogram.ts:151\n                            \n                        \n\n\n                \n                    \n                            Calls the native hrd-histogram implementation of the\nreferenced HdrHistogram for the mean value - if NaN returns 0.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getMedian\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getMedian()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/hdr-histogram.ts:98\n                            \n                        \n\n\n                \n                    \n                            Calls the native hrd-histogram implementation of the\nreferenced HdrHistogram for the 50th percentile.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getMin\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getMin()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/hdr-histogram.ts:120\n                            \n                        \n\n\n                \n                    \n                            Calls the native hrd-histogram implementation of the\nreferenced HdrHistogram for the min value - if NaN returns 0.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getStdDev\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getStdDev()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/hdr-histogram.ts:162\n                            \n                        \n\n\n                \n                    \n                            Calls the native hrd-histogram implementation of the\nreferenced HdrHistogram for the standard deviation - if NaN returns 0.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getValue\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getValue(quantile: number)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/hdr-histogram.ts:173\n                            \n                        \n\n\n                \n                    \n                            Calls the native hrd-histogram implementation of the\nreferenced HdrHistogram for the given percentile.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        quantile\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getValues\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getValues()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/hdr-histogram.ts:130\n                            \n                        \n\n\n                \n                    \n                            Always returns an empty array.\n\n\n                            \n                            \n                            \n                                Returns :     number[]\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            size\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        size()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/hdr-histogram.ts:140\n                            \n                        \n\n\n                \n                    \n                            Returns the count of all values recorded.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { BucketCounting, Buckets, Counting } from \"./counting\";\nimport { Histogram } from \"./histogram\";\nimport { Metric } from \"./metric\";\nimport { Sampling } from \"./sampling\";\nimport { Snapshot } from \"./snapshot\";\nimport { Summarizing } from \"./summarizing\";\n\n/**\n * The 'native-hdr-histogram' module (optional).\n */\nlet NativeHistogram: any = null;\ntry {\n    NativeHistogram = require(\"native-hdr-histogram\");\n} catch (e) {\n}\n\n/**\n * Snapshot implementation for a {@link HdrHistogram} reference.\n *\n * @export\n * @class HdrSnapshot\n * @implements {Snapshot}\n */\nexport class HdrSnapshot implements Snapshot {\n\n    /**\n     * Creates an instance of HdrSnapshot.\n     * @param {*} reference\n     * @memberof HdrSnapshot\n     */\n    public constructor(private reference: any) {\n    }\n\n    /**\n     * Calls the native hrd-histogram implementation of the\n     * referenced {@link HdrHistogram} for the 75th percentile.\n     *\n     * @returns {number}\n     * @memberof HdrSnapshot\n     */\n    public get75thPercentile(): number {\n        return this.reference.histogram.percentile(75);\n    }\n\n    /**\n     * Calls the native hrd-histogram implementation of the\n     * referenced {@link HdrHistogram} for the 95th percentile.\n     *\n     * @returns {number}\n     * @memberof HdrSnapshot\n     */\n    public get95thPercentile(): number {\n        return this.reference.histogram.percentile(95);\n    }\n\n    /**\n     * Calls the native hrd-histogram implementation of the\n     * referenced {@link HdrHistogram} for the 98th percentile.\n     *\n     * @returns {number}\n     * @memberof HdrSnapshot\n     */\n    public get98thPercentile(): number {\n        return this.reference.histogram.percentile(98);\n    }\n\n    /**\n     * Calls the native hrd-histogram implementation of the\n     * referenced {@link HdrHistogram} for the 99.9th percentile.\n     *\n     * @returns {number}\n     * @memberof HdrSnapshot\n     */\n    public get999thPercentile(): number {\n        return this.reference.histogram.percentile(99.9);\n    }\n\n    /**\n     * Calls the native hrd-histogram implementation of the\n     * referenced {@link HdrHistogram} for the 99th percentile.\n     *\n     * @returns {number}\n     * @memberof HdrSnapshot\n     */\n    public get99thPercentile(): number {\n        return this.reference.histogram.percentile(99);\n    }\n\n    /**\n     * Calls the native hrd-histogram implementation of the\n     * referenced {@link HdrHistogram} for the 50th percentile.\n     *\n     * @returns {number}\n     * @memberof HdrSnapshot\n     */\n    public getMedian(): number {\n        return this.reference.histogram.percentile(50);\n    }\n\n    /**\n     * Calls the native hrd-histogram implementation of the\n     * referenced {@link HdrHistogram} for the max value - if NaN returns 0.\n     *\n     * @returns {number}\n     * @memberof HdrSnapshot\n     */\n    public getMax(): number {\n        return this.reference.histogram.max() || 0;\n    }\n\n    /**\n     * Calls the native hrd-histogram implementation of the\n     * referenced {@link HdrHistogram} for the min value - if NaN returns 0.\n     *\n     * @returns {number}\n     * @memberof HdrSnapshot\n     */\n    public getMin(): number {\n        return this.reference.histogram.min() || 0;\n    }\n\n    /**\n     * Always returns an empty array.\n     *\n     * @returns {number[]}\n     * @memberof HdrSnapshot\n     */\n    public getValues(): number[] {\n        return [];\n    }\n\n    /**\n     * Returns the count of all values recorded.\n     *\n     * @returns {number}\n     * @memberof HdrSnapshot\n     */\n    public size(): number {\n        return this.reference.getCount();\n    }\n\n    /**\n     * Calls the native hrd-histogram implementation of the\n     * referenced {@link HdrHistogram} for the mean value - if NaN returns 0.\n     *\n     * @returns {number}\n     * @memberof HdrSnapshot\n     */\n    public getMean(): number {\n        return this.reference.histogram.mean() || 0;\n    }\n\n    /**\n     * Calls the native hrd-histogram implementation of the\n     * referenced {@link HdrHistogram} for the standard deviation - if NaN returns 0.\n     *\n     * @returns {number}\n     * @memberof HdrSnapshot\n     */\n    public getStdDev(): number {\n        return this.reference.histogram.stddev() || 0;\n    }\n\n    /**\n     * Calls the native hrd-histogram implementation of the\n     * referenced {@link HdrHistogram} for the given percentile.\n     *\n     * @returns {number}\n     * @memberof HdrSnapshot\n     */\n    public getValue(quantile: number): number {\n        return this.reference.histogram.percentile(quantile * 100.0);\n    }\n\n}\n\n/**\n * Wrapper implementation for the native hdr-histogram provided by 'native-hdr-histogram' module.\n *\n * @export\n * @class HdrHistogram\n * @extends {Histogram}\n * @implements {BucketCounting}\n * @implements {Counting}\n * @implements {Metric}\n * @implements {Sampling}\n * @implements {Summarizing}\n */\nexport class HdrHistogram extends Histogram implements BucketCounting, Counting, Metric, Sampling, Summarizing {\n\n    /**\n     * histogram instance.\n     *\n     * @private\n     * @type {*}\n     * @memberof HdrHistogram\n     */\n    private histogram: any;\n    /**\n     * Snapshot instance.\n     *\n     * @private\n     * @type {HdrSnapshot}\n     * @memberof HdrHistogram\n     */\n    private snapshot: HdrSnapshot;\n\n    /**\n     * Creates an instance of HdrHistogram.\n     * Throws anerror if the 'native-hdr-histogram' module is not installed.\n     *\n     * @param {number} [lowest=1] is the lowest possible number that can be recorded\n     * @param {number} [max=100] is the maximum number that can be recorded\n     * @param {number} [figures=3]\n     *      the number of figures in a decimal number that will be maintained, must be between 1 and 5 (inclusive)\n     * @param {string} [name]\n     * @param {string} [description]\n     * @param {Buckets} [buckets=new Buckets()]\n     * @memberof HdrHistogram\n     */\n    public constructor(\n        lowest: number = 1,\n        max: number = 100,\n        figures: number = 3,\n        name?: string,\n        description?: string,\n        buckets: Buckets = new Buckets()) {\n        super(null, name, description, buckets);\n\n        if (!NativeHistogram) {\n            throw new Error(\"Module 'native-hdr-histogram' not found. \" +\n                            \"Please install the optional dependencies of 'inspector-metrics' module.\");\n        }\n\n        this.histogram = new NativeHistogram(lowest, max, figures);\n        this.snapshot = new HdrSnapshot(this);\n    }\n\n    /**\n     * Gets the snapshot instance.\n     *\n     * @returns {Snapshot}\n     * @memberof HdrHistogram\n     */\n    public getSnapshot(): Snapshot {\n        return this.snapshot;\n    }\n\n    /**\n     * Updates the histogram, all counters and th overall sum with the given value.\n     *\n     * @param {number} value\n     * @returns {this}\n     * @memberof HdrHistogram\n     */\n    public update(value: number): this {\n        this.count++;\n        this.sum.add(value);\n        for (const boundary of this.buckets.boundaries) {\n            if (value \n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IMetricReporter.html":{"url":"interfaces/IMetricReporter.html","title":"interface - IMetricReporter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IMetricReporter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/reporter/metric-reporter.ts\n        \n\n            \n                Description\n            \n            \n                Interface for metric-reporter.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    addMetricRegistry\n                                \n                                \n                                    flushEvents\n                                \n                                \n                                    getTags\n                                \n                                \n                                    removeMetricRegistry\n                                \n                                \n                                    reportEvent\n                                \n                                \n                                    setTags\n                                \n                                \n                                    start\n                                \n                                \n                                    stop\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            addMetricRegistry\n                            \n                            \n                        \n                    \n                \n                \n                    \naddMetricRegistry(metricRegistry: MetricRegistry)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/reporter/metric-reporter.ts:171\n                            \n                        \n\n\n                \n                    \n                            Adds a new MetricRegistry to be reported.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        metricRegistry\n                                                        \n                                                                    MetricRegistry\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            flushEvents\n                            \n                            \n                        \n                    \n                \n                \n                    \nflushEvents()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/reporter/metric-reporter.ts:206\n                            \n                        \n\n\n                \n                    \n                            Sends events remaining in the queue (if a queue is used in the implementation).\n\n\n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getTags\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetTags()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/reporter/metric-reporter.ts:135\n                            \n                        \n\n\n                \n                    \n                            Gets the reporter tags.\n\n\n                            \n                            \n                            \n                                Returns :     Map\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            removeMetricRegistry\n                            \n                            \n                        \n                    \n                \n                \n                    \nremoveMetricRegistry(metricRegistry: MetricRegistry)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/reporter/metric-reporter.ts:180\n                            \n                        \n\n\n                \n                    \n                            Removes the given MetricRegistry if it was previously added.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        metricRegistry\n                                                        \n                                                                    MetricRegistry\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            reportEvent\n                            \n                            \n                        \n                    \n                \n                \n                    \nreportEvent(event: TEvent)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/reporter/metric-reporter.ts:198\n                            \n                        \n\n                        \n                            \n                                Type parameters :\n                                \n                                        TEventData\n                                        TEvent\n                                \n                            \n                        \n\n                \n                    \n                            Reports an Event.\nImplementations can choose how to process ad-hoc events, wether it's\nqueuing the events to the next call to report or sending events\nimmediately.\nAlso the usual reporting process of calling #beforeReport, do the reporting\nand call #afterReport may not be applied for ad-hoc events.\nThis implementation does nothing and always resolved the specified evnet.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        event\n                                                        \n                                                                    TEvent\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            setTags\n                            \n                            \n                        \n                    \n                \n                \n                    \nsetTags(tags: Map)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/reporter/metric-reporter.ts:144\n                            \n                        \n\n\n                \n                    \n                            Sets the reporter tags.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        tags\n                                                        \n                                                                    Map\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            start\n                            \n                            \n                        \n                    \n                \n                \n                    \nstart()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/reporter/metric-reporter.ts:153\n                            \n                        \n\n\n                \n                    \n                            Implementations start reporting metrics when called.\n\n\n                            \n                            \n                            \n                                Returns :     Promise<>\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            stop\n                            \n                            \n                        \n                    \n                \n                \n                    \nstop()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/reporter/metric-reporter.ts:162\n                            \n                        \n\n\n                \n                    \n                            Implementations stop reporting metrics when called.\n\n\n                            \n                            \n                            \n                                Returns :     Promise<>\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { Clock } from \"../clock\";\nimport { Counter, MonotoneCounter } from \"../counter\";\nimport { Event } from \"../event\";\nimport { Gauge } from \"../gauge\";\nimport { Histogram } from \"../histogram\";\nimport { Meter } from \"../meter\";\nimport { Metric } from \"../metric\";\nimport { MetricRegistry } from \"../metric-registry\";\nimport { Taggable } from \"../taggable\";\nimport { MILLISECOND, MINUTE } from \"../time-unit\";\nimport { Timer } from \"../timer\";\nimport { MetricEntry } from \"./metric-entry\";\nimport { MetricType } from \"./metric-type\";\n\n/**\n * Helper interface for handling tags.\n */\nexport interface Tags {\n    [key: string]: string;\n}\n\n/**\n * Helper interface for a reporting run.\n */\nexport interface OverallReportContext {\n    [key: string]: any;\n}\n\n/**\n * Helper interface for reporting runs.\n */\nexport interface MetricSetReportContext {\n    /**\n     * The OverallReportContext this context is running in.\n     *\n     * @type {OverallReportContext}\n     * @memberof ReportingContext\n     */\n    overallCtx: OverallReportContext;\n    /**\n     * The array of metric instance that is currently reported.\n     *\n     * @type {M[]}\n     * @memberof ReportingContext\n     */\n    metrics: M[];\n    /**\n     * The registry the metric are registered in.\n     *\n     * @type {MetricRegistry}\n     * @memberof ReportingContext\n     */\n    readonly registry: MetricRegistry;\n    /**\n     * The current date.\n     *\n     * @type {Date}\n     * @memberof ReportingContext\n     */\n    readonly date: Date;\n    /**\n     * The type of the metrics in the {@link #metrics} array.\n     *\n     * @type {MetricType}\n     * @memberof ReportingContext\n     */\n    readonly type: MetricType;\n}\n\n/**\n * Helper interface for reporting results.\n */\nexport interface ReportingResult {\n    /**\n     * The metric the result refers to.\n     *\n     * @type {M}\n     * @memberof ReportingResult\n     */\n    readonly metric: M;\n    /**\n     * The reporting result - implementation specific.\n     *\n     * @type {T}\n     * @memberof ReportingResult\n     */\n    readonly result: T;\n}\n\n/**\n * Options for the {@link MetricReporter}.\n *\n * @export\n * @interface MetricReporterOptions\n */\nexport interface MetricReporterOptions {\n    /**\n     * Clock used to determine the date for the reporting as well as the minimum-reporting timeout feature.\n     *\n     * @type {Clock}\n     * @memberof MetricReporterOptions\n     */\n    readonly clock?: Clock;\n    /**\n     * Timeout in minutes a metric need to be included in the report without having changed.\n     *\n     * @type {number}\n     * @memberof MetricReporterOptions\n     */\n    minReportingTimeout?: number;\n    /**\n     * Tags for this reporter instance - to be combined with the tags of each metric while reporting.\n     *\n     * @type {Map}\n     * @memberof MetricReporterOptions\n     */\n    tags?: Map;\n}\n\n/**\n * Interface for metric-reporter.\n *\n * @export\n * @interface IMetricReporter\n */\nexport interface IMetricReporter {\n    /**\n     * Gets the reporter tags.\n     *\n     * @returns {Map}\n     * @memberof IMetricReporter\n     */\n    getTags(): Map;\n\n    /**\n     * Sets the reporter tags.\n     *\n     * @param {Map} tags\n     * @returns {this}\n     * @memberof IMetricReporter\n     */\n    setTags(tags: Map): this;\n\n    /**\n     * Implementations start reporting metrics when called.\n     *\n     * @abstract\n     * @returns {Promise}\n     * @memberof IMetricReporter\n     */\n    start(): Promise;\n\n    /**\n     * Implementations stop reporting metrics when called.\n     *\n     * @abstract\n     * @returns {Promise}\n     * @memberof IMetricReporter\n     */\n    stop(): Promise;\n\n    /**\n     * Adds a new {@link MetricRegistry} to be reported.\n     *\n     * @param {MetricRegistry} metricRegistry\n     * @returns {this}\n     * @memberof IMetricReporter\n     */\n    addMetricRegistry(metricRegistry: MetricRegistry): this;\n\n    /**\n     * Removes the given {@link MetricRegistry} if it was previously added.\n     *\n     * @param {MetricRegistry} metricRegistry\n     * @returns {this}\n     * @memberof IMetricReporter\n     */\n    removeMetricRegistry(metricRegistry: MetricRegistry): this;\n\n    /**\n     * Reports an {@link Event}.\n     *\n     * Implementations can choose how to process ad-hoc events, wether it's\n     * queuing the events to the next call to report or sending events\n     * immediately.\n     *\n     * Also the usual reporting process of calling {@link #beforeReport}, do the reporting\n     * and call {@link #afterReport} may not be applied for ad-hoc events.\n     *\n     * This implementation does nothing and always resolved the specified evnet.\n     *\n     * @param {MetricRegistry} event\n     * @returns {this}\n     * @memberof IMetricReporter\n     */\n    reportEvent>(event: TEvent): Promise;\n\n    /**\n     * Sends events remaining in the queue (if a queue is used in the implementation).\n     *\n     * @returns {Promise}\n     * @memberof IMetricReporter\n     */\n    flushEvents(): Promise;\n}\n\n/**\n * Base-class for metric-reporter implementations.\n *\n * @export\n * @abstract\n * @class MetricReporter\n */\nexport abstract class MetricReporter implements IMetricReporter {\n\n    /**\n     * {@link MetricRegistry} instances.\n     *\n     * @protected\n     * @type {MetricRegistry[]}\n     * @memberof MetricReporter\n     */\n    protected readonly metricRegistries: MetricRegistry[] = [];\n    /**\n     * options for this reporter instance.\n     *\n     * @protected\n     * @type {O}\n     * @memberof MetricReporter\n     */\n    protected readonly options: O;\n    /**\n     * Keeps track of the reporting states for each metric.\n     *\n     * @protected\n     * @type {Map}\n     * @memberof MetricReporter\n     */\n    protected readonly metricStates: Map = new Map();\n\n    /**\n     * Creates an instance of MetricReporter.\n     *\n     * @param {O} options\n     * @param {Map} [tags=new Map()]\n     *          tags for this reporter instance - to be combined with the tags of each metric while reporting\n     * @param {Clock} [clock=new StdClock()]\n     *          clock used to determine the date for the reporting as well as the minimum-reporting timeout feature\n     * @param {number} [minReportingTimeout=1]\n     *          timeout in minutes a metric need to be included in the report without having changed\n     * @memberof MetricReporter\n     */\n    public constructor(options: O) {\n        this.options = options;\n    }\n\n    /**\n     * Gets the reporter tags.\n     *\n     * @returns {Map}\n     * @memberof MetricReporter\n     */\n    public getTags(): Map {\n        return this.options.tags;\n    }\n\n    /**\n     * Sets the reporter tags.\n     *\n     * @param {Map} tags\n     * @returns {this}\n     * @memberof MetricReporter\n     */\n    public setTags(tags: Map): this {\n        this.options.tags = tags;\n        return this;\n    }\n\n    /**\n     * Implementations start reporting metrics when called.\n     *\n     * @abstract\n     * @returns {Promise}\n     * @memberof MetricReporter\n     */\n    public abstract start(): Promise;\n\n    /**\n     * Implementations stop reporting metrics when called.\n     *\n     * @abstract\n     * @returns {Promise}\n     * @memberof MetricReporter\n     */\n    public abstract stop(): Promise;\n\n    /**\n     * Adds a new {@link MetricRegistry} to be reported.\n     *\n     * @param {MetricRegistry} metricRegistry\n     * @returns {this}\n     * @memberof MetricReporter\n     */\n    public addMetricRegistry(metricRegistry: MetricRegistry): this {\n        this.metricRegistries.push(metricRegistry);\n        return this;\n    }\n\n    /**\n     * Removes the given {@link MetricRegistry} if it was previously added.\n     *\n     * @param {MetricRegistry} metricRegistry\n     * @returns {this}\n     * @memberof MetricReporter\n     */\n    public removeMetricRegistry(metricRegistry: MetricRegistry): this {\n        const index: number = this.metricRegistries.indexOf(metricRegistry);\n        if (index > -1) {\n            this.metricRegistries.splice(index, 1);\n        }\n        return this;\n    }\n\n    /**\n     * Reports an {@link Event}.\n     *\n     * Implementations can choose how to process ad-hoc events, wether it's\n     * queuing the events to the next call to report or sending events\n     * immediately.\n     *\n     * Also the usual reporting process of calling {@link #beforeReport}, do the reporting\n     * and call {@link #afterReport} may not be applied for ad-hoc events.\n     *\n     * This implementation does nothing and always resolved the specified event.\n     *\n     * @param {Event} event\n     * @returns {Promise}\n     * @memberof MetricReporter\n     */\n    public async reportEvent>(event: TEvent): Promise {\n        return event;\n    }\n\n    /**\n     * Sends events remaining in the queue (if a queue is used in the implementation).\n     *\n     * @returns {Promise}\n     * @memberof MetricReporter\n     */\n    public async flushEvents(): Promise {\n    }\n\n    /**\n     * Called be before each reporting run.\n     *\n     * @protected\n     * @memberof MetricReporter\n     */\n    protected async beforeReport(ctx: OverallReportContext) {\n    }\n\n    /**\n     * Called after each reporting run.\n     *\n     * @protected\n     * @memberof MetricReporter\n     */\n    protected async afterReport(ctx: OverallReportContext) {\n    }\n\n    /**\n     * Run the reporting procedures. Calls {@link #beforeReport} before each\n     * {@link MetricRegistry}'s metrics are reported and {@link #afterReport}\n     * afterwards.\n     *\n     * @protected\n     * @memberof MetricReporter\n     */\n    protected async report(): Promise {\n        if (this.metricRegistries && this.metricRegistries.length > 0) {\n            const ctx = this.createOverallReportContext();\n            await this.beforeReport(ctx);\n            for (const registry of this.metricRegistries) {\n                await this.reportMetricRegistry(ctx, registry);\n            }\n            await this.afterReport(ctx);\n            return ctx;\n        }\n        return {};\n    }\n\n    /**\n     * Reporting function for a sinlge {@link MetricRegistry}.\n     * Calls {@link #createReportingContext} for each metric type.\n     * Afterwarsds calls {@link #reportMetrics} for each of the\n     * registry's metrics - grouped by type.\n     * And finally calls {@link #handleResults} for each of the results.\n     *\n     * @protected\n     * @param {MetricRegistry} registry\n     * @memberof MetricReporter\n     */\n    protected async reportMetricRegistry(ctx: OverallReportContext, registry: MetricRegistry) {\n        const date: Date = new Date(this.options.clock.time().milliseconds);\n        const counterCtx: MetricSetReportContext = this\n            .createMetricSetReportContext(ctx, registry, date, \"counter\");\n        const gaugeCtx: MetricSetReportContext> = this\n            .createMetricSetReportContext(ctx, registry, date, \"gauge\");\n        const histogramCtx: MetricSetReportContext = this\n            .createMetricSetReportContext(ctx, registry, date, \"histogram\");\n        const meterCtx: MetricSetReportContext = this\n            .createMetricSetReportContext(ctx, registry, date, \"meter\");\n        const timerCtx: MetricSetReportContext = this\n            .createMetricSetReportContext(ctx, registry, date, \"timer\");\n\n        counterCtx.metrics = registry.getMonotoneCounterList();\n        const monotoneCounterResults = this.reportMetrics(ctx, counterCtx,\n            (counter: MonotoneCounter) => this.reportCounter(counter, counterCtx),\n            (counter: MonotoneCounter) => counter.getCount());\n\n        counterCtx.metrics = registry.getCounterList();\n        const counterResults = this.reportMetrics(ctx, counterCtx as MetricSetReportContext,\n            (counter: Counter) => this.reportCounter(counter, counterCtx),\n            (counter: Counter) => counter.getCount());\n\n        gaugeCtx.metrics = registry.getGaugeList();\n        const gaugeResults = this.reportMetrics(ctx, gaugeCtx,\n            (gauge: Gauge) => this.reportGauge(gauge, gaugeCtx),\n            (gauge: Gauge) => gauge.getValue());\n\n        histogramCtx.metrics = registry.getHistogramList();\n        const histogramResults = this.reportMetrics(ctx, histogramCtx,\n            (histogram: Histogram) => this.reportHistogram(histogram, histogramCtx),\n            (histogram: Histogram) => histogram.getCount());\n\n        meterCtx.metrics = registry.getMeterList();\n        const meterResults = this.reportMetrics(ctx, meterCtx,\n            (meter: Meter) => this.reportMeter(meter, meterCtx),\n            (meter: Meter) => meter.getCount());\n\n        timerCtx.metrics = registry.getTimerList();\n        const timerResults = this.reportMetrics(ctx, timerCtx,\n            (timer: Timer) => this.reportTimer(timer, timerCtx),\n            (timer: Timer) => timer.getCount());\n\n        await this.handleResults(ctx, registry, date, \"counter\", monotoneCounterResults);\n        await this.handleResults(ctx, registry, date, \"counter\", counterResults);\n        await this.handleResults(ctx, registry, date, \"gauge\", gaugeResults);\n        await this.handleResults(ctx, registry, date, \"histogram\", histogramResults);\n        await this.handleResults(ctx, registry, date, \"meter\", meterResults);\n        await this.handleResults(ctx, registry, date, \"timer\", timerResults);\n    }\n\n    /**\n     * Creates an OverallReportContext.\n     *\n     * @protected\n     * @returns {OverallReportContext}\n     * @memberof MetricReporter\n     */\n    protected createOverallReportContext(): OverallReportContext {\n        return {\n        };\n    }\n\n    /**\n     * Creates a MetricSetReportContext with the specified arguments.\n     *\n     * @protected\n     * @param {OverallReportContext} overallCtx\n     * @param {MetricRegistry} registry\n     * @param {Date} date\n     * @param {MetricType} type\n     * @returns {MetricSetReportContext}\n     * @memberof MetricReporter\n     */\n    protected createMetricSetReportContext(\n        overallCtx: OverallReportContext,\n        registry: MetricRegistry,\n        date: Date,\n        type: MetricType): MetricSetReportContext {\n        return {\n            date,\n            metrics: [],\n            overallCtx,\n            registry,\n            type,\n        };\n    }\n\n    /**\n     * Filters out each metric that does not necessarily need to be reported\n     * and calls the specified reporting function for the remaining.\n     *\n     * @protected\n     * @template M type of the metric\n     * @template C typed ReportingContext\n     * @param {C} ctx\n     * @param {(metric: M, ctx: C) => T} reportFunction\n     * @param {(metric: M, ctx: C) => number} lastModifiedFunction\n     * @returns {Array>}\n     * @memberof MetricReporter\n     */\n    protected reportMetrics>(\n        overallCtx: OverallReportContext,\n        ctx: C,\n        reportFunction: (metric: M, ctx: C) => T,\n        lastModifiedFunction: (metric: M, ctx: C) => number): Array> {\n\n        return ctx.metrics\n            .filter((metric) => {\n                const metricId = (metric as any).id;\n                return !metricId || this.hasChanged(metricId, lastModifiedFunction(metric, ctx), ctx.date.getTime());\n            })\n            .map((metric) => ({\n                metric,\n                result: reportFunction(metric, ctx),\n            }))\n            .filter((result) => !!result.result);\n    }\n\n    /**\n     * Handles the reporting result for a group of metric instances.\n     *\n     * @protected\n     * @abstract\n     * @param {OverallReportContext} ctx\n     * @param {MetricRegistry} registry\n     * @param {Date} date\n     * @param {MetricType} type\n     * @param {Array>} results\n     * @returns {Promise}\n     * @memberof MetricReporter\n     */\n    protected abstract handleResults(\n        ctx: OverallReportContext,\n        registry: MetricRegistry,\n        date: Date,\n        type: MetricType,\n        results: Array>): Promise;\n\n    /**\n     * Does the reporting for a counter or monotone counter.\n     *\n     * @protected\n     * @abstract\n     * @param {(MonotoneCounter | Counter)} counter\n     * @param {(MetricSetReportContext)} ctx\n     * @returns {T}\n     * @memberof MetricReporter\n     */\n    protected abstract reportCounter(\n        counter: MonotoneCounter | Counter, ctx: MetricSetReportContext): T;\n\n    /**\n     * Does the reporting for a gauge.\n     *\n     * @protected\n     * @abstract\n     * @param {Gauge} gauge\n     * @param {MetricSetReportContext>} ctx\n     * @returns {T}\n     * @memberof MetricReporter\n     */\n    protected abstract reportGauge(gauge: Gauge, ctx: MetricSetReportContext>): T;\n\n    /**\n     * Does the reporting for a histogram.\n     *\n     * @protected\n     * @abstract\n     * @param {Histogram} histogram\n     * @param {MetricSetReportContext} ctx\n     * @returns {T}\n     * @memberof MetricReporter\n     */\n    protected abstract reportHistogram(histogram: Histogram, ctx: MetricSetReportContext): T;\n\n    /**\n     * Does the reporting for a meter.\n     *\n     * @protected\n     * @abstract\n     * @param {Meter} meter\n     * @param {MetricSetReportContext} ctx\n     * @returns {T}\n     * @memberof MetricReporter\n     */\n    protected abstract reportMeter(meter: Meter, ctx: MetricSetReportContext): T;\n\n    /**\n     * Does the reporting for a timer.\n     *\n     * @protected\n     * @abstract\n     * @param {Timer} timer\n     * @param {MetricSetReportContext} ctx\n     * @returns {T}\n     * @memberof MetricReporter\n     */\n    protected abstract reportTimer(timer: Timer, ctx: MetricSetReportContext): T;\n\n    /**\n     * Determines if a metric instance has changed it's value since the last check.\n     * This is always true if the minimal-reporting timeout was reached.\n     *\n     * @private\n     * @param {number} metricId\n     * @param {number} lastValue\n     * @param {number} date\n     * @returns {boolean}\n     * @memberof MetricReporter\n     */\n    protected hasChanged(metricId: number, lastValue: number, date: number): boolean {\n        let changed = true;\n        let metricEntry = {\n            lastReport: 0,\n            lastValue,\n        };\n        if (this.metricStates.has(metricId)) {\n            metricEntry = this.metricStates.get(metricId);\n            changed = metricEntry.lastValue !== lastValue;\n            if (!changed) {\n                const minReportingTimeout = MINUTE.convertTo(this.options.minReportingTimeout, MILLISECOND);\n                changed = metricEntry.lastReport + minReportingTimeout  tags[key] = tag);\n        }\n        if (registry && registry.getTags()) {\n            registry.getTags().forEach((tag, key) => tags[key] = tag);\n        }\n        if (taggable.getTags()) {\n            taggable.getTags().forEach((tag, key) => tags[key] = tag);\n        }\n        return tags;\n    }\n\n    /**\n     * Checks the number and gives it back or zero (0) if it's not a number.\n     *\n     * @protected\n     * @param {number} value\n     * @returns {number}\n     * @memberof MetricReporter\n     */\n    protected getNumber(value: number): number {\n        if (isNaN(value)) {\n            return 0;\n        }\n        return value;\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Int64Wrapper.html":{"url":"classes/Int64Wrapper.html","title":"class - Int64Wrapper","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Int64Wrapper\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/int64.ts\n        \n\n            \n                Description\n            \n            \n                Wrapper class for a native int64_t value.\n\n            \n\n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                num\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                add\n                            \n                            \n                                    Public\n                                toNumber\n                            \n                            \n                                    Public\n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(initial: number)\n                    \n                \n                        \n                            \n                                Defined in lib/metrics/int64.ts:21\n                            \n                        \n\n                \n                    \n                            Creates an instance of Int64Wrapper.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        initial\n                                                  \n                                                        \n                                                                    number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            num\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        num:     any\n\n                    \n                \n                    \n                        \n                            Type :     any\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/int64.ts:21\n                            \n                        \n\n                \n                    \n                        int64_t value instance.\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            add\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        add(value: number)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/int64.ts:40\n                            \n                        \n\n\n                \n                    \n                            Adds the specified value.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        value\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            toNumber\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        toNumber()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/int64.ts:51\n                            \n                        \n\n\n                \n                    \n                            Gets the 64bit value as javascript 32bit signed integer.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            toString\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        toString()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/int64.ts:61\n                            \n                        \n\n\n                \n                    \n                            Converts the 64bit integer to it's string representation.\n\n\n                            \n                            \n                            \n                                Returns :     string\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        const Int64 = require(\"node-cint64\").Int64;\n\n/**\n * Wrapper class for a native int64_t value.\n *\n * @export\n * @class Int64Wrapper\n */\nexport class Int64Wrapper {\n\n    /**\n     * int64_t value instance.\n     *\n     * @private\n     * @type {*}\n     * @memberof Int64Wrapper\n     */\n    private num: any;\n\n    /**\n     * Creates an instance of Int64Wrapper.\n     *\n     * @param {number} [initial=0]\n     * @memberof Int64Wrapper\n     */\n    public constructor(initial: number = 0) {\n        this.num = new Int64(initial);\n    }\n\n    /**\n     * Adds the specified value.\n     *\n     * @param {number} value\n     * @returns {this}\n     * @memberof Int64Wrapper\n     */\n    public add(value: number): this {\n        this.num = this.num.add(value);\n        return this;\n    }\n\n    /**\n     * Gets the 64bit value as javascript 32bit signed integer.\n     *\n     * @returns {number}\n     * @memberof Int64Wrapper\n     */\n    public toNumber(): number {\n        return this.num.toNumber();\n    }\n\n    /**\n     * Converts the 64bit integer to it's string representation.\n     *\n     * @returns {string}\n     * @memberof Int64Wrapper\n     */\n    public toString(): string {\n        return this.num.toString();\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LengthAttributeInterface.html":{"url":"interfaces/LengthAttributeInterface.html","title":"interface - LengthAttributeInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  LengthAttributeInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/size-gauge.ts\n        \n\n            \n                Description\n            \n            \n                Accessor-interface for objects with \"length\" attribute (e.g. Array).\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        length\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        length\n                                    \n                                \n                                \n                                    \n                                        length:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { Gauge } from \"./gauge\";\nimport { BaseMetric } from \"./metric\";\n\n/**\n * Accessor-interface for objects with \"length()\" method.\n *\n * @export\n * @interface LengthMethodInterface\n */\nexport interface LengthMethodInterface {\n    length(): number;\n}\n\n/**\n * Accessor-interface for objects with \"length\" attribute (e.g. Array).\n *\n * @export\n * @interface LengthAttributeInterface\n */\nexport interface LengthAttributeInterface {\n    length: number;\n}\n\n/**\n * Accessor-interface for objects with \"size\" method.\n *\n * @export\n * @interface SizeMethodInterface\n */\nexport interface SizeMethodInterface {\n    size(): number;\n}\n\n/**\n * Accessor-interface for objects with \"size\" attribute (e.g. Map, Set).\n *\n * @export\n * @interface SizeAttributeInterface\n */\nexport interface SizeAttributeInterface {\n    size: number;\n}\n\ntype ValueExtractor = () => number;\n\n/**\n * Gets the current size / length of an object as gauge metric.\n *\n * @export\n * @class SizeGauge\n * @extends {BaseMetric}\n * @implements {Gauge}\n */\nexport class SizeGauge extends BaseMetric implements Gauge {\n\n    /**\n     * Checks if the specified collection is a {link LengthAttributeInterface}.\n     *\n     * @protected\n     * @static\n     * @param {*} collection\n     * @returns {collection is LengthAttributeInterface}\n     * @memberof SizeGauge\n     */\n    protected static isLengthAttributeInterface(collection: any): collection is LengthAttributeInterface {\n        return collection && typeof collection.length === \"number\";\n    }\n\n    /**\n     * Checks if the specified collection is a {link LengthMethodInterface}.\n     *\n     * @protected\n     * @static\n     * @param {*} collection\n     * @returns {collection is LengthMethodInterface}\n     * @memberof SizeGauge\n     */\n    protected static isLengthMethodInterface(collection: any): collection is LengthMethodInterface {\n        return collection && typeof collection.length === \"function\";\n    }\n\n    /**\n     * Checks if the specified collection is a {link SizeAttributeInterface}.\n     *\n     * @protected\n     * @static\n     * @param {*} collection\n     * @returns {collection is SizeAttributeInterface}\n     * @memberof SizeGauge\n     */\n    protected static isSizeAttributeInterface(collection: any): collection is SizeAttributeInterface {\n        return collection && typeof collection.size === \"number\";\n    }\n\n    /**\n     * Checks if the specified collection is a {link SizeMethodInterface}.\n     *\n     * @protected\n     * @static\n     * @param {*} collection\n     * @returns {collection is SizeMethodInterface}\n     * @memberof SizeGauge\n     */\n    protected static isSizeMethodInterface(collection: any): collection is SizeMethodInterface {\n        return collection && typeof collection.size === \"function\";\n    }\n\n    /**\n     * Gets the actual value for the collection passed to the constructor.\n     *\n     * @private\n     * @type {ValueExtractor}\n     * @memberof SizeGauge\n     */\n    private extractor: ValueExtractor;\n\n    /**\n     * Creates an instance of SizeGauge.\n     *\n     * @param {string} name The name of the metric\n     * @param collection The collection to get the size / length from.\n     * @param {string} [description] The description of the metric\n     * @memberof SizeGauge\n     */\n    public constructor(\n        name: string,\n        collection: LengthAttributeInterface | LengthMethodInterface | SizeAttributeInterface | SizeMethodInterface,\n        description?: string) {\n\n        super();\n        this.setName(name);\n        this.setDescription(description);\n\n        if (SizeGauge.isLengthAttributeInterface(collection)) {\n            this.extractor = () => collection.length;\n        } else if (SizeGauge.isLengthMethodInterface(collection)) {\n            this.extractor = () => collection.length();\n        } else if (SizeGauge.isSizeAttributeInterface(collection)) {\n            this.extractor = () => collection.size;\n        } else if (SizeGauge.isSizeMethodInterface(collection)) {\n            this.extractor = () => collection.size();\n        } else {\n            this.extractor = () => -1;\n        }\n    }\n\n    /**\n     * Reports the size / length of the collection.\n     *\n     * @returns {number} Returns the current size of the collection or -1.\n     * @memberof SizeGauge\n     */\n    public getValue(): number {\n        return this.extractor();\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LengthMethodInterface.html":{"url":"interfaces/LengthMethodInterface.html","title":"interface - LengthMethodInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  LengthMethodInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/size-gauge.ts\n        \n\n            \n                Description\n            \n            \n                Accessor-interface for objects with \"length()\" method.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    length\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            length\n                            \n                            \n                        \n                    \n                \n                \n                    \nlength()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/size-gauge.ts:13\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     number\n\n                            \n                    \n                \n            \n        \n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { Gauge } from \"./gauge\";\nimport { BaseMetric } from \"./metric\";\n\n/**\n * Accessor-interface for objects with \"length()\" method.\n *\n * @export\n * @interface LengthMethodInterface\n */\nexport interface LengthMethodInterface {\n    length(): number;\n}\n\n/**\n * Accessor-interface for objects with \"length\" attribute (e.g. Array).\n *\n * @export\n * @interface LengthAttributeInterface\n */\nexport interface LengthAttributeInterface {\n    length: number;\n}\n\n/**\n * Accessor-interface for objects with \"size\" method.\n *\n * @export\n * @interface SizeMethodInterface\n */\nexport interface SizeMethodInterface {\n    size(): number;\n}\n\n/**\n * Accessor-interface for objects with \"size\" attribute (e.g. Map, Set).\n *\n * @export\n * @interface SizeAttributeInterface\n */\nexport interface SizeAttributeInterface {\n    size: number;\n}\n\ntype ValueExtractor = () => number;\n\n/**\n * Gets the current size / length of an object as gauge metric.\n *\n * @export\n * @class SizeGauge\n * @extends {BaseMetric}\n * @implements {Gauge}\n */\nexport class SizeGauge extends BaseMetric implements Gauge {\n\n    /**\n     * Checks if the specified collection is a {link LengthAttributeInterface}.\n     *\n     * @protected\n     * @static\n     * @param {*} collection\n     * @returns {collection is LengthAttributeInterface}\n     * @memberof SizeGauge\n     */\n    protected static isLengthAttributeInterface(collection: any): collection is LengthAttributeInterface {\n        return collection && typeof collection.length === \"number\";\n    }\n\n    /**\n     * Checks if the specified collection is a {link LengthMethodInterface}.\n     *\n     * @protected\n     * @static\n     * @param {*} collection\n     * @returns {collection is LengthMethodInterface}\n     * @memberof SizeGauge\n     */\n    protected static isLengthMethodInterface(collection: any): collection is LengthMethodInterface {\n        return collection && typeof collection.length === \"function\";\n    }\n\n    /**\n     * Checks if the specified collection is a {link SizeAttributeInterface}.\n     *\n     * @protected\n     * @static\n     * @param {*} collection\n     * @returns {collection is SizeAttributeInterface}\n     * @memberof SizeGauge\n     */\n    protected static isSizeAttributeInterface(collection: any): collection is SizeAttributeInterface {\n        return collection && typeof collection.size === \"number\";\n    }\n\n    /**\n     * Checks if the specified collection is a {link SizeMethodInterface}.\n     *\n     * @protected\n     * @static\n     * @param {*} collection\n     * @returns {collection is SizeMethodInterface}\n     * @memberof SizeGauge\n     */\n    protected static isSizeMethodInterface(collection: any): collection is SizeMethodInterface {\n        return collection && typeof collection.size === \"function\";\n    }\n\n    /**\n     * Gets the actual value for the collection passed to the constructor.\n     *\n     * @private\n     * @type {ValueExtractor}\n     * @memberof SizeGauge\n     */\n    private extractor: ValueExtractor;\n\n    /**\n     * Creates an instance of SizeGauge.\n     *\n     * @param {string} name The name of the metric\n     * @param collection The collection to get the size / length from.\n     * @param {string} [description] The description of the metric\n     * @memberof SizeGauge\n     */\n    public constructor(\n        name: string,\n        collection: LengthAttributeInterface | LengthMethodInterface | SizeAttributeInterface | SizeMethodInterface,\n        description?: string) {\n\n        super();\n        this.setName(name);\n        this.setDescription(description);\n\n        if (SizeGauge.isLengthAttributeInterface(collection)) {\n            this.extractor = () => collection.length;\n        } else if (SizeGauge.isLengthMethodInterface(collection)) {\n            this.extractor = () => collection.length();\n        } else if (SizeGauge.isSizeAttributeInterface(collection)) {\n            this.extractor = () => collection.size;\n        } else if (SizeGauge.isSizeMethodInterface(collection)) {\n            this.extractor = () => collection.size();\n        } else {\n            this.extractor = () => -1;\n        }\n    }\n\n    /**\n     * Reports the size / length of the collection.\n     *\n     * @returns {number} Returns the current size of the collection or -1.\n     * @memberof SizeGauge\n     */\n    public getValue(): number {\n        return this.extractor();\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LogLine.html":{"url":"interfaces/LogLine.html","title":"interface - LogLine","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  LogLine\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/reporter/logger-reporter.ts\n        \n\n            \n                Description\n            \n            \n                Helper interface to abstract a log-line.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        message\n                                \n                                \n                                        metadata\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                    \n                                \n                                \n                                    \n                                        message:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Message string passed to the logger instance.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        metadata\n                                    \n                                \n                                \n                                    \n                                        metadata:     any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     any\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Metadata passed to the logger instance as second parameter.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { StdClock } from \"../clock\";\nimport { Counter, MonotoneCounter } from \"../counter\";\nimport { Event } from \"../event\";\nimport { Gauge } from \"../gauge\";\nimport { Histogram } from \"../histogram\";\nimport { Meter } from \"../meter\";\nimport { MetricRegistry } from \"../metric-registry\";\nimport { MILLISECOND } from \"../time-unit\";\nimport { Timer } from \"../timer\";\nimport { Logger } from \"./logger\";\nimport { MetricSetReportContext, OverallReportContext, ReportingResult } from \"./metric-reporter\";\nimport { MetricType } from \"./metric-type\";\nimport { ScheduledMetricReporter, ScheduledMetricReporterOptions } from \"./scheduled-reporter\";\n\n/**\n * Helper interface to abstract a log-line.\n *\n * @interface LogLine\n */\ninterface LogLine {\n    /**\n     * Message string passed to the logger instance.\n     *\n     * @type {string}\n     * @memberof LogLine\n     */\n    message: string;\n    /**\n     * Metadata passed to the logger instance as second parameter.\n     *\n     * @type {*}\n     * @memberof LogLine\n     */\n    metadata: any;\n}\n\n/**\n * Helper interface for the reporting context.\n *\n * @interface LoggerReportingContext\n * @extends {MetricSetReportContext}\n * @template M\n */\ninterface LoggerReportingContext extends MetricSetReportContext {\n    /**\n     * Common log metadata to extend.\n     *\n     * @type {*}\n     * @memberof LoggerReportingContext\n     */\n    readonly logMetadata: any;\n}\n\n/**\n * Options for {@link LoggerReporter}.\n *\n * @export\n * @class LoggerReporterOptions\n * @implements {ScheduledMetricReporterOptions}\n */\nexport interface LoggerReporterOptions extends ScheduledMetricReporterOptions {\n    /**\n     * The logger instance used to report metrics.\n     *\n     * @type {Logger}\n     * @memberof LoggerReporterOptions\n     */\n    log?: Logger;\n}\n\n/**\n * Standard implementation of a {@link MetricReporter} that uses a {@link Logger} instance.\n *\n * @export\n * @class LoggerReporter\n * @extends {MetricReporter}\n */\nexport class LoggerReporter extends ScheduledMetricReporter {\n\n    /**\n     * The metadata object passed to the {@link Logger} instance.\n     *\n     * @private\n     * @type {*}\n     * @memberof LoggerReporter\n     */\n    private logMetadata: any;\n\n    /**\n     * Creates an instance of LoggerReporter.\n     *\n     * @memberof LoggerReporter\n     */\n    public constructor({\n        log = console,\n        reportInterval = 1000,\n        unit = MILLISECOND,\n        clock = new StdClock(),\n        scheduler = setInterval,\n        minReportingTimeout = 1,\n        tags = new Map(),\n    }: LoggerReporterOptions) {\n        super({\n            clock,\n            log,\n            minReportingTimeout,\n            reportInterval,\n            scheduler,\n            tags,\n            unit,\n        });\n        this.logMetadata = {\n            reportInterval,\n            tags,\n            unit,\n        };\n    }\n\n    /**\n     * Gets the {@link Logger} instance.\n     *\n     * @returns {Logger}\n     * @memberof LoggerReporter\n     */\n    public getLog(): Logger {\n        return this.options.log;\n    }\n\n    /**\n     * Sets the {@link Logger} instance.\n     *\n     * @param {Logger} log\n     * @returns {this}\n     * @memberof LoggerReporter\n     */\n    public setLog(log: Logger): this {\n        this.options.log = log;\n        return this;\n    }\n\n    /**\n     * Prints the specified event immediately to the logger at 'info' level.\n     *\n     * @template TEventData\n     * @template TEvent\n     * @param {TEvent} event\n     * @returns {Promise}\n     * @memberof LoggerReporter\n     */\n    public async reportEvent>(event: TEvent): Promise {\n        const ctx: LoggerReportingContext = this\n            .createMetricSetReportContext({}, null, event.getTime(), \"gauge\");\n        const logLine: LogLine = this.reportGauge(event, ctx);\n        if (logLine) {\n            this.options.log.info(logLine.message, logLine.metadata);\n        }\n        return event;\n    }\n\n    /**\n     * Creates a new {@link LoggerReportingContext} using the speicifed arguments.\n     *\n     * @protected\n     * @param {OverallReportContext} overallCtx\n     * @param {MetricRegistry} registry\n     * @param {Date} date\n     * @param {MetricType} type\n     * @returns {LoggerReportingContext}\n     * @memberof LoggerReporter\n     */\n    protected createMetricSetReportContext(\n        overallCtx: OverallReportContext,\n        registry: MetricRegistry,\n        date: Date,\n        type: MetricType): LoggerReportingContext {\n        const logMetadata = Object.assign({}, this.logMetadata, {\n            measurement: \"\",\n            measurement_type: type,\n            timestamp: date,\n        });\n        return {\n            date,\n            logMetadata,\n            metrics: [],\n            overallCtx,\n            registry,\n            type,\n        };\n    }\n\n    /**\n     * Logs each result at 'info' level using the logger instance specified in the options.\n     *\n     * @protected\n     * @param {OverallReportContext} ctx\n     * @param {MetricRegistry} registry\n     * @param {Date} date\n     * @param {MetricType} type\n     * @param {Array>} results\n     * @memberof LoggerReporter\n     */\n    protected async handleResults(\n        ctx: OverallReportContext,\n        registry: MetricRegistry,\n        date: Date,\n        type: MetricType,\n        results: Array>) {\n        for (const logLine of results) {\n            this.options.log.info(logLine.result.message, logLine.result.metadata);\n        }\n    }\n\n    /**\n     * Builds the log message for the given {@link Counter} or {@link MonotoneCounter} if the value of\n     * {@link Counter#getCount()} or {@link MonotoneCounter#getCount()} is a valid number.\n     *\n     * Reported fields:\n     * - count\n     *\n     * Also the metadata (tags, metric group, metric name) and the date is included.\n     *\n     * @protected\n     * @param {(MonotoneCounter | Counter)} counter\n     * @param {(LoggerReportingContext)} ctx\n     * @returns {LogLine}\n     * @memberof LoggerReporter\n     */\n    protected reportCounter(\n        counter: MonotoneCounter | Counter, ctx: LoggerReportingContext): LogLine {\n        if (!isNaN(counter.getCount())) {\n            const name = counter.getName();\n            ctx.logMetadata.measurement = name;\n            ctx.logMetadata.group = counter.getGroup();\n            ctx.logMetadata.tags = this.buildTags(ctx.registry, counter);\n            return {\n                message: `${ctx.date} - counter ${name}: ${counter.getCount()}`,\n                metadata: Object.assign({}, ctx.logMetadata),\n            };\n        }\n        return null;\n    }\n\n    /**\n     * Builds the log message for the given {@link Gauge} if the gauge's\n     * value is a valid number.\n     *\n     * Reported fields:\n     * - value\n     *\n     * Also the metadata (tags, metric group, metric name) and the date is included.\n     *\n     * @protected\n     * @param {Gauge} gauge\n     * @param {LoggerReportingContext>} ctx\n     * @returns {LogLine}\n     * @memberof LoggerReporter\n     */\n    protected reportGauge(gauge: Gauge, ctx: LoggerReportingContext>): LogLine {\n        if (!isNaN(gauge.getValue())) {\n            const name = gauge.getName();\n            ctx.logMetadata.measurement = name;\n            ctx.logMetadata.group = gauge.getGroup();\n            ctx.logMetadata.tags = this.buildTags(ctx.registry, gauge);\n            return {\n                message: `${ctx.date} - gauge ${name}: ${gauge.getValue()}`,\n                metadata: Object.assign({}, ctx.logMetadata),\n            };\n        }\n        return null;\n    }\n\n    /**\n     * Builds the log message for the given {@link Histogram} if the value of\n     * {@link Histogram#getCount()} is a valid number.\n     *\n     * Reported fields:\n     * - count\n     * - max (max value)\n     * - mean (mean value)\n     * - min (min value)\n     * - p50 (value of the 50% boundary)\n     * - p75 (value of the 75% boundary)\n     * - p95 (value of the 95% boundary)\n     * - p98 (value of the 98% boundary)\n     * - p99 (value of the 99% boundary)\n     * - p999 (value of the 99.9% boundary)\n     * - stddev (average deviation among the values)\n     *\n     * Also the metadata (tags, metric group, metric name) and the date is included.\n     *\n     * @protected\n     * @param {Histogram} histogram\n     * @param {LoggerReportingContext} ctx\n     * @returns {LogLine}\n     * @memberof LoggerReporter\n     */\n    protected reportHistogram(histogram: Histogram, ctx: LoggerReportingContext): LogLine {\n        if (!isNaN(histogram.getCount())) {\n            const name = histogram.getName();\n            const snapshot = histogram.getSnapshot();\n\n            ctx.logMetadata.measurement = name;\n            ctx.logMetadata.group = histogram.getGroup();\n            ctx.logMetadata.tags = this.buildTags(ctx.registry, histogram);\n            return {\n                message: `${ctx.date} - histogram ${name}\\\n                            \\n\\tcount: ${histogram.getCount()}\\\n                            \\n\\tmax: ${this.getNumber(snapshot.getMax())}\\\n                            \\n\\tmean: ${this.getNumber(snapshot.getMean())}\\\n                            \\n\\tmin: ${this.getNumber(snapshot.getMin())}\\\n                            \\n\\tp50: ${this.getNumber(snapshot.getMedian())}\\\n                            \\n\\tp75: ${this.getNumber(snapshot.get75thPercentile())}\\\n                            \\n\\tp95: ${this.getNumber(snapshot.get95thPercentile())}\\\n                            \\n\\tp98: ${this.getNumber(snapshot.get98thPercentile())}\\\n                            \\n\\tp99: ${this.getNumber(snapshot.get99thPercentile())}\\\n                            \\n\\tp999: ${this.getNumber(snapshot.get999thPercentile())}\\\n                            \\n\\tstddev: ${this.getNumber(snapshot.getStdDev())}`,\n                metadata: Object.assign({}, ctx.logMetadata),\n            };\n        }\n        return null;\n    }\n\n    /**\n     * Builds the log message for the given {@link Meter} if the value of\n     * {@link Meter#getCount()} is a valid number.\n     *\n     * Reported fields:\n     * - count\n     * - m15_rate (15 min rate)\n     * - m5_rate (5 min rate)\n     * - m1_rate (1 min rate)\n     * - mean_rate\n     *\n     * Also the metadata (tags, metric group, metric name) and the date is included.\n     *\n     * @protected\n     * @param {Meter} meter\n     * @param {LoggerReportingContext} ctx\n     * @returns {LogLine}\n     * @memberof LoggerReporter\n     */\n    protected reportMeter(meter: Meter, ctx: LoggerReportingContext): LogLine {\n        if (!isNaN(meter.getCount())) {\n            const name = meter.getName();\n\n            ctx.logMetadata.measurement = name;\n            ctx.logMetadata.group = meter.getGroup();\n            ctx.logMetadata.tags = this.buildTags(ctx.registry, meter);\n            return {\n                message: `${ctx.date} - meter ${name}\\\n                            \\n\\tcount: ${meter.getCount()}\\\n                            \\n\\tm15_rate: ${this.getNumber(meter.get15MinuteRate())}\\\n                            \\n\\tm5_rate: ${this.getNumber(meter.get5MinuteRate())}\\\n                            \\n\\tm1_rate: ${this.getNumber(meter.get1MinuteRate())}\\\n                            \\n\\tmean_rate: ${this.getNumber(meter.getMeanRate())}`,\n                metadata: Object.assign({}, ctx.logMetadata),\n            };\n        }\n        return null;\n    }\n\n    /**\n     * Builds the log message for the given {@link Timer} if the value of\n     * {@link Timer#getCount()} is a valid number.\n     *\n     * Reported fields:\n     * - count\n     * - max (max value)\n     * - mean (mean value)\n     * - min (min value)\n     * - p50 (value of the 50% boundary)\n     * - p75 (value of the 75% boundary)\n     * - p95 (value of the 95% boundary)\n     * - p98 (value of the 98% boundary)\n     * - p99 (value of the 99% boundary)\n     * - p999 (value of the 99.9% boundary)\n     * - stddev (average deviation among the values)\n     * - m15_rate (15 min rate)\n     * - m5_rate (5 min rate)\n     * - m1_rate (1 min rate)\n     * - mean_rate\n     *\n     * Also the metadata (tags, metric group, metric name) and the date is included.\n     *\n     * @protected\n     * @param {Timer} timer\n     * @param {LoggerReportingContext} ctx\n     * @returns {LogLine}\n     * @memberof LoggerReporter\n     */\n    protected reportTimer(timer: Timer, ctx: LoggerReportingContext): LogLine {\n        if (!isNaN(timer.getCount())) {\n            const name = timer.getName();\n            const snapshot = timer.getSnapshot();\n\n            ctx.logMetadata.measurement = name;\n            ctx.logMetadata.group = timer.getGroup();\n            ctx.logMetadata.tags = this.buildTags(ctx.registry, timer);\n            return {\n                message: `${ctx.date} - timer ${name}\\\n                            \\n\\tcount: ${timer.getCount()}\\\n                            \\n\\tm15_rate: ${this.getNumber(timer.get15MinuteRate())}\\\n                            \\n\\tm5_rate: ${this.getNumber(timer.get5MinuteRate())}\\\n                            \\n\\tm1_rate: ${this.getNumber(timer.get1MinuteRate())}\\\n                            \\n\\tmean_rate: ${this.getNumber(timer.getMeanRate())}\\\n                            \\n\\tmax: ${this.getNumber(snapshot.getMax())}\\\n                            \\n\\tmean: ${this.getNumber(snapshot.getMean())}\\\n                            \\n\\tmin: ${this.getNumber(snapshot.getMin())}\\\n                            \\n\\tp50: ${this.getNumber(snapshot.getMedian())}\\\n                            \\n\\tp75: ${this.getNumber(snapshot.get75thPercentile())}\\\n                            \\n\\tp95: ${this.getNumber(snapshot.get95thPercentile())}\\\n                            \\n\\tp98: ${this.getNumber(snapshot.get98thPercentile())}\\\n                            \\n\\tp99: ${this.getNumber(snapshot.get99thPercentile())}\\\n                            \\n\\tp999: ${this.getNumber(snapshot.get999thPercentile())}\\\n                            \\n\\tstddev: ${this.getNumber(snapshot.getStdDev())}`,\n                metadata: Object.assign({}, ctx.logMetadata),\n            };\n        }\n        return null;\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Logger.html":{"url":"interfaces/Logger.html","title":"interface - Logger","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Logger\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/reporter/logger.ts\n        \n\n            \n                Description\n            \n            \n                A logger abstraction used in this library.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        debug\n                                \n                                \n                                        error\n                                \n                                \n                                        info\n                                \n                                \n                                        trace\n                                \n                                \n                                        warn\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        debug\n                                    \n                                \n                                \n                                    \n                                        debug:     function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     function\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Logs at \"debug\" level:\n\nthe first argument passed is usually the log message\nusually logs to stdout stream\navailable since node 8\n\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                    \n                                \n                                \n                                    \n                                        error:     function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     function\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Logs at \"error\" level:\n\nthe first argument passed is usually the log message\nusually logs to stderr stream\n\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        info\n                                    \n                                \n                                \n                                    \n                                        info:     function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     function\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Logs at \"info\" level:\n\nthe first argument passed is usually the log message\nusually logs to stdout stream\n\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        trace\n                                    \n                                \n                                \n                                    \n                                        trace:     function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     function\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Logs at \"trace\" level:\n\nthe first argument passed is usually the log message\nusually logs to stdout stream\n\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        warn\n                                    \n                                \n                                \n                                    \n                                        warn:     function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     function\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Logs at \"warn\" level:\n\nthe first argument passed is usually the log message\nusually logs to stdout stream\n\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import \"source-map-support/register\";\n\n/**\n * A logger abstraction used in this library.\n *\n * @export\n * @interface Logger\n */\nexport interface Logger {\n    /**\n     * Logs at \"error\" level:\n     * - the first argument passed is usually the log message\n     * - usually logs to stderr stream\n     */\n    error: (...args: any[]) => any;\n    /**\n     * Logs at \"warn\" level:\n     * - the first argument passed is usually the log message\n     * - usually logs to stdout stream\n     */\n    warn: (...args: any[]) => any;\n    /**\n     * Logs at \"info\" level:\n     * - the first argument passed is usually the log message\n     * - usually logs to stdout stream\n     */\n    info: (...args: any[]) => any;\n    /**\n     * Logs at \"debug\" level:\n     * - the first argument passed is usually the log message\n     * - usually logs to stdout stream\n     * - available since node 8\n     */\n    debug: (...args: any[]) => any;\n    /**\n     * Logs at \"trace\" level:\n     * - the first argument passed is usually the log message\n     * - usually logs to stdout stream\n     */\n    trace: (...args: any[]) => any;\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LoggerReporterOptions.html":{"url":"interfaces/LoggerReporterOptions.html","title":"interface - LoggerReporterOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  LoggerReporterOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/reporter/logger-reporter.ts\n        \n\n            \n                Description\n            \n            \n                Options for LoggerReporter.\n\n            \n\n            \n                Extends\n            \n            \n                    ScheduledMetricReporterOptions\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        log\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        log\n                                    \n                                \n                                \n                                    \n                                        log:     Logger\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Logger\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The logger instance used to report metrics.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { StdClock } from \"../clock\";\nimport { Counter, MonotoneCounter } from \"../counter\";\nimport { Event } from \"../event\";\nimport { Gauge } from \"../gauge\";\nimport { Histogram } from \"../histogram\";\nimport { Meter } from \"../meter\";\nimport { MetricRegistry } from \"../metric-registry\";\nimport { MILLISECOND } from \"../time-unit\";\nimport { Timer } from \"../timer\";\nimport { Logger } from \"./logger\";\nimport { MetricSetReportContext, OverallReportContext, ReportingResult } from \"./metric-reporter\";\nimport { MetricType } from \"./metric-type\";\nimport { ScheduledMetricReporter, ScheduledMetricReporterOptions } from \"./scheduled-reporter\";\n\n/**\n * Helper interface to abstract a log-line.\n *\n * @interface LogLine\n */\ninterface LogLine {\n    /**\n     * Message string passed to the logger instance.\n     *\n     * @type {string}\n     * @memberof LogLine\n     */\n    message: string;\n    /**\n     * Metadata passed to the logger instance as second parameter.\n     *\n     * @type {*}\n     * @memberof LogLine\n     */\n    metadata: any;\n}\n\n/**\n * Helper interface for the reporting context.\n *\n * @interface LoggerReportingContext\n * @extends {MetricSetReportContext}\n * @template M\n */\ninterface LoggerReportingContext extends MetricSetReportContext {\n    /**\n     * Common log metadata to extend.\n     *\n     * @type {*}\n     * @memberof LoggerReportingContext\n     */\n    readonly logMetadata: any;\n}\n\n/**\n * Options for {@link LoggerReporter}.\n *\n * @export\n * @class LoggerReporterOptions\n * @implements {ScheduledMetricReporterOptions}\n */\nexport interface LoggerReporterOptions extends ScheduledMetricReporterOptions {\n    /**\n     * The logger instance used to report metrics.\n     *\n     * @type {Logger}\n     * @memberof LoggerReporterOptions\n     */\n    log?: Logger;\n}\n\n/**\n * Standard implementation of a {@link MetricReporter} that uses a {@link Logger} instance.\n *\n * @export\n * @class LoggerReporter\n * @extends {MetricReporter}\n */\nexport class LoggerReporter extends ScheduledMetricReporter {\n\n    /**\n     * The metadata object passed to the {@link Logger} instance.\n     *\n     * @private\n     * @type {*}\n     * @memberof LoggerReporter\n     */\n    private logMetadata: any;\n\n    /**\n     * Creates an instance of LoggerReporter.\n     *\n     * @memberof LoggerReporter\n     */\n    public constructor({\n        log = console,\n        reportInterval = 1000,\n        unit = MILLISECOND,\n        clock = new StdClock(),\n        scheduler = setInterval,\n        minReportingTimeout = 1,\n        tags = new Map(),\n    }: LoggerReporterOptions) {\n        super({\n            clock,\n            log,\n            minReportingTimeout,\n            reportInterval,\n            scheduler,\n            tags,\n            unit,\n        });\n        this.logMetadata = {\n            reportInterval,\n            tags,\n            unit,\n        };\n    }\n\n    /**\n     * Gets the {@link Logger} instance.\n     *\n     * @returns {Logger}\n     * @memberof LoggerReporter\n     */\n    public getLog(): Logger {\n        return this.options.log;\n    }\n\n    /**\n     * Sets the {@link Logger} instance.\n     *\n     * @param {Logger} log\n     * @returns {this}\n     * @memberof LoggerReporter\n     */\n    public setLog(log: Logger): this {\n        this.options.log = log;\n        return this;\n    }\n\n    /**\n     * Prints the specified event immediately to the logger at 'info' level.\n     *\n     * @template TEventData\n     * @template TEvent\n     * @param {TEvent} event\n     * @returns {Promise}\n     * @memberof LoggerReporter\n     */\n    public async reportEvent>(event: TEvent): Promise {\n        const ctx: LoggerReportingContext = this\n            .createMetricSetReportContext({}, null, event.getTime(), \"gauge\");\n        const logLine: LogLine = this.reportGauge(event, ctx);\n        if (logLine) {\n            this.options.log.info(logLine.message, logLine.metadata);\n        }\n        return event;\n    }\n\n    /**\n     * Creates a new {@link LoggerReportingContext} using the speicifed arguments.\n     *\n     * @protected\n     * @param {OverallReportContext} overallCtx\n     * @param {MetricRegistry} registry\n     * @param {Date} date\n     * @param {MetricType} type\n     * @returns {LoggerReportingContext}\n     * @memberof LoggerReporter\n     */\n    protected createMetricSetReportContext(\n        overallCtx: OverallReportContext,\n        registry: MetricRegistry,\n        date: Date,\n        type: MetricType): LoggerReportingContext {\n        const logMetadata = Object.assign({}, this.logMetadata, {\n            measurement: \"\",\n            measurement_type: type,\n            timestamp: date,\n        });\n        return {\n            date,\n            logMetadata,\n            metrics: [],\n            overallCtx,\n            registry,\n            type,\n        };\n    }\n\n    /**\n     * Logs each result at 'info' level using the logger instance specified in the options.\n     *\n     * @protected\n     * @param {OverallReportContext} ctx\n     * @param {MetricRegistry} registry\n     * @param {Date} date\n     * @param {MetricType} type\n     * @param {Array>} results\n     * @memberof LoggerReporter\n     */\n    protected async handleResults(\n        ctx: OverallReportContext,\n        registry: MetricRegistry,\n        date: Date,\n        type: MetricType,\n        results: Array>) {\n        for (const logLine of results) {\n            this.options.log.info(logLine.result.message, logLine.result.metadata);\n        }\n    }\n\n    /**\n     * Builds the log message for the given {@link Counter} or {@link MonotoneCounter} if the value of\n     * {@link Counter#getCount()} or {@link MonotoneCounter#getCount()} is a valid number.\n     *\n     * Reported fields:\n     * - count\n     *\n     * Also the metadata (tags, metric group, metric name) and the date is included.\n     *\n     * @protected\n     * @param {(MonotoneCounter | Counter)} counter\n     * @param {(LoggerReportingContext)} ctx\n     * @returns {LogLine}\n     * @memberof LoggerReporter\n     */\n    protected reportCounter(\n        counter: MonotoneCounter | Counter, ctx: LoggerReportingContext): LogLine {\n        if (!isNaN(counter.getCount())) {\n            const name = counter.getName();\n            ctx.logMetadata.measurement = name;\n            ctx.logMetadata.group = counter.getGroup();\n            ctx.logMetadata.tags = this.buildTags(ctx.registry, counter);\n            return {\n                message: `${ctx.date} - counter ${name}: ${counter.getCount()}`,\n                metadata: Object.assign({}, ctx.logMetadata),\n            };\n        }\n        return null;\n    }\n\n    /**\n     * Builds the log message for the given {@link Gauge} if the gauge's\n     * value is a valid number.\n     *\n     * Reported fields:\n     * - value\n     *\n     * Also the metadata (tags, metric group, metric name) and the date is included.\n     *\n     * @protected\n     * @param {Gauge} gauge\n     * @param {LoggerReportingContext>} ctx\n     * @returns {LogLine}\n     * @memberof LoggerReporter\n     */\n    protected reportGauge(gauge: Gauge, ctx: LoggerReportingContext>): LogLine {\n        if (!isNaN(gauge.getValue())) {\n            const name = gauge.getName();\n            ctx.logMetadata.measurement = name;\n            ctx.logMetadata.group = gauge.getGroup();\n            ctx.logMetadata.tags = this.buildTags(ctx.registry, gauge);\n            return {\n                message: `${ctx.date} - gauge ${name}: ${gauge.getValue()}`,\n                metadata: Object.assign({}, ctx.logMetadata),\n            };\n        }\n        return null;\n    }\n\n    /**\n     * Builds the log message for the given {@link Histogram} if the value of\n     * {@link Histogram#getCount()} is a valid number.\n     *\n     * Reported fields:\n     * - count\n     * - max (max value)\n     * - mean (mean value)\n     * - min (min value)\n     * - p50 (value of the 50% boundary)\n     * - p75 (value of the 75% boundary)\n     * - p95 (value of the 95% boundary)\n     * - p98 (value of the 98% boundary)\n     * - p99 (value of the 99% boundary)\n     * - p999 (value of the 99.9% boundary)\n     * - stddev (average deviation among the values)\n     *\n     * Also the metadata (tags, metric group, metric name) and the date is included.\n     *\n     * @protected\n     * @param {Histogram} histogram\n     * @param {LoggerReportingContext} ctx\n     * @returns {LogLine}\n     * @memberof LoggerReporter\n     */\n    protected reportHistogram(histogram: Histogram, ctx: LoggerReportingContext): LogLine {\n        if (!isNaN(histogram.getCount())) {\n            const name = histogram.getName();\n            const snapshot = histogram.getSnapshot();\n\n            ctx.logMetadata.measurement = name;\n            ctx.logMetadata.group = histogram.getGroup();\n            ctx.logMetadata.tags = this.buildTags(ctx.registry, histogram);\n            return {\n                message: `${ctx.date} - histogram ${name}\\\n                            \\n\\tcount: ${histogram.getCount()}\\\n                            \\n\\tmax: ${this.getNumber(snapshot.getMax())}\\\n                            \\n\\tmean: ${this.getNumber(snapshot.getMean())}\\\n                            \\n\\tmin: ${this.getNumber(snapshot.getMin())}\\\n                            \\n\\tp50: ${this.getNumber(snapshot.getMedian())}\\\n                            \\n\\tp75: ${this.getNumber(snapshot.get75thPercentile())}\\\n                            \\n\\tp95: ${this.getNumber(snapshot.get95thPercentile())}\\\n                            \\n\\tp98: ${this.getNumber(snapshot.get98thPercentile())}\\\n                            \\n\\tp99: ${this.getNumber(snapshot.get99thPercentile())}\\\n                            \\n\\tp999: ${this.getNumber(snapshot.get999thPercentile())}\\\n                            \\n\\tstddev: ${this.getNumber(snapshot.getStdDev())}`,\n                metadata: Object.assign({}, ctx.logMetadata),\n            };\n        }\n        return null;\n    }\n\n    /**\n     * Builds the log message for the given {@link Meter} if the value of\n     * {@link Meter#getCount()} is a valid number.\n     *\n     * Reported fields:\n     * - count\n     * - m15_rate (15 min rate)\n     * - m5_rate (5 min rate)\n     * - m1_rate (1 min rate)\n     * - mean_rate\n     *\n     * Also the metadata (tags, metric group, metric name) and the date is included.\n     *\n     * @protected\n     * @param {Meter} meter\n     * @param {LoggerReportingContext} ctx\n     * @returns {LogLine}\n     * @memberof LoggerReporter\n     */\n    protected reportMeter(meter: Meter, ctx: LoggerReportingContext): LogLine {\n        if (!isNaN(meter.getCount())) {\n            const name = meter.getName();\n\n            ctx.logMetadata.measurement = name;\n            ctx.logMetadata.group = meter.getGroup();\n            ctx.logMetadata.tags = this.buildTags(ctx.registry, meter);\n            return {\n                message: `${ctx.date} - meter ${name}\\\n                            \\n\\tcount: ${meter.getCount()}\\\n                            \\n\\tm15_rate: ${this.getNumber(meter.get15MinuteRate())}\\\n                            \\n\\tm5_rate: ${this.getNumber(meter.get5MinuteRate())}\\\n                            \\n\\tm1_rate: ${this.getNumber(meter.get1MinuteRate())}\\\n                            \\n\\tmean_rate: ${this.getNumber(meter.getMeanRate())}`,\n                metadata: Object.assign({}, ctx.logMetadata),\n            };\n        }\n        return null;\n    }\n\n    /**\n     * Builds the log message for the given {@link Timer} if the value of\n     * {@link Timer#getCount()} is a valid number.\n     *\n     * Reported fields:\n     * - count\n     * - max (max value)\n     * - mean (mean value)\n     * - min (min value)\n     * - p50 (value of the 50% boundary)\n     * - p75 (value of the 75% boundary)\n     * - p95 (value of the 95% boundary)\n     * - p98 (value of the 98% boundary)\n     * - p99 (value of the 99% boundary)\n     * - p999 (value of the 99.9% boundary)\n     * - stddev (average deviation among the values)\n     * - m15_rate (15 min rate)\n     * - m5_rate (5 min rate)\n     * - m1_rate (1 min rate)\n     * - mean_rate\n     *\n     * Also the metadata (tags, metric group, metric name) and the date is included.\n     *\n     * @protected\n     * @param {Timer} timer\n     * @param {LoggerReportingContext} ctx\n     * @returns {LogLine}\n     * @memberof LoggerReporter\n     */\n    protected reportTimer(timer: Timer, ctx: LoggerReportingContext): LogLine {\n        if (!isNaN(timer.getCount())) {\n            const name = timer.getName();\n            const snapshot = timer.getSnapshot();\n\n            ctx.logMetadata.measurement = name;\n            ctx.logMetadata.group = timer.getGroup();\n            ctx.logMetadata.tags = this.buildTags(ctx.registry, timer);\n            return {\n                message: `${ctx.date} - timer ${name}\\\n                            \\n\\tcount: ${timer.getCount()}\\\n                            \\n\\tm15_rate: ${this.getNumber(timer.get15MinuteRate())}\\\n                            \\n\\tm5_rate: ${this.getNumber(timer.get5MinuteRate())}\\\n                            \\n\\tm1_rate: ${this.getNumber(timer.get1MinuteRate())}\\\n                            \\n\\tmean_rate: ${this.getNumber(timer.getMeanRate())}\\\n                            \\n\\tmax: ${this.getNumber(snapshot.getMax())}\\\n                            \\n\\tmean: ${this.getNumber(snapshot.getMean())}\\\n                            \\n\\tmin: ${this.getNumber(snapshot.getMin())}\\\n                            \\n\\tp50: ${this.getNumber(snapshot.getMedian())}\\\n                            \\n\\tp75: ${this.getNumber(snapshot.get75thPercentile())}\\\n                            \\n\\tp95: ${this.getNumber(snapshot.get95thPercentile())}\\\n                            \\n\\tp98: ${this.getNumber(snapshot.get98thPercentile())}\\\n                            \\n\\tp99: ${this.getNumber(snapshot.get99thPercentile())}\\\n                            \\n\\tp999: ${this.getNumber(snapshot.get999thPercentile())}\\\n                            \\n\\tstddev: ${this.getNumber(snapshot.getStdDev())}`,\n                metadata: Object.assign({}, ctx.logMetadata),\n            };\n        }\n        return null;\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LoggerReportingContext.html":{"url":"interfaces/LoggerReportingContext.html","title":"interface - LoggerReportingContext","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  LoggerReportingContext\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/reporter/logger-reporter.ts\n        \n\n            \n                Description\n            \n            \n                Helper interface for the reporting context.\n\n            \n\n            \n                Extends\n            \n            \n                    MetricSetReportContext\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        logMetadata\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        logMetadata\n                                    \n                                \n                                \n                                    \n                                        logMetadata:     any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     any\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Common log metadata to extend.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { StdClock } from \"../clock\";\nimport { Counter, MonotoneCounter } from \"../counter\";\nimport { Event } from \"../event\";\nimport { Gauge } from \"../gauge\";\nimport { Histogram } from \"../histogram\";\nimport { Meter } from \"../meter\";\nimport { MetricRegistry } from \"../metric-registry\";\nimport { MILLISECOND } from \"../time-unit\";\nimport { Timer } from \"../timer\";\nimport { Logger } from \"./logger\";\nimport { MetricSetReportContext, OverallReportContext, ReportingResult } from \"./metric-reporter\";\nimport { MetricType } from \"./metric-type\";\nimport { ScheduledMetricReporter, ScheduledMetricReporterOptions } from \"./scheduled-reporter\";\n\n/**\n * Helper interface to abstract a log-line.\n *\n * @interface LogLine\n */\ninterface LogLine {\n    /**\n     * Message string passed to the logger instance.\n     *\n     * @type {string}\n     * @memberof LogLine\n     */\n    message: string;\n    /**\n     * Metadata passed to the logger instance as second parameter.\n     *\n     * @type {*}\n     * @memberof LogLine\n     */\n    metadata: any;\n}\n\n/**\n * Helper interface for the reporting context.\n *\n * @interface LoggerReportingContext\n * @extends {MetricSetReportContext}\n * @template M\n */\ninterface LoggerReportingContext extends MetricSetReportContext {\n    /**\n     * Common log metadata to extend.\n     *\n     * @type {*}\n     * @memberof LoggerReportingContext\n     */\n    readonly logMetadata: any;\n}\n\n/**\n * Options for {@link LoggerReporter}.\n *\n * @export\n * @class LoggerReporterOptions\n * @implements {ScheduledMetricReporterOptions}\n */\nexport interface LoggerReporterOptions extends ScheduledMetricReporterOptions {\n    /**\n     * The logger instance used to report metrics.\n     *\n     * @type {Logger}\n     * @memberof LoggerReporterOptions\n     */\n    log?: Logger;\n}\n\n/**\n * Standard implementation of a {@link MetricReporter} that uses a {@link Logger} instance.\n *\n * @export\n * @class LoggerReporter\n * @extends {MetricReporter}\n */\nexport class LoggerReporter extends ScheduledMetricReporter {\n\n    /**\n     * The metadata object passed to the {@link Logger} instance.\n     *\n     * @private\n     * @type {*}\n     * @memberof LoggerReporter\n     */\n    private logMetadata: any;\n\n    /**\n     * Creates an instance of LoggerReporter.\n     *\n     * @memberof LoggerReporter\n     */\n    public constructor({\n        log = console,\n        reportInterval = 1000,\n        unit = MILLISECOND,\n        clock = new StdClock(),\n        scheduler = setInterval,\n        minReportingTimeout = 1,\n        tags = new Map(),\n    }: LoggerReporterOptions) {\n        super({\n            clock,\n            log,\n            minReportingTimeout,\n            reportInterval,\n            scheduler,\n            tags,\n            unit,\n        });\n        this.logMetadata = {\n            reportInterval,\n            tags,\n            unit,\n        };\n    }\n\n    /**\n     * Gets the {@link Logger} instance.\n     *\n     * @returns {Logger}\n     * @memberof LoggerReporter\n     */\n    public getLog(): Logger {\n        return this.options.log;\n    }\n\n    /**\n     * Sets the {@link Logger} instance.\n     *\n     * @param {Logger} log\n     * @returns {this}\n     * @memberof LoggerReporter\n     */\n    public setLog(log: Logger): this {\n        this.options.log = log;\n        return this;\n    }\n\n    /**\n     * Prints the specified event immediately to the logger at 'info' level.\n     *\n     * @template TEventData\n     * @template TEvent\n     * @param {TEvent} event\n     * @returns {Promise}\n     * @memberof LoggerReporter\n     */\n    public async reportEvent>(event: TEvent): Promise {\n        const ctx: LoggerReportingContext = this\n            .createMetricSetReportContext({}, null, event.getTime(), \"gauge\");\n        const logLine: LogLine = this.reportGauge(event, ctx);\n        if (logLine) {\n            this.options.log.info(logLine.message, logLine.metadata);\n        }\n        return event;\n    }\n\n    /**\n     * Creates a new {@link LoggerReportingContext} using the speicifed arguments.\n     *\n     * @protected\n     * @param {OverallReportContext} overallCtx\n     * @param {MetricRegistry} registry\n     * @param {Date} date\n     * @param {MetricType} type\n     * @returns {LoggerReportingContext}\n     * @memberof LoggerReporter\n     */\n    protected createMetricSetReportContext(\n        overallCtx: OverallReportContext,\n        registry: MetricRegistry,\n        date: Date,\n        type: MetricType): LoggerReportingContext {\n        const logMetadata = Object.assign({}, this.logMetadata, {\n            measurement: \"\",\n            measurement_type: type,\n            timestamp: date,\n        });\n        return {\n            date,\n            logMetadata,\n            metrics: [],\n            overallCtx,\n            registry,\n            type,\n        };\n    }\n\n    /**\n     * Logs each result at 'info' level using the logger instance specified in the options.\n     *\n     * @protected\n     * @param {OverallReportContext} ctx\n     * @param {MetricRegistry} registry\n     * @param {Date} date\n     * @param {MetricType} type\n     * @param {Array>} results\n     * @memberof LoggerReporter\n     */\n    protected async handleResults(\n        ctx: OverallReportContext,\n        registry: MetricRegistry,\n        date: Date,\n        type: MetricType,\n        results: Array>) {\n        for (const logLine of results) {\n            this.options.log.info(logLine.result.message, logLine.result.metadata);\n        }\n    }\n\n    /**\n     * Builds the log message for the given {@link Counter} or {@link MonotoneCounter} if the value of\n     * {@link Counter#getCount()} or {@link MonotoneCounter#getCount()} is a valid number.\n     *\n     * Reported fields:\n     * - count\n     *\n     * Also the metadata (tags, metric group, metric name) and the date is included.\n     *\n     * @protected\n     * @param {(MonotoneCounter | Counter)} counter\n     * @param {(LoggerReportingContext)} ctx\n     * @returns {LogLine}\n     * @memberof LoggerReporter\n     */\n    protected reportCounter(\n        counter: MonotoneCounter | Counter, ctx: LoggerReportingContext): LogLine {\n        if (!isNaN(counter.getCount())) {\n            const name = counter.getName();\n            ctx.logMetadata.measurement = name;\n            ctx.logMetadata.group = counter.getGroup();\n            ctx.logMetadata.tags = this.buildTags(ctx.registry, counter);\n            return {\n                message: `${ctx.date} - counter ${name}: ${counter.getCount()}`,\n                metadata: Object.assign({}, ctx.logMetadata),\n            };\n        }\n        return null;\n    }\n\n    /**\n     * Builds the log message for the given {@link Gauge} if the gauge's\n     * value is a valid number.\n     *\n     * Reported fields:\n     * - value\n     *\n     * Also the metadata (tags, metric group, metric name) and the date is included.\n     *\n     * @protected\n     * @param {Gauge} gauge\n     * @param {LoggerReportingContext>} ctx\n     * @returns {LogLine}\n     * @memberof LoggerReporter\n     */\n    protected reportGauge(gauge: Gauge, ctx: LoggerReportingContext>): LogLine {\n        if (!isNaN(gauge.getValue())) {\n            const name = gauge.getName();\n            ctx.logMetadata.measurement = name;\n            ctx.logMetadata.group = gauge.getGroup();\n            ctx.logMetadata.tags = this.buildTags(ctx.registry, gauge);\n            return {\n                message: `${ctx.date} - gauge ${name}: ${gauge.getValue()}`,\n                metadata: Object.assign({}, ctx.logMetadata),\n            };\n        }\n        return null;\n    }\n\n    /**\n     * Builds the log message for the given {@link Histogram} if the value of\n     * {@link Histogram#getCount()} is a valid number.\n     *\n     * Reported fields:\n     * - count\n     * - max (max value)\n     * - mean (mean value)\n     * - min (min value)\n     * - p50 (value of the 50% boundary)\n     * - p75 (value of the 75% boundary)\n     * - p95 (value of the 95% boundary)\n     * - p98 (value of the 98% boundary)\n     * - p99 (value of the 99% boundary)\n     * - p999 (value of the 99.9% boundary)\n     * - stddev (average deviation among the values)\n     *\n     * Also the metadata (tags, metric group, metric name) and the date is included.\n     *\n     * @protected\n     * @param {Histogram} histogram\n     * @param {LoggerReportingContext} ctx\n     * @returns {LogLine}\n     * @memberof LoggerReporter\n     */\n    protected reportHistogram(histogram: Histogram, ctx: LoggerReportingContext): LogLine {\n        if (!isNaN(histogram.getCount())) {\n            const name = histogram.getName();\n            const snapshot = histogram.getSnapshot();\n\n            ctx.logMetadata.measurement = name;\n            ctx.logMetadata.group = histogram.getGroup();\n            ctx.logMetadata.tags = this.buildTags(ctx.registry, histogram);\n            return {\n                message: `${ctx.date} - histogram ${name}\\\n                            \\n\\tcount: ${histogram.getCount()}\\\n                            \\n\\tmax: ${this.getNumber(snapshot.getMax())}\\\n                            \\n\\tmean: ${this.getNumber(snapshot.getMean())}\\\n                            \\n\\tmin: ${this.getNumber(snapshot.getMin())}\\\n                            \\n\\tp50: ${this.getNumber(snapshot.getMedian())}\\\n                            \\n\\tp75: ${this.getNumber(snapshot.get75thPercentile())}\\\n                            \\n\\tp95: ${this.getNumber(snapshot.get95thPercentile())}\\\n                            \\n\\tp98: ${this.getNumber(snapshot.get98thPercentile())}\\\n                            \\n\\tp99: ${this.getNumber(snapshot.get99thPercentile())}\\\n                            \\n\\tp999: ${this.getNumber(snapshot.get999thPercentile())}\\\n                            \\n\\tstddev: ${this.getNumber(snapshot.getStdDev())}`,\n                metadata: Object.assign({}, ctx.logMetadata),\n            };\n        }\n        return null;\n    }\n\n    /**\n     * Builds the log message for the given {@link Meter} if the value of\n     * {@link Meter#getCount()} is a valid number.\n     *\n     * Reported fields:\n     * - count\n     * - m15_rate (15 min rate)\n     * - m5_rate (5 min rate)\n     * - m1_rate (1 min rate)\n     * - mean_rate\n     *\n     * Also the metadata (tags, metric group, metric name) and the date is included.\n     *\n     * @protected\n     * @param {Meter} meter\n     * @param {LoggerReportingContext} ctx\n     * @returns {LogLine}\n     * @memberof LoggerReporter\n     */\n    protected reportMeter(meter: Meter, ctx: LoggerReportingContext): LogLine {\n        if (!isNaN(meter.getCount())) {\n            const name = meter.getName();\n\n            ctx.logMetadata.measurement = name;\n            ctx.logMetadata.group = meter.getGroup();\n            ctx.logMetadata.tags = this.buildTags(ctx.registry, meter);\n            return {\n                message: `${ctx.date} - meter ${name}\\\n                            \\n\\tcount: ${meter.getCount()}\\\n                            \\n\\tm15_rate: ${this.getNumber(meter.get15MinuteRate())}\\\n                            \\n\\tm5_rate: ${this.getNumber(meter.get5MinuteRate())}\\\n                            \\n\\tm1_rate: ${this.getNumber(meter.get1MinuteRate())}\\\n                            \\n\\tmean_rate: ${this.getNumber(meter.getMeanRate())}`,\n                metadata: Object.assign({}, ctx.logMetadata),\n            };\n        }\n        return null;\n    }\n\n    /**\n     * Builds the log message for the given {@link Timer} if the value of\n     * {@link Timer#getCount()} is a valid number.\n     *\n     * Reported fields:\n     * - count\n     * - max (max value)\n     * - mean (mean value)\n     * - min (min value)\n     * - p50 (value of the 50% boundary)\n     * - p75 (value of the 75% boundary)\n     * - p95 (value of the 95% boundary)\n     * - p98 (value of the 98% boundary)\n     * - p99 (value of the 99% boundary)\n     * - p999 (value of the 99.9% boundary)\n     * - stddev (average deviation among the values)\n     * - m15_rate (15 min rate)\n     * - m5_rate (5 min rate)\n     * - m1_rate (1 min rate)\n     * - mean_rate\n     *\n     * Also the metadata (tags, metric group, metric name) and the date is included.\n     *\n     * @protected\n     * @param {Timer} timer\n     * @param {LoggerReportingContext} ctx\n     * @returns {LogLine}\n     * @memberof LoggerReporter\n     */\n    protected reportTimer(timer: Timer, ctx: LoggerReportingContext): LogLine {\n        if (!isNaN(timer.getCount())) {\n            const name = timer.getName();\n            const snapshot = timer.getSnapshot();\n\n            ctx.logMetadata.measurement = name;\n            ctx.logMetadata.group = timer.getGroup();\n            ctx.logMetadata.tags = this.buildTags(ctx.registry, timer);\n            return {\n                message: `${ctx.date} - timer ${name}\\\n                            \\n\\tcount: ${timer.getCount()}\\\n                            \\n\\tm15_rate: ${this.getNumber(timer.get15MinuteRate())}\\\n                            \\n\\tm5_rate: ${this.getNumber(timer.get5MinuteRate())}\\\n                            \\n\\tm1_rate: ${this.getNumber(timer.get1MinuteRate())}\\\n                            \\n\\tmean_rate: ${this.getNumber(timer.getMeanRate())}\\\n                            \\n\\tmax: ${this.getNumber(snapshot.getMax())}\\\n                            \\n\\tmean: ${this.getNumber(snapshot.getMean())}\\\n                            \\n\\tmin: ${this.getNumber(snapshot.getMin())}\\\n                            \\n\\tp50: ${this.getNumber(snapshot.getMedian())}\\\n                            \\n\\tp75: ${this.getNumber(snapshot.get75thPercentile())}\\\n                            \\n\\tp95: ${this.getNumber(snapshot.get95thPercentile())}\\\n                            \\n\\tp98: ${this.getNumber(snapshot.get98thPercentile())}\\\n                            \\n\\tp99: ${this.getNumber(snapshot.get99thPercentile())}\\\n                            \\n\\tp999: ${this.getNumber(snapshot.get999thPercentile())}\\\n                            \\n\\tstddev: ${this.getNumber(snapshot.getStdDev())}`,\n                metadata: Object.assign({}, ctx.logMetadata),\n            };\n        }\n        return null;\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MetadataContainer.html":{"url":"interfaces/MetadataContainer.html","title":"interface - MetadataContainer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  MetadataContainer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/metadata-container.ts\n        \n\n            \n                Description\n            \n            \n                Interface for all classes that can associate metadata with instances.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    getMetadata\n                                \n                                \n                                    getMetadataMap\n                                \n                                \n                                    removeMetadata\n                                \n                                \n                                    setMetadata\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getMetadata\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetMetadata(name: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metadata-container.ts:29\n                            \n                        \n\n                        \n                            \n                                Type parameters :\n                                \n                                        T\n                                \n                            \n                        \n\n                \n                    \n                            Gets the metadata associated with the specified name.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                The metadata key\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     T\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getMetadataMap\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetMetadataMap()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metadata-container.ts:19\n                            \n                        \n\n\n                \n                    \n                            Gets all the metadata associated with an instance.\nFuture changes to the metadata of this instance may\nnot be reflected in the map returned here.\n\n\n                            \n                            \n                            \n                                Returns :     Map\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            removeMetadata\n                            \n                            \n                        \n                    \n                \n                \n                    \nremoveMetadata(name: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metadata-container.ts:39\n                            \n                        \n\n                        \n                            \n                                Type parameters :\n                                \n                                        T\n                                \n                            \n                        \n\n                \n                    \n                            Removes the metadata associated with the specified name and returns it finally.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                The metadata key\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     T\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            setMetadata\n                            \n                            \n                        \n                    \n                \n                \n                    \nsetMetadata(name: string, value: T)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metadata-container.ts:50\n                            \n                        \n\n                        \n                            \n                                Type parameters :\n                                \n                                        T\n                                \n                            \n                        \n\n                \n                    \n                            Sets the metadata object to the name.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                The key of the metadata\n\n                                                        \n                                                \n                                                \n                                                        value\n                                                        \n                                                                    T\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                any value\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\n/**\n * Interface for all classes that can associate metadata with instances.\n *\n * @export\n * @interface MetadataContainer\n */\nexport interface MetadataContainer {\n\n    /**\n     * Gets all the metadata associated with an instance.\n     * Future changes to the metadata of this instance may\n     * not be reflected in the map returned here.\n     *\n     * @returns {Map}\n     * @memberof MetadataContainer\n     */\n    getMetadataMap(): Map;\n\n    /**\n     * Gets the metadata associated with the specified name.\n     *\n     * @template T\n     * @param {string} name The metadata key\n     * @returns {T}\n     * @memberof MetadataContainer\n     */\n    getMetadata(name: string): T;\n\n    /**\n     * Removes the metadata associated with the specified name and returns it finally.\n     *\n     * @template T\n     * @param {string} name The metadata key\n     * @returns {T}\n     * @memberof MetadataContainer\n     */\n    removeMetadata(name: string): T;\n\n    /**\n     * Sets the metadata object to the name.\n     *\n     * @template T\n     * @param {string} name The key of the metadata\n     * @param {T} value any value\n     * @returns {this}\n     * @memberof MetadataContainer\n     */\n    setMetadata(name: string, value: T): this;\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Metered.html":{"url":"interfaces/Metered.html","title":"interface - Metered","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Metered\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/metered.ts\n        \n\n            \n                Description\n            \n            \n                Represents a metric which measure a rate of events - e.g. function call rate or request rate.\n\n            \n\n            \n                Extends\n            \n            \n                    Metric\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    get15MinuteRate\n                                \n                                \n                                    get1MinuteRate\n                                \n                                \n                                    get5MinuteRate\n                                \n                                \n                                    getCount\n                                \n                                \n                                    getMeanRate\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            get15MinuteRate\n                            \n                            \n                        \n                    \n                \n                \n                    \nget15MinuteRate()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metered.ts:28\n                            \n                        \n\n\n                \n                    \n                            Gets the rate of the last 15 minutes.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            get1MinuteRate\n                            \n                            \n                        \n                    \n                \n                \n                    \nget1MinuteRate()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metered.ts:44\n                            \n                        \n\n\n                \n                    \n                            Gets the rate of the last minute.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            get5MinuteRate\n                            \n                            \n                        \n                    \n                \n                \n                    \nget5MinuteRate()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metered.ts:36\n                            \n                        \n\n\n                \n                    \n                            Gets the rate of the last 5 minutes.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getCount\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetCount()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metered.ts:20\n                            \n                        \n\n\n                \n                    \n                            Gets the total number of events.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getMeanRate\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetMeanRate()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metered.ts:52\n                            \n                        \n\n\n                \n                    \n                            Gets the mean rate - the meaning of the mean-rate depends on the actual implementation.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { Metric } from \"./metric\";\n\n/**\n * Represents a metric which measure a rate of events - e.g. function call rate or request rate.\n *\n * @export\n * @interface Metered\n * @extends {Metric}\n */\nexport interface Metered extends Metric {\n\n    /**\n     * Gets the total number of events.\n     *\n     * @returns {number}\n     * @memberof Metered\n     */\n    getCount(): number;\n\n    /**\n     * Gets the rate of the last 15 minutes.\n     *\n     * @returns {number}\n     * @memberof Metered\n     */\n    get15MinuteRate(): number;\n\n    /**\n     * Gets the rate of the last 5 minutes.\n     *\n     * @returns {number}\n     * @memberof Metered\n     */\n    get5MinuteRate(): number;\n\n    /**\n     * Gets the rate of the last minute.\n     *\n     * @returns {number}\n     * @memberof Metered\n     */\n    get1MinuteRate(): number;\n\n    /**\n     * Gets the mean rate - the meaning of the mean-rate depends on the actual implementation.\n     *\n     * @returns {number}\n     * @memberof Metered\n     */\n    getMeanRate(): number;\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Metric.html":{"url":"interfaces/Metric.html","title":"interface - Metric","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Metric\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/metric.ts\n        \n\n            \n                Description\n            \n            \n                Representation for a metrics.\n\n            \n\n            \n                Extends\n            \n            \n                    Groupable\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    getDescription\n                                \n                                \n                                    getName\n                                \n                                \n                                    setDescription\n                                \n                                \n                                    setName\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getDescription\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetDescription()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metric.ts:40\n                            \n                        \n\n\n                \n                    \n                            Gets the description of the metric.\n\n\n                            \n                            \n                            \n                                Returns :     string\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getName\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetName()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metric.ts:23\n                            \n                        \n\n\n                \n                    \n                            Gets the name of the metric.\n\n\n                            \n                            \n                            \n                                Returns :     string\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            setDescription\n                            \n                            \n                        \n                    \n                \n                \n                    \nsetDescription(description: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metric.ts:49\n                            \n                        \n\n\n                \n                    \n                            Sets the description of the metric.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        description\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            setName\n                            \n                            \n                        \n                    \n                \n                \n                    \nsetName(name: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metric.ts:32\n                            \n                        \n\n\n                \n                    \n                            Sets the name of the metric.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { Groupable } from \"./groupable\";\nimport { MetadataContainer } from \"./metadata-container\";\nimport { Taggable } from \"./taggable\";\n\n/**\n * Representation for a metrics.\n *\n * @export\n * @interface Metric\n * @extends {Groupable}\n * @extends {Taggable}\n */\nexport interface Metric extends Groupable, MetadataContainer, Taggable {\n\n    /**\n     * Gets the name of the metric.\n     *\n     * @returns {string}\n     * @memberof Metric\n     */\n    getName(): string;\n\n    /**\n     * Sets the name of the metric.\n     *\n     * @param {string} name\n     * @returns {this}\n     * @memberof Metric\n     */\n    setName(name: string): this;\n\n    /**\n     * Gets the description of the metric.\n     *\n     * @returns {string}\n     * @memberof Metric\n     */\n    getDescription(): string;\n\n    /**\n     * Sets the description of the metric.\n     *\n     * @param {string} description\n     * @returns {this}\n     * @memberof Metric\n     */\n    setDescription(description: string): this;\n\n}\n\n/**\n * Abstract base-class for a metric which implements commonly needed functions:\n * - get / set name\n * - get / set tags\n * - get / set group\n *\n * @export\n * @abstract\n * @class BaseMetric\n * @implements {Metric}\n */\nexport abstract class BaseMetric implements Metric {\n\n    /**\n     * A static number instance to give an unique id within an application instance.\n     *\n     * @private\n     * @static\n     * @memberof BaseMetric\n     */\n    private static COUNTER = 0;\n\n    /**\n     * The unique id of this metric instance.\n     *\n     * @type {number}\n     * @memberof BaseMetric\n     */\n    public readonly id: number = BaseMetric.COUNTER++;\n    /**\n     * Maps of tags for this metric.\n     *\n     * @protected\n     * @type {Map}\n     * @memberof BaseMetric\n     */\n    protected tags: Map = new Map();\n    /**\n     * The group set to this metric.\n     *\n     * @protected\n     * @type {string}\n     * @memberof BaseMetric\n     */\n    protected group: string;\n    /**\n     * The name of this metric.\n     *\n     * @protected\n     * @type {string}\n     * @memberof BaseMetric\n     */\n    protected name: string;\n    /**\n     * The description of this metric.\n     *\n     * @protected\n     * @type {string}\n     * @memberof BaseMetric\n     */\n    protected description: string;\n    /**\n     * The metadata associated with an instance of class.\n     *\n     * @protected\n     * @type {Map}\n     * @memberof BaseMetric\n     */\n    protected metadata: Map = new Map();\n\n    public getMetadataMap(): Map {\n        return this.metadata;\n    }\n\n    public getMetadata(name: string): T {\n        return this.metadata.get(name) as T;\n    }\n\n    public removeMetadata(name: string): T {\n        const value = this.metadata.get(name) as T;\n        this.metadata.delete(name);\n        return value;\n    }\n\n    public setMetadata(name: string, value: T): this {\n        this.metadata.set(name, value);\n        return this;\n    }\n\n    public getName(): string {\n        return this.name;\n    }\n\n    public setName(name: string): this {\n        this.name = name;\n        return this;\n    }\n\n    public getDescription(): string {\n        return this.description;\n    }\n\n    public setDescription(description: string): this {\n        this.description = description;\n        return this;\n    }\n\n    public getGroup(): string {\n        return this.group;\n    }\n\n    public setGroup(group: string): this {\n        this.group = group;\n        return this;\n    }\n\n    public getTags(): Map {\n        return this.tags;\n    }\n\n    public getTag(name: string): string {\n        return this.tags.get(name);\n    }\n\n    public setTag(name: string, value: string): this {\n        this.tags.set(name, value);\n        return this;\n    }\n\n    public setTags(tags: Map): this {\n        this.tags = tags;\n        return this;\n    }\n\n    public addTags(tags: Map): this {\n        tags.forEach((value, key) => this.tags.set(key, value));\n        return this;\n    }\n\n    public removeTag(name: string): this {\n        this.tags.delete(name);\n        return this;\n    }\n\n    public removeTags(...names: string[]): this {\n        names.forEach((name) => this.removeTag(name));\n        return this;\n    }\n\n    public toString(): string {\n        if (this.group) {\n            return `${this.group}.${this.name}`;\n        }\n        return this.name;\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MetricEntry.html":{"url":"interfaces/MetricEntry.html","title":"interface - MetricEntry","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  MetricEntry\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/reporter/metric-entry.ts\n        \n\n            \n                Description\n            \n            \n                Utility interface to track report-timestamps and -values of metric instances.\nThis is directly linked to the minimum-reporting timeout of the BaseReporter,\nwhich ensures that a certain value gets reported at least in a certain amount of time\ne.g. every minute without the value having changed. And on the other hand\nto not report / include values that haven't changed.\nAn example for this is the health status of an application (a gauge: 1 means healthy, 0 means unhealthy)\nwhich you normally want to report every minute for your graphs but should not\nnecessarily be included in every reporting run with the same value.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        lastReport\n                                \n                                \n                                        lastValue\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        lastReport\n                                    \n                                \n                                \n                                    \n                                        lastReport:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    timestamp of the latest report.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lastValue\n                                    \n                                \n                                \n                                    \n                                        lastValue:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    value that got reported as latest.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import \"source-map-support/register\";\n\n/**\n * Utility interface to track report-timestamps and -values of metric instances.\n * This is directly linked to the minimum-reporting timeout of the {@link BaseReporter},\n * which ensures that a certain value gets reported at least in a certain amount of time\n * e.g. every minute without the value having changed. And on the other hand\n * to not report / include values that haven't changed.\n *\n * An example for this is the health status of an application (a gauge: 1 means healthy, 0 means unhealthy)\n * which you normally want to report every minute for your graphs but should not\n * necessarily be included in every reporting run with the same value.\n *\n * @interface MetricEntry\n */\nexport interface MetricEntry {\n    /**\n     * timestamp of the latest report.\n     *\n     * @type {number}\n     * @memberof MetricEntry\n     */\n    lastReport: number;\n    /**\n     * value that got reported as latest.\n     *\n     * @type {number}\n     * @memberof MetricEntry\n     */\n    lastValue: number;\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MetricRegistration.html":{"url":"classes/MetricRegistration.html","title":"class - MetricRegistration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MetricRegistration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/metric-registry.ts\n        \n\n            \n                Description\n            \n            \n                Proxy object for a metric (one metric can be registered with multiple names e.g. in different groups).\n\n            \n\n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                metricRef\n                            \n                            \n                                    Public\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(metricRef: T)\n                    \n                \n                        \n                            \n                                Defined in lib/metrics/metric-registry.ts:71\n                            \n                        \n\n                \n                    \n                            Creates an instance of MetricRegistration.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        metricRef\n                                                  \n                                                        \n                                                                    T\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            metricRef\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        metricRef:     T\n\n                    \n                \n                    \n                        \n                            Type :     T\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/metric-registry.ts:64\n                            \n                        \n\n                \n                    \n                        The metric instance.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            name\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        name:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/metric-registry.ts:71\n                            \n                        \n\n                \n                    \n                        The name the metric is registered with.\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { Clock, StdClock } from \"./clock\";\nimport { Counter, MonotoneCounter } from \"./counter\";\nimport { Buckets } from \"./counting\";\nimport { Gauge } from \"./gauge\";\nimport { HdrHistogram } from \"./hdr-histogram\";\nimport { Histogram } from \"./histogram\";\nimport { Meter } from \"./meter\";\nimport { BaseMetric, Metric } from \"./metric\";\nimport { MetricRegistryListener } from \"./metric-registry-listener\";\nimport { MetricSet } from \"./metric-set\";\nimport { Reservoir, SlidingWindowReservoir } from \"./reservoir\";\nimport { Timer } from \"./timer\";\n\nexport type NameFactory = (baseName: string, metricName: string, metric: Metric) => string;\n\n/**\n * Represents a registration of a {@link MetricRegistryListener}.\n * This instance can be used to safely remove the listener from registry again.\n *\n * @export\n * @class MetricRegistryListenerRegistration\n */\nexport class MetricRegistryListenerRegistration {\n\n    /**\n     * Creates an instance of MetricRegistryListenerRegistration.\n     *\n     * @param {MetricRegistryListener} listener\n     * @param {MetricRegistry} registry\n     * @memberof MetricRegistryListenerRegistration\n     */\n    public constructor(private listener: MetricRegistryListener, private registry: MetricRegistry) {}\n\n    /**\n     * Removes the managed listener from the metric registry.\n     *\n     * @returns {this}\n     * @memberof MetricRegistryListenerRegistration\n     */\n    public remove(): this {\n        this.registry.removeListener(this.listener);\n        return this;\n    }\n\n}\n\n/**\n * Proxy object for a metric (one metric can be registered with multiple names e.g. in different groups).\n *\n * @export\n * @class MetricRegistration\n * @template T\n */\nexport class MetricRegistration {\n\n    /**\n     * The metric instance.\n     *\n     * @type {T}\n     * @memberof MetricRegistration\n     */\n    public metricRef: T;\n    /**\n     * The name the metric is registered with.\n     *\n     * @type {string}\n     * @memberof MetricRegistration\n     */\n    public name: string;\n\n    /**\n     * Creates an instance of MetricRegistration.\n     *\n     * @param {T} metricRef\n     * @memberof MetricRegistration\n     */\n    public constructor(metricRef: T) {\n        this.metricRef = metricRef;\n        this.name = metricRef.getName();\n    }\n\n}\n\n/**\n * A metric registry manages metric instances.\n *\n * @export\n * @class MetricRegistry\n * @extends {BaseMetric}\n * @implements {MetricSet}\n */\nexport class MetricRegistry extends BaseMetric implements MetricSet {\n\n    /**\n     * Determines if the specified object is a {@link Counter} or references one.\n     *\n     * @static\n     * @param {*} instance\n     * @returns {instance is Counter}\n     * @memberof MetricRegistry\n     */\n    public static isCounter(instance: any): instance is Counter {\n        return instance instanceof Counter || instance.metricRef instanceof Counter;\n    }\n\n    /**\n     * Determines if the specified object is a {@link MonotoneCounter} or {@link Counter} or references one of them.\n     *\n     * @static\n     * @param {*} instance\n     * @returns {instance is MonotoneCounter}\n     * @memberof MetricRegistry\n     */\n    public static isMonotoneCounter(instance: any): instance is MonotoneCounter {\n        return instance instanceof MonotoneCounter || instance.metricRef instanceof MonotoneCounter;\n    }\n\n    /**\n     * Determines if the specified object is a {@link MonotoneCounter} or references one.\n     *\n     * @static\n     * @param {*} instance\n     * @returns {instance is MonotoneCounter}\n     * @memberof MetricRegistry\n     */\n    public static isPureMonotoneCounter(instance: any): instance is MonotoneCounter {\n        return (instance instanceof MonotoneCounter || instance.metricRef instanceof MonotoneCounter) &&\n                !MetricRegistry.isCounter(instance);\n    }\n\n    /**\n     * Determines if the specified object is a {@link Histogram} or references one.\n     *\n     * @static\n     * @param {*} instance\n     * @returns {instance is Histogram}\n     * @memberof MetricRegistry\n     */\n    public static isHistogram(instance: any): instance is Histogram {\n        return instance instanceof Histogram || instance.metricRef instanceof Histogram;\n    }\n\n    /**\n     * Determines if the specified object is a {@link Meter} or references one.\n     *\n     * @static\n     * @param {*} instance\n     * @returns {instance is Meter}\n     * @memberof MetricRegistry\n     */\n    public static isMeter(instance: any): instance is Meter {\n        return instance instanceof Meter || instance.metricRef instanceof Meter;\n    }\n\n    /**\n     * Determines if the specified object is a {@link Timer} or references one.\n     *\n     * @static\n     * @param {*} instance\n     * @returns {instance is Timer}\n     * @memberof MetricRegistry\n     */\n    public static isTimer(instance: any): instance is Timer {\n        return instance instanceof Timer || instance.metricRef instanceof Timer;\n    }\n\n    /**\n     * Determines if the specified object is a {@link Gauge} or references one.\n     *\n     * @static\n     * @template T\n     * @param {*} instance\n     * @returns {instance is Gauge}\n     * @memberof MetricRegistry\n     */\n    public static isGauge(instance: any): instance is Gauge {\n        const directGauge: boolean = !!instance.getValue && instance.getValue instanceof Function;\n        const gaugeRegistration =   !!instance.metricRef &&\n                                    !!instance.metricRef.getValue &&\n                                    instance.metricRef.getValue instanceof Function;\n        return directGauge || gaugeRegistration;\n    }\n\n    /**\n     * Determines if the specified object is a {@link MetricSet}.\n     *\n     * @static\n     * @param {*} instance\n     * @returns {instance is MetricSet}\n     * @memberof MetricRegistry\n     */\n    public static isMetricSet(instance: any): instance is MetricSet {\n        return !!instance.getMetrics && instance.getMetrics instanceof Function;\n    }\n\n    /**\n     * Standard function to generate the name for a metric.\n     *\n     * @private\n     * @static\n     * @param {string} baseName\n     * @param {string} metricName\n     * @param {Metric} metric\n     * @returns {string}\n     * @memberof MetricRegistry\n     */\n    private static defaultNameFactory(baseName: string, metricName: string, metric: Metric): string {\n        return baseName + \".\" + metricName;\n    }\n\n    /**\n     * Default clock instance if no clock instance if provided.\n     *\n     * @private\n     * @type {Clock}\n     * @memberof MetricRegistry\n     */\n    private defaultClock: Clock = new StdClock();\n    /**\n     * A collection metric references.\n     *\n     * @private\n     * @type {Array>}\n     * @memberof MetricRegistry\n     */\n    private metrics: Array> = [];\n    /**\n     * The name factory to build metric names.\n     *\n     * @private\n     * @type {NameFactory}\n     * @memberof MetricRegistry\n     */\n    private nameFactory: NameFactory = MetricRegistry.defaultNameFactory;\n    /**\n     * A collection of metric listeners.\n     *\n     * @private\n     * @type {MetricRegistryListener[]}\n     * @memberof MetricRegistry\n     */\n    private listeners: MetricRegistryListener[] = [];\n\n    /**\n     * Adds the specified listener and returns the corrsponding\n     * registration object.\n     *\n     * @param {MetricRegistryListener} listener\n     * @returns {MetricRegistryListenerRegistration}\n     * @memberof MetricRegistry\n     */\n    public addListener(listener: MetricRegistryListener): MetricRegistryListenerRegistration {\n        this.listeners.push(listener);\n        return new MetricRegistryListenerRegistration(listener, this);\n    }\n\n    /**\n     * Removes a listener manually.\n     *\n     * @param {MetricRegistryListener} listener\n     * @returns {this}\n     * @memberof MetricRegistry\n     */\n    public removeListener(listener: MetricRegistryListener): this {\n        const index = this.listeners.indexOf(listener);\n        if (index > -1) {\n            delete this.listeners[index];\n        }\n        return this;\n    }\n\n    /**\n     * Sets the default name factory for metric instances.\n     *\n     * @param {NameFactory} nameFactory\n     * @returns {this}\n     * @memberof MetricRegistry\n     */\n    public setNameFactory(nameFactory: NameFactory): this {\n        this.nameFactory = nameFactory;\n        return this;\n    }\n\n    /**\n     * Gets the default clock.\n     *\n     * @returns {Clock}\n     * @memberof MetricRegistry\n     */\n    public getDefaultClock(): Clock {\n        return this.defaultClock;\n    }\n\n    /**\n     * Sets the default clock.\n     *\n     * @param {Clock} defaultClock\n     * @returns {this}\n     * @memberof MetricRegistry\n     */\n    public setDefaultClock(defaultClock: Clock): this {\n        this.defaultClock = defaultClock;\n        return this;\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link getCounterList} instead\n     */\n    public getCounters(): Map {\n        const map: Map = new Map();\n        this.metrics\n            .filter(MetricRegistry.isCounter)\n            .forEach((registration) => map.set(registration.name, registration.metricRef as Counter));\n        return map;\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link getGaugeList} instead\n     */\n    public getGauges(): Map> {\n        const map: Map> = new Map();\n        this.metrics\n            .filter(MetricRegistry.isGauge)\n            .forEach((registration) => map.set(registration.name, registration.metricRef as Gauge));\n        return map;\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link getHistogramList} instead\n     */\n    public getHistograms(): Map {\n        const map: Map = new Map();\n        this.metrics\n            .filter(MetricRegistry.isHistogram)\n            .forEach((registration) => map.set(registration.name, registration.metricRef as Histogram));\n        return map;\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link getMeterList} instead\n     */\n    public getMeters(): Map {\n        const map: Map = new Map();\n        this.metrics\n            .filter(MetricRegistry.isMeter)\n            .forEach((registration) => map.set(registration.name, registration.metricRef as Meter));\n        return map;\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link getTimerList} instead\n     */\n    public getTimers(): Map {\n        const map: Map = new Map();\n        this.metrics\n            .filter(MetricRegistry.isTimer)\n            .forEach((registration) => map.set(registration.name, registration.metricRef as Timer));\n        return map;\n    }\n\n    /**\n     * Gets the list of all managed counter instances.\n     *\n     * @returns {Counter[]}\n     * @memberof MetricRegistry\n     */\n    public getCounterList(): Counter[] {\n        return this.metrics\n            .filter(MetricRegistry.isCounter)\n            .map((registration) => registration.metricRef as Counter);\n    }\n\n    /**\n     * Gets the list of all managed monotone counter instances.\n     *\n     * @returns {MonotoneCounter[]}\n     * @memberof MetricRegistry\n     */\n    public getMonotoneCounterList(): MonotoneCounter[] {\n        return this.metrics\n            .filter(MetricRegistry.isPureMonotoneCounter)\n            .map((registration) => registration.metricRef as MonotoneCounter);\n    }\n\n    /**\n     * Gets the list of all managed gauge instances.\n     *\n     * @returns {Array>}\n     * @memberof MetricRegistry\n     */\n    public getGaugeList(): Array> {\n        return this.metrics\n            .filter(MetricRegistry.isGauge)\n            .map((registration) => registration.metricRef as Gauge);\n    }\n\n    /**\n     * Gets the list of all managed histogram instances.\n     *\n     * @returns {Histogram[]}\n     * @memberof MetricRegistry\n     */\n    public getHistogramList(): Histogram[] {\n        return this.metrics\n            .filter(MetricRegistry.isHistogram)\n            .map((registration) => registration.metricRef as Histogram);\n    }\n\n    /**\n     * Gets the list of all managed meter instances.\n     *\n     * @returns {Meter[]}\n     * @memberof MetricRegistry\n     */\n    public getMeterList(): Meter[] {\n        return this.metrics\n            .filter(MetricRegistry.isMeter)\n            .map((registration) => registration.metricRef as Meter);\n    }\n\n    /**\n     * Gets the list of all managed timer instances.\n     *\n     * @returns {Timer[]}\n     * @memberof MetricRegistry\n     */\n    public getTimerList(): Timer[] {\n        return this.metrics\n            .filter(MetricRegistry.isTimer)\n            .map((registration) => registration.metricRef as Timer);\n    }\n\n    /**\n     * Gets a mapping of all managed metric instances regardless of the type.\n     *\n     * @returns {Map}\n     * @memberof MetricRegistry\n     */\n    public getMetrics(): Map {\n        const map: Map = new Map();\n        this.metrics\n            .forEach((registration) => map.set(registration.name, registration.metricRef));\n        return map;\n    }\n\n    /**\n     * Gets a list of all managed metric instances regardless of the type.\n     *\n     * @returns {Metric[]}\n     * @memberof MetricRegistry\n     */\n    public getMetricList(): Metric[] {\n        return this.metrics.map((metric) => metric.metricRef);\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link getMetricsByName} instead\n     */\n    public getMetric(name: string): Metric {\n        return this.getFirstByName(name);\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link getCountersByName} instead\n     */\n    public getCounter(name: string): Counter {\n        return this.getFirstByName(name);\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link getGaugesByName} instead\n     */\n    public getGauge(name: string): Gauge {\n        return this.getFirstByName>(name);\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link getHistogramsByName} instead\n     */\n    public getHistogram(name: string): Histogram {\n        return this.getFirstByName(name);\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link getMetersByName} instead\n     */\n    public getMeter(name: string): Meter {\n        return this.getFirstByName(name);\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link getTimersByName} instead\n     */\n    public getTimer(name: string): Timer {\n        return this.getFirstByName(name);\n    }\n\n    /**\n     * Gets all mamanged metric instance by name.\n     *\n     * @param {string} name\n     * @returns {Metric[]}\n     * @memberof MetricRegistry\n     */\n    public getMetricsByName(name: string): Metric[] {\n        return this.getByName(name);\n    }\n\n    /**\n     * Gets all managed counter instances by name.\n     *\n     * @param {string} name\n     * @returns {Counter[]}\n     * @memberof MetricRegistry\n     */\n    public getCountersByName(name: string): Counter[] {\n        return this.getByName(name);\n    }\n\n    /**\n     * Gets all managed monotone counter instances by name.\n     *\n     * @param {string} name\n     * @returns {MonotoneCounter[]}\n     * @memberof MetricRegistry\n     */\n    public getMonotoneCountersByName(name: string): MonotoneCounter[] {\n        return this.getByName(name);\n    }\n\n    /**\n     * Gets all managed gauge instances by name.\n     *\n     * @param {string} name\n     * @returns {Array>}\n     * @memberof MetricRegistry\n     */\n    public getGaugesByName(name: string): Array> {\n        return this.getByName>(name);\n    }\n\n    /**\n     * Gets all managed histogram instances by name.\n     *\n     * @param {string} name\n     * @returns {Histogram[]}\n     * @memberof MetricRegistry\n     */\n    public getHistogramsByname(name: string): Histogram[] {\n        return this.getByName(name);\n    }\n\n    /**\n     * Gets all managed meter instances by name.\n     *\n     * @param {string} name\n     * @returns {Meter[]}\n     * @memberof MetricRegistry\n     */\n    public getMetersByName(name: string): Meter[] {\n        return this.getByName(name);\n    }\n\n    /**\n     * Gets all managed timer instances by name.\n     *\n     * @param {string} name\n     * @returns {Timer[]}\n     * @memberof MetricRegistry\n     */\n    public getTimersByName(name: string): Timer[] {\n        return this.getByName(name);\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link removeMetrics} instead\n     */\n    public removeMetric(name: string): this {\n        const metrics: Metric[] = this.getByName(name);\n\n        if (metrics.length > 0) {\n            const index = this.metrics\n                .map((m) => m.metricRef)\n                .indexOf(metrics[0], 0);\n            if (index > -1) {\n                this.metrics.splice(index, 1);\n            }\n            this.fireMetricRemoved(name, metrics[0]);\n        }\n        return this;\n    }\n\n    /**\n     * Removes all managed metric instances by name regardless of the type.\n     *\n     * @param {string} name\n     * @returns {this}\n     * @memberof MetricRegistry\n     */\n    public removeMetrics(name: string): this {\n        const metrics: Metric[] = this.getByName(name);\n\n        metrics.forEach((metric) => {\n            const index = this.metrics\n                .map((m) => m.metricRef)\n                .indexOf(metric, 0);\n            if (index > -1) {\n                this.metrics.splice(index, 1);\n            }\n            this.fireMetricRemoved(name, metric);\n        });\n        return this;\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link removeMetrics} instead\n     */\n    public removeCounter(name: string): this {\n        return this.removeMetric(name);\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link removeMetrics} instead\n     */\n    public removeGauge(name: string): this {\n        return this.removeMetric(name);\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link removeMetrics} instead\n     */\n    public removeHistogram(name: string): this {\n        return this.removeMetric(name);\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link removeMetrics} instead\n     */\n    public removeMeter(name: string): this {\n        return this.removeMetric(name);\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link removeMetrics} instead\n     */\n    public removeTimer(name: string): this {\n        return this.removeMetric(name);\n    }\n\n    /**\n     * Builds a new counter with the given name and adds it\n     * to the registry.\n     *\n     * @param {string} name\n     * @param {string} [group=null]\n     * @param {string} [description=null]\n     * @returns {Counter}\n     * @memberof MetricRegistry\n     */\n    public newCounter(name: string, group: string = null, description: string = null): Counter {\n        const counter = new Counter(name, description);\n        this.registerMetric(counter, group, description);\n        return counter;\n    }\n\n    /**\n     * Builds a new monotone counter with the given name and adds it\n     * to the registry.\n     *\n     * @param {string} name\n     * @param {string} [group=null]\n     * @param {string} [description=null]\n     * @returns {MonotoneCounter}\n     * @memberof MetricRegistry\n     */\n    public newMonotoneCounter(name: string, group: string = null, description: string = null): MonotoneCounter {\n        const counter = new MonotoneCounter(name, description);\n        this.registerMetric(counter, group, description);\n        return counter;\n    }\n\n    /**\n     * Builds a new meter with the given name and adds it\n     * to the registry.\n     *\n     * @param {string} name\n     * @param {string} [group=null]\n     * @param {Clock} [clock=this.defaultClock]\n     * @param {number} [sampleRate=1]\n     * @param {string} [description=null]\n     * @returns {Meter}\n     * @memberof MetricRegistry\n     */\n    public newMeter(\n        name: string,\n        group: string = null,\n        clock: Clock = this.defaultClock,\n        sampleRate: number = 1,\n        description: string = null): Meter {\n\n        const meter = new Meter(clock, sampleRate, name, description);\n        this.registerMetric(meter, group, description);\n        return meter;\n    }\n\n    /**\n     * Builds a new hdr-histogram with the given name and adds it\n     * to the registry.\n     *\n     * @param {string} name\n     * @param {number} [lowest=1] is the lowest possible number that can be recorded\n     * @param {number} [max=100] is the maximum number that can be recorded\n     * @param {number} [figures=3]\n     *      the number of figures in a decimal number that will be maintained, must be between 1 and 5 (inclusive)\n     * @param {string} [group=null]\n     * @param {string} [description=null]\n     * @param {Reservoir} [reservoir=null]\n     * @returns {HdrHistogram}\n     * @memberof MetricRegistry\n     */\n    public newHdrHistogram(\n        name: string,\n        lowest: number = 1,\n        max: number = 100,\n        figures: number = 3,\n        group: string = null,\n        description: string = null,\n        buckets: Buckets = new Buckets()): HdrHistogram {\n\n        const histogram = new HdrHistogram(lowest, max, figures, name, description, buckets);\n        this.registerMetric(histogram, group, description);\n        return histogram;\n    }\n\n    /**\n     * Builds a new histogram with the given name and adds it\n     * to the registry.\n     *\n     * @param {string} name\n     * @param {string} [group=null]\n     * @param {string} [description=null]\n     * @param {Reservoir} [reservoir=null]\n     * @returns {Histogram}\n     * @memberof MetricRegistry\n     */\n    public newHistogram(\n        name: string,\n        group: string = null,\n        reservoir: Reservoir = null,\n        description: string = null,\n        buckets: Buckets = new Buckets()): Histogram {\n\n        if (!reservoir) {\n            reservoir = new SlidingWindowReservoir(1024);\n        }\n        const histogram = new Histogram(reservoir, name, description, buckets);\n        this.registerMetric(histogram, group, description);\n        return histogram;\n    }\n\n    /**\n     * Builds a new timer with the given name and adds it\n     * to the registry.\n     *\n     * @param {string} name\n     * @param {string} [group=null]\n     * @param {string} [description=null]\n     * @param {Clock} [clock=this.defaultClock]\n     * @param {Reservoir} [reservoir=null]\n     * @returns {Timer}\n     * @memberof MetricRegistry\n     */\n    public newTimer(\n        name: string,\n        group: string = null,\n        clock: Clock = this.defaultClock,\n        reservoir: Reservoir = null,\n        description: string = null,\n        buckets: Buckets = new Buckets()): Timer {\n\n        if (!reservoir) {\n            reservoir = new SlidingWindowReservoir(1024);\n        }\n        const timer = new Timer(clock, reservoir, name, description, buckets);\n        this.registerMetric(timer, group, description);\n        return timer;\n    }\n\n    /**\n     * Registers the given metric under it's name in this registry.\n     *\n     * If the metric is a metric-set the child-metrics are\n     * registered using their names the name of the metric-set is set as group.\n     *\n     * @param {Metric} metric\n     * @param {string} [group=null]\n     * @returns {this}\n     * @memberof MetricRegistry\n     */\n    public registerMetric(metric: Metric, group: string = null, description: string = null): this {\n        if (!!group) {\n            metric.setGroup(group);\n        }\n\n        if (!!description) {\n            metric.setDescription(description);\n        }\n\n        if (metric instanceof Meter ||\n            metric instanceof Counter ||\n            metric instanceof MonotoneCounter ||\n            MetricRegistry.isGauge(metric) ||\n            metric instanceof Histogram ||\n            metric instanceof Timer) {\n            this.metrics.push(new MetricRegistration(metric));\n            this.fireMetricAdded(metric.getName(), metric);\n        } else if (MetricRegistry.isMetricSet(metric)) {\n            metric.getMetricList().forEach((m: Metric) => {\n                m.setGroup(metric.getName());\n                this.registerMetric(m);\n            });\n        }\n        return this;\n    }\n\n    /**\n     * Registeres a metric by name\n     *\n     * @param {string} name\n     * @param {Metric} metric\n     * @param {string} [group=null]\n     * @deprecated since version 1.5 - use {@link registerMetric} instead\n     * @returns {this}\n     * @memberof MetricRegistry\n     */\n    public register(name: string, metric: Metric, group: string = null, description: string = null): this {\n        if (!!group) {\n            metric.setGroup(group);\n        }\n        if (!!description) {\n            metric.setDescription(description);\n        }\n\n        metric.setName(this.generateName(name, metric));\n\n        if (metric instanceof Meter ||\n            metric instanceof Counter ||\n            metric instanceof MonotoneCounter ||\n            MetricRegistry.isGauge(metric) ||\n            metric instanceof Histogram ||\n            metric instanceof Timer) {\n            this.metrics.push(new MetricRegistration(metric));\n            this.fireMetricAdded(name, metric);\n        } else if (MetricRegistry.isMetricSet(metric)) {\n            metric.getMetrics().forEach((m: Metric) => {\n                const metricName = this.nameFactory(name, m.getName(), m);\n                this.register(metricName, m);\n            });\n        }\n        return this;\n    }\n\n    /**\n     * Finds the first metric instance by name.\n     *\n     * @private\n     * @template T\n     * @param {string} name\n     * @returns {T}\n     * @memberof MetricRegistry\n     */\n    private getFirstByName(name: string): T {\n        const arr: Metric[] = this.getByName(name);\n        if (arr.length === 0) {\n            return null;\n        }\n        return arr[0] as T;\n    }\n\n    /**\n     * Gets all metric instances by name.\n     *\n     * @private\n     * @template T\n     * @param {string} name\n     * @returns {T[]}\n     * @memberof MetricRegistry\n     */\n    private getByName(name: string): T[] {\n        return this.metrics\n            .filter((metric) => metric.name === name)\n            .map((metric) => metric.metricRef) as T[];\n    }\n\n    /**\n     * Builds the name of the metric.\n     *\n     * @private\n     * @param {string} name\n     * @param {Metric} metric\n     * @returns {string}\n     * @memberof MetricRegistry\n     */\n    private generateName(name: string, metric: Metric): string {\n        if (!!metric.getGroup()) {\n            return `${metric.getGroup()}.${name}`;\n        }\n        return name;\n    }\n\n    /**\n     * Invokes all metric listeners when a new metric was added.\n     *\n     * @private\n     * @param {string} name\n     * @param {Metric} metric\n     * @memberof MetricRegistry\n     */\n    private fireMetricAdded(name: string, metric: Metric): void {\n        this.listeners.forEach((listener) => listener.metricAdded(name, metric));\n    }\n\n    /**\n     * Invokes all metric listeners when a metric was removed.\n     *\n     * @private\n     * @param {string} name\n     * @param {Metric} metric\n     * @memberof MetricRegistry\n     */\n    private fireMetricRemoved(name: string, metric: Metric): void {\n        this.listeners.forEach((listener) => listener.metricRemoved(name, metric));\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MetricRegistryListener.html":{"url":"interfaces/MetricRegistryListener.html","title":"interface - MetricRegistryListener","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  MetricRegistryListener\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/metric-registry-listener.ts\n        \n\n            \n                Description\n            \n            \n                A listener interface to keep track of metric insertion / removal.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    metricAdded\n                                \n                                \n                                    metricRemoved\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            metricAdded\n                            \n                            \n                        \n                    \n                \n                \n                    \nmetricAdded(name: string, metric: Metric)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metric-registry-listener.ts:19\n                            \n                        \n\n\n                \n                    \n                            Called when a metric was added to a MetricRegistry.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                name of the metric\n\n                                                        \n                                                \n                                                \n                                                        metric\n                                                        \n                                                                    Metric\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                metric object\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            metricRemoved\n                            \n                            \n                        \n                    \n                \n                \n                    \nmetricRemoved(name: string, metric: Metric)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metric-registry-listener.ts:28\n                            \n                        \n\n\n                \n                    \n                            Called when a metric was removed from a MetricRegistry.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        metric\n                                                        \n                                                                    Metric\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { Metric } from \"./metric\";\n\n/**\n * A listener interface to keep track of metric insertion / removal.\n *\n * @export\n * @interface MetricRegistryListener\n */\nexport interface MetricRegistryListener {\n    /**\n     * Called when a metric was added to a {@link MetricRegistry}.\n     *\n     * @param {string} name name of the metric\n     * @param {Metric} metric metric object\n     * @memberof MetricRegistryListener\n     */\n    metricAdded(name: string, metric: Metric): void;\n\n    /**\n     * Called when a metric was removed from a {@link MetricRegistry}.\n     *\n     * @param {string} name\n     * @param {Metric} metric\n     * @memberof MetricRegistryListener\n     */\n    metricRemoved(name: string, metric: Metric): void;\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MetricRegistryListenerRegistration.html":{"url":"classes/MetricRegistryListenerRegistration.html","title":"class - MetricRegistryListenerRegistration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MetricRegistryListenerRegistration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/metric-registry.ts\n        \n\n            \n                Description\n            \n            \n                Represents a registration of a MetricRegistryListener.\nThis instance can be used to safely remove the listener from registry again.\n\n            \n\n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                remove\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(listener: MetricRegistryListener, registry: MetricRegistry)\n                    \n                \n                        \n                            \n                                Defined in lib/metrics/metric-registry.ts:25\n                            \n                        \n\n                \n                    \n                            Creates an instance of MetricRegistryListenerRegistration.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        listener\n                                                  \n                                                        \n                                                                    MetricRegistryListener\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        registry\n                                                  \n                                                        \n                                                                    MetricRegistry\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            remove\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        remove()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metric-registry.ts:42\n                            \n                        \n\n\n                \n                    \n                            Removes the managed listener from the metric registry.\n\n\n                            \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { Clock, StdClock } from \"./clock\";\nimport { Counter, MonotoneCounter } from \"./counter\";\nimport { Buckets } from \"./counting\";\nimport { Gauge } from \"./gauge\";\nimport { HdrHistogram } from \"./hdr-histogram\";\nimport { Histogram } from \"./histogram\";\nimport { Meter } from \"./meter\";\nimport { BaseMetric, Metric } from \"./metric\";\nimport { MetricRegistryListener } from \"./metric-registry-listener\";\nimport { MetricSet } from \"./metric-set\";\nimport { Reservoir, SlidingWindowReservoir } from \"./reservoir\";\nimport { Timer } from \"./timer\";\n\nexport type NameFactory = (baseName: string, metricName: string, metric: Metric) => string;\n\n/**\n * Represents a registration of a {@link MetricRegistryListener}.\n * This instance can be used to safely remove the listener from registry again.\n *\n * @export\n * @class MetricRegistryListenerRegistration\n */\nexport class MetricRegistryListenerRegistration {\n\n    /**\n     * Creates an instance of MetricRegistryListenerRegistration.\n     *\n     * @param {MetricRegistryListener} listener\n     * @param {MetricRegistry} registry\n     * @memberof MetricRegistryListenerRegistration\n     */\n    public constructor(private listener: MetricRegistryListener, private registry: MetricRegistry) {}\n\n    /**\n     * Removes the managed listener from the metric registry.\n     *\n     * @returns {this}\n     * @memberof MetricRegistryListenerRegistration\n     */\n    public remove(): this {\n        this.registry.removeListener(this.listener);\n        return this;\n    }\n\n}\n\n/**\n * Proxy object for a metric (one metric can be registered with multiple names e.g. in different groups).\n *\n * @export\n * @class MetricRegistration\n * @template T\n */\nexport class MetricRegistration {\n\n    /**\n     * The metric instance.\n     *\n     * @type {T}\n     * @memberof MetricRegistration\n     */\n    public metricRef: T;\n    /**\n     * The name the metric is registered with.\n     *\n     * @type {string}\n     * @memberof MetricRegistration\n     */\n    public name: string;\n\n    /**\n     * Creates an instance of MetricRegistration.\n     *\n     * @param {T} metricRef\n     * @memberof MetricRegistration\n     */\n    public constructor(metricRef: T) {\n        this.metricRef = metricRef;\n        this.name = metricRef.getName();\n    }\n\n}\n\n/**\n * A metric registry manages metric instances.\n *\n * @export\n * @class MetricRegistry\n * @extends {BaseMetric}\n * @implements {MetricSet}\n */\nexport class MetricRegistry extends BaseMetric implements MetricSet {\n\n    /**\n     * Determines if the specified object is a {@link Counter} or references one.\n     *\n     * @static\n     * @param {*} instance\n     * @returns {instance is Counter}\n     * @memberof MetricRegistry\n     */\n    public static isCounter(instance: any): instance is Counter {\n        return instance instanceof Counter || instance.metricRef instanceof Counter;\n    }\n\n    /**\n     * Determines if the specified object is a {@link MonotoneCounter} or {@link Counter} or references one of them.\n     *\n     * @static\n     * @param {*} instance\n     * @returns {instance is MonotoneCounter}\n     * @memberof MetricRegistry\n     */\n    public static isMonotoneCounter(instance: any): instance is MonotoneCounter {\n        return instance instanceof MonotoneCounter || instance.metricRef instanceof MonotoneCounter;\n    }\n\n    /**\n     * Determines if the specified object is a {@link MonotoneCounter} or references one.\n     *\n     * @static\n     * @param {*} instance\n     * @returns {instance is MonotoneCounter}\n     * @memberof MetricRegistry\n     */\n    public static isPureMonotoneCounter(instance: any): instance is MonotoneCounter {\n        return (instance instanceof MonotoneCounter || instance.metricRef instanceof MonotoneCounter) &&\n                !MetricRegistry.isCounter(instance);\n    }\n\n    /**\n     * Determines if the specified object is a {@link Histogram} or references one.\n     *\n     * @static\n     * @param {*} instance\n     * @returns {instance is Histogram}\n     * @memberof MetricRegistry\n     */\n    public static isHistogram(instance: any): instance is Histogram {\n        return instance instanceof Histogram || instance.metricRef instanceof Histogram;\n    }\n\n    /**\n     * Determines if the specified object is a {@link Meter} or references one.\n     *\n     * @static\n     * @param {*} instance\n     * @returns {instance is Meter}\n     * @memberof MetricRegistry\n     */\n    public static isMeter(instance: any): instance is Meter {\n        return instance instanceof Meter || instance.metricRef instanceof Meter;\n    }\n\n    /**\n     * Determines if the specified object is a {@link Timer} or references one.\n     *\n     * @static\n     * @param {*} instance\n     * @returns {instance is Timer}\n     * @memberof MetricRegistry\n     */\n    public static isTimer(instance: any): instance is Timer {\n        return instance instanceof Timer || instance.metricRef instanceof Timer;\n    }\n\n    /**\n     * Determines if the specified object is a {@link Gauge} or references one.\n     *\n     * @static\n     * @template T\n     * @param {*} instance\n     * @returns {instance is Gauge}\n     * @memberof MetricRegistry\n     */\n    public static isGauge(instance: any): instance is Gauge {\n        const directGauge: boolean = !!instance.getValue && instance.getValue instanceof Function;\n        const gaugeRegistration =   !!instance.metricRef &&\n                                    !!instance.metricRef.getValue &&\n                                    instance.metricRef.getValue instanceof Function;\n        return directGauge || gaugeRegistration;\n    }\n\n    /**\n     * Determines if the specified object is a {@link MetricSet}.\n     *\n     * @static\n     * @param {*} instance\n     * @returns {instance is MetricSet}\n     * @memberof MetricRegistry\n     */\n    public static isMetricSet(instance: any): instance is MetricSet {\n        return !!instance.getMetrics && instance.getMetrics instanceof Function;\n    }\n\n    /**\n     * Standard function to generate the name for a metric.\n     *\n     * @private\n     * @static\n     * @param {string} baseName\n     * @param {string} metricName\n     * @param {Metric} metric\n     * @returns {string}\n     * @memberof MetricRegistry\n     */\n    private static defaultNameFactory(baseName: string, metricName: string, metric: Metric): string {\n        return baseName + \".\" + metricName;\n    }\n\n    /**\n     * Default clock instance if no clock instance if provided.\n     *\n     * @private\n     * @type {Clock}\n     * @memberof MetricRegistry\n     */\n    private defaultClock: Clock = new StdClock();\n    /**\n     * A collection metric references.\n     *\n     * @private\n     * @type {Array>}\n     * @memberof MetricRegistry\n     */\n    private metrics: Array> = [];\n    /**\n     * The name factory to build metric names.\n     *\n     * @private\n     * @type {NameFactory}\n     * @memberof MetricRegistry\n     */\n    private nameFactory: NameFactory = MetricRegistry.defaultNameFactory;\n    /**\n     * A collection of metric listeners.\n     *\n     * @private\n     * @type {MetricRegistryListener[]}\n     * @memberof MetricRegistry\n     */\n    private listeners: MetricRegistryListener[] = [];\n\n    /**\n     * Adds the specified listener and returns the corrsponding\n     * registration object.\n     *\n     * @param {MetricRegistryListener} listener\n     * @returns {MetricRegistryListenerRegistration}\n     * @memberof MetricRegistry\n     */\n    public addListener(listener: MetricRegistryListener): MetricRegistryListenerRegistration {\n        this.listeners.push(listener);\n        return new MetricRegistryListenerRegistration(listener, this);\n    }\n\n    /**\n     * Removes a listener manually.\n     *\n     * @param {MetricRegistryListener} listener\n     * @returns {this}\n     * @memberof MetricRegistry\n     */\n    public removeListener(listener: MetricRegistryListener): this {\n        const index = this.listeners.indexOf(listener);\n        if (index > -1) {\n            delete this.listeners[index];\n        }\n        return this;\n    }\n\n    /**\n     * Sets the default name factory for metric instances.\n     *\n     * @param {NameFactory} nameFactory\n     * @returns {this}\n     * @memberof MetricRegistry\n     */\n    public setNameFactory(nameFactory: NameFactory): this {\n        this.nameFactory = nameFactory;\n        return this;\n    }\n\n    /**\n     * Gets the default clock.\n     *\n     * @returns {Clock}\n     * @memberof MetricRegistry\n     */\n    public getDefaultClock(): Clock {\n        return this.defaultClock;\n    }\n\n    /**\n     * Sets the default clock.\n     *\n     * @param {Clock} defaultClock\n     * @returns {this}\n     * @memberof MetricRegistry\n     */\n    public setDefaultClock(defaultClock: Clock): this {\n        this.defaultClock = defaultClock;\n        return this;\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link getCounterList} instead\n     */\n    public getCounters(): Map {\n        const map: Map = new Map();\n        this.metrics\n            .filter(MetricRegistry.isCounter)\n            .forEach((registration) => map.set(registration.name, registration.metricRef as Counter));\n        return map;\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link getGaugeList} instead\n     */\n    public getGauges(): Map> {\n        const map: Map> = new Map();\n        this.metrics\n            .filter(MetricRegistry.isGauge)\n            .forEach((registration) => map.set(registration.name, registration.metricRef as Gauge));\n        return map;\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link getHistogramList} instead\n     */\n    public getHistograms(): Map {\n        const map: Map = new Map();\n        this.metrics\n            .filter(MetricRegistry.isHistogram)\n            .forEach((registration) => map.set(registration.name, registration.metricRef as Histogram));\n        return map;\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link getMeterList} instead\n     */\n    public getMeters(): Map {\n        const map: Map = new Map();\n        this.metrics\n            .filter(MetricRegistry.isMeter)\n            .forEach((registration) => map.set(registration.name, registration.metricRef as Meter));\n        return map;\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link getTimerList} instead\n     */\n    public getTimers(): Map {\n        const map: Map = new Map();\n        this.metrics\n            .filter(MetricRegistry.isTimer)\n            .forEach((registration) => map.set(registration.name, registration.metricRef as Timer));\n        return map;\n    }\n\n    /**\n     * Gets the list of all managed counter instances.\n     *\n     * @returns {Counter[]}\n     * @memberof MetricRegistry\n     */\n    public getCounterList(): Counter[] {\n        return this.metrics\n            .filter(MetricRegistry.isCounter)\n            .map((registration) => registration.metricRef as Counter);\n    }\n\n    /**\n     * Gets the list of all managed monotone counter instances.\n     *\n     * @returns {MonotoneCounter[]}\n     * @memberof MetricRegistry\n     */\n    public getMonotoneCounterList(): MonotoneCounter[] {\n        return this.metrics\n            .filter(MetricRegistry.isPureMonotoneCounter)\n            .map((registration) => registration.metricRef as MonotoneCounter);\n    }\n\n    /**\n     * Gets the list of all managed gauge instances.\n     *\n     * @returns {Array>}\n     * @memberof MetricRegistry\n     */\n    public getGaugeList(): Array> {\n        return this.metrics\n            .filter(MetricRegistry.isGauge)\n            .map((registration) => registration.metricRef as Gauge);\n    }\n\n    /**\n     * Gets the list of all managed histogram instances.\n     *\n     * @returns {Histogram[]}\n     * @memberof MetricRegistry\n     */\n    public getHistogramList(): Histogram[] {\n        return this.metrics\n            .filter(MetricRegistry.isHistogram)\n            .map((registration) => registration.metricRef as Histogram);\n    }\n\n    /**\n     * Gets the list of all managed meter instances.\n     *\n     * @returns {Meter[]}\n     * @memberof MetricRegistry\n     */\n    public getMeterList(): Meter[] {\n        return this.metrics\n            .filter(MetricRegistry.isMeter)\n            .map((registration) => registration.metricRef as Meter);\n    }\n\n    /**\n     * Gets the list of all managed timer instances.\n     *\n     * @returns {Timer[]}\n     * @memberof MetricRegistry\n     */\n    public getTimerList(): Timer[] {\n        return this.metrics\n            .filter(MetricRegistry.isTimer)\n            .map((registration) => registration.metricRef as Timer);\n    }\n\n    /**\n     * Gets a mapping of all managed metric instances regardless of the type.\n     *\n     * @returns {Map}\n     * @memberof MetricRegistry\n     */\n    public getMetrics(): Map {\n        const map: Map = new Map();\n        this.metrics\n            .forEach((registration) => map.set(registration.name, registration.metricRef));\n        return map;\n    }\n\n    /**\n     * Gets a list of all managed metric instances regardless of the type.\n     *\n     * @returns {Metric[]}\n     * @memberof MetricRegistry\n     */\n    public getMetricList(): Metric[] {\n        return this.metrics.map((metric) => metric.metricRef);\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link getMetricsByName} instead\n     */\n    public getMetric(name: string): Metric {\n        return this.getFirstByName(name);\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link getCountersByName} instead\n     */\n    public getCounter(name: string): Counter {\n        return this.getFirstByName(name);\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link getGaugesByName} instead\n     */\n    public getGauge(name: string): Gauge {\n        return this.getFirstByName>(name);\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link getHistogramsByName} instead\n     */\n    public getHistogram(name: string): Histogram {\n        return this.getFirstByName(name);\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link getMetersByName} instead\n     */\n    public getMeter(name: string): Meter {\n        return this.getFirstByName(name);\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link getTimersByName} instead\n     */\n    public getTimer(name: string): Timer {\n        return this.getFirstByName(name);\n    }\n\n    /**\n     * Gets all mamanged metric instance by name.\n     *\n     * @param {string} name\n     * @returns {Metric[]}\n     * @memberof MetricRegistry\n     */\n    public getMetricsByName(name: string): Metric[] {\n        return this.getByName(name);\n    }\n\n    /**\n     * Gets all managed counter instances by name.\n     *\n     * @param {string} name\n     * @returns {Counter[]}\n     * @memberof MetricRegistry\n     */\n    public getCountersByName(name: string): Counter[] {\n        return this.getByName(name);\n    }\n\n    /**\n     * Gets all managed monotone counter instances by name.\n     *\n     * @param {string} name\n     * @returns {MonotoneCounter[]}\n     * @memberof MetricRegistry\n     */\n    public getMonotoneCountersByName(name: string): MonotoneCounter[] {\n        return this.getByName(name);\n    }\n\n    /**\n     * Gets all managed gauge instances by name.\n     *\n     * @param {string} name\n     * @returns {Array>}\n     * @memberof MetricRegistry\n     */\n    public getGaugesByName(name: string): Array> {\n        return this.getByName>(name);\n    }\n\n    /**\n     * Gets all managed histogram instances by name.\n     *\n     * @param {string} name\n     * @returns {Histogram[]}\n     * @memberof MetricRegistry\n     */\n    public getHistogramsByname(name: string): Histogram[] {\n        return this.getByName(name);\n    }\n\n    /**\n     * Gets all managed meter instances by name.\n     *\n     * @param {string} name\n     * @returns {Meter[]}\n     * @memberof MetricRegistry\n     */\n    public getMetersByName(name: string): Meter[] {\n        return this.getByName(name);\n    }\n\n    /**\n     * Gets all managed timer instances by name.\n     *\n     * @param {string} name\n     * @returns {Timer[]}\n     * @memberof MetricRegistry\n     */\n    public getTimersByName(name: string): Timer[] {\n        return this.getByName(name);\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link removeMetrics} instead\n     */\n    public removeMetric(name: string): this {\n        const metrics: Metric[] = this.getByName(name);\n\n        if (metrics.length > 0) {\n            const index = this.metrics\n                .map((m) => m.metricRef)\n                .indexOf(metrics[0], 0);\n            if (index > -1) {\n                this.metrics.splice(index, 1);\n            }\n            this.fireMetricRemoved(name, metrics[0]);\n        }\n        return this;\n    }\n\n    /**\n     * Removes all managed metric instances by name regardless of the type.\n     *\n     * @param {string} name\n     * @returns {this}\n     * @memberof MetricRegistry\n     */\n    public removeMetrics(name: string): this {\n        const metrics: Metric[] = this.getByName(name);\n\n        metrics.forEach((metric) => {\n            const index = this.metrics\n                .map((m) => m.metricRef)\n                .indexOf(metric, 0);\n            if (index > -1) {\n                this.metrics.splice(index, 1);\n            }\n            this.fireMetricRemoved(name, metric);\n        });\n        return this;\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link removeMetrics} instead\n     */\n    public removeCounter(name: string): this {\n        return this.removeMetric(name);\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link removeMetrics} instead\n     */\n    public removeGauge(name: string): this {\n        return this.removeMetric(name);\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link removeMetrics} instead\n     */\n    public removeHistogram(name: string): this {\n        return this.removeMetric(name);\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link removeMetrics} instead\n     */\n    public removeMeter(name: string): this {\n        return this.removeMetric(name);\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link removeMetrics} instead\n     */\n    public removeTimer(name: string): this {\n        return this.removeMetric(name);\n    }\n\n    /**\n     * Builds a new counter with the given name and adds it\n     * to the registry.\n     *\n     * @param {string} name\n     * @param {string} [group=null]\n     * @param {string} [description=null]\n     * @returns {Counter}\n     * @memberof MetricRegistry\n     */\n    public newCounter(name: string, group: string = null, description: string = null): Counter {\n        const counter = new Counter(name, description);\n        this.registerMetric(counter, group, description);\n        return counter;\n    }\n\n    /**\n     * Builds a new monotone counter with the given name and adds it\n     * to the registry.\n     *\n     * @param {string} name\n     * @param {string} [group=null]\n     * @param {string} [description=null]\n     * @returns {MonotoneCounter}\n     * @memberof MetricRegistry\n     */\n    public newMonotoneCounter(name: string, group: string = null, description: string = null): MonotoneCounter {\n        const counter = new MonotoneCounter(name, description);\n        this.registerMetric(counter, group, description);\n        return counter;\n    }\n\n    /**\n     * Builds a new meter with the given name and adds it\n     * to the registry.\n     *\n     * @param {string} name\n     * @param {string} [group=null]\n     * @param {Clock} [clock=this.defaultClock]\n     * @param {number} [sampleRate=1]\n     * @param {string} [description=null]\n     * @returns {Meter}\n     * @memberof MetricRegistry\n     */\n    public newMeter(\n        name: string,\n        group: string = null,\n        clock: Clock = this.defaultClock,\n        sampleRate: number = 1,\n        description: string = null): Meter {\n\n        const meter = new Meter(clock, sampleRate, name, description);\n        this.registerMetric(meter, group, description);\n        return meter;\n    }\n\n    /**\n     * Builds a new hdr-histogram with the given name and adds it\n     * to the registry.\n     *\n     * @param {string} name\n     * @param {number} [lowest=1] is the lowest possible number that can be recorded\n     * @param {number} [max=100] is the maximum number that can be recorded\n     * @param {number} [figures=3]\n     *      the number of figures in a decimal number that will be maintained, must be between 1 and 5 (inclusive)\n     * @param {string} [group=null]\n     * @param {string} [description=null]\n     * @param {Reservoir} [reservoir=null]\n     * @returns {HdrHistogram}\n     * @memberof MetricRegistry\n     */\n    public newHdrHistogram(\n        name: string,\n        lowest: number = 1,\n        max: number = 100,\n        figures: number = 3,\n        group: string = null,\n        description: string = null,\n        buckets: Buckets = new Buckets()): HdrHistogram {\n\n        const histogram = new HdrHistogram(lowest, max, figures, name, description, buckets);\n        this.registerMetric(histogram, group, description);\n        return histogram;\n    }\n\n    /**\n     * Builds a new histogram with the given name and adds it\n     * to the registry.\n     *\n     * @param {string} name\n     * @param {string} [group=null]\n     * @param {string} [description=null]\n     * @param {Reservoir} [reservoir=null]\n     * @returns {Histogram}\n     * @memberof MetricRegistry\n     */\n    public newHistogram(\n        name: string,\n        group: string = null,\n        reservoir: Reservoir = null,\n        description: string = null,\n        buckets: Buckets = new Buckets()): Histogram {\n\n        if (!reservoir) {\n            reservoir = new SlidingWindowReservoir(1024);\n        }\n        const histogram = new Histogram(reservoir, name, description, buckets);\n        this.registerMetric(histogram, group, description);\n        return histogram;\n    }\n\n    /**\n     * Builds a new timer with the given name and adds it\n     * to the registry.\n     *\n     * @param {string} name\n     * @param {string} [group=null]\n     * @param {string} [description=null]\n     * @param {Clock} [clock=this.defaultClock]\n     * @param {Reservoir} [reservoir=null]\n     * @returns {Timer}\n     * @memberof MetricRegistry\n     */\n    public newTimer(\n        name: string,\n        group: string = null,\n        clock: Clock = this.defaultClock,\n        reservoir: Reservoir = null,\n        description: string = null,\n        buckets: Buckets = new Buckets()): Timer {\n\n        if (!reservoir) {\n            reservoir = new SlidingWindowReservoir(1024);\n        }\n        const timer = new Timer(clock, reservoir, name, description, buckets);\n        this.registerMetric(timer, group, description);\n        return timer;\n    }\n\n    /**\n     * Registers the given metric under it's name in this registry.\n     *\n     * If the metric is a metric-set the child-metrics are\n     * registered using their names the name of the metric-set is set as group.\n     *\n     * @param {Metric} metric\n     * @param {string} [group=null]\n     * @returns {this}\n     * @memberof MetricRegistry\n     */\n    public registerMetric(metric: Metric, group: string = null, description: string = null): this {\n        if (!!group) {\n            metric.setGroup(group);\n        }\n\n        if (!!description) {\n            metric.setDescription(description);\n        }\n\n        if (metric instanceof Meter ||\n            metric instanceof Counter ||\n            metric instanceof MonotoneCounter ||\n            MetricRegistry.isGauge(metric) ||\n            metric instanceof Histogram ||\n            metric instanceof Timer) {\n            this.metrics.push(new MetricRegistration(metric));\n            this.fireMetricAdded(metric.getName(), metric);\n        } else if (MetricRegistry.isMetricSet(metric)) {\n            metric.getMetricList().forEach((m: Metric) => {\n                m.setGroup(metric.getName());\n                this.registerMetric(m);\n            });\n        }\n        return this;\n    }\n\n    /**\n     * Registeres a metric by name\n     *\n     * @param {string} name\n     * @param {Metric} metric\n     * @param {string} [group=null]\n     * @deprecated since version 1.5 - use {@link registerMetric} instead\n     * @returns {this}\n     * @memberof MetricRegistry\n     */\n    public register(name: string, metric: Metric, group: string = null, description: string = null): this {\n        if (!!group) {\n            metric.setGroup(group);\n        }\n        if (!!description) {\n            metric.setDescription(description);\n        }\n\n        metric.setName(this.generateName(name, metric));\n\n        if (metric instanceof Meter ||\n            metric instanceof Counter ||\n            metric instanceof MonotoneCounter ||\n            MetricRegistry.isGauge(metric) ||\n            metric instanceof Histogram ||\n            metric instanceof Timer) {\n            this.metrics.push(new MetricRegistration(metric));\n            this.fireMetricAdded(name, metric);\n        } else if (MetricRegistry.isMetricSet(metric)) {\n            metric.getMetrics().forEach((m: Metric) => {\n                const metricName = this.nameFactory(name, m.getName(), m);\n                this.register(metricName, m);\n            });\n        }\n        return this;\n    }\n\n    /**\n     * Finds the first metric instance by name.\n     *\n     * @private\n     * @template T\n     * @param {string} name\n     * @returns {T}\n     * @memberof MetricRegistry\n     */\n    private getFirstByName(name: string): T {\n        const arr: Metric[] = this.getByName(name);\n        if (arr.length === 0) {\n            return null;\n        }\n        return arr[0] as T;\n    }\n\n    /**\n     * Gets all metric instances by name.\n     *\n     * @private\n     * @template T\n     * @param {string} name\n     * @returns {T[]}\n     * @memberof MetricRegistry\n     */\n    private getByName(name: string): T[] {\n        return this.metrics\n            .filter((metric) => metric.name === name)\n            .map((metric) => metric.metricRef) as T[];\n    }\n\n    /**\n     * Builds the name of the metric.\n     *\n     * @private\n     * @param {string} name\n     * @param {Metric} metric\n     * @returns {string}\n     * @memberof MetricRegistry\n     */\n    private generateName(name: string, metric: Metric): string {\n        if (!!metric.getGroup()) {\n            return `${metric.getGroup()}.${name}`;\n        }\n        return name;\n    }\n\n    /**\n     * Invokes all metric listeners when a new metric was added.\n     *\n     * @private\n     * @param {string} name\n     * @param {Metric} metric\n     * @memberof MetricRegistry\n     */\n    private fireMetricAdded(name: string, metric: Metric): void {\n        this.listeners.forEach((listener) => listener.metricAdded(name, metric));\n    }\n\n    /**\n     * Invokes all metric listeners when a metric was removed.\n     *\n     * @private\n     * @param {string} name\n     * @param {Metric} metric\n     * @memberof MetricRegistry\n     */\n    private fireMetricRemoved(name: string, metric: Metric): void {\n        this.listeners.forEach((listener) => listener.metricRemoved(name, metric));\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MetricReporterOptions.html":{"url":"interfaces/MetricReporterOptions.html","title":"interface - MetricReporterOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  MetricReporterOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/reporter/metric-reporter.ts\n        \n\n            \n                Description\n            \n            \n                Options for the MetricReporter.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        clock\n                                \n                                \n                                            Optional\n                                        minReportingTimeout\n                                \n                                \n                                            Optional\n                                        tags\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        clock\n                                    \n                                \n                                \n                                    \n                                        clock:     Clock\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Clock\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Clock used to determine the date for the reporting as well as the minimum-reporting timeout feature.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        minReportingTimeout\n                                    \n                                \n                                \n                                    \n                                        minReportingTimeout:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Timeout in minutes a metric need to be included in the report without having changed.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tags\n                                    \n                                \n                                \n                                    \n                                        tags:     Map\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Map\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Tags for this reporter instance - to be combined with the tags of each metric while reporting.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { Clock } from \"../clock\";\nimport { Counter, MonotoneCounter } from \"../counter\";\nimport { Event } from \"../event\";\nimport { Gauge } from \"../gauge\";\nimport { Histogram } from \"../histogram\";\nimport { Meter } from \"../meter\";\nimport { Metric } from \"../metric\";\nimport { MetricRegistry } from \"../metric-registry\";\nimport { Taggable } from \"../taggable\";\nimport { MILLISECOND, MINUTE } from \"../time-unit\";\nimport { Timer } from \"../timer\";\nimport { MetricEntry } from \"./metric-entry\";\nimport { MetricType } from \"./metric-type\";\n\n/**\n * Helper interface for handling tags.\n */\nexport interface Tags {\n    [key: string]: string;\n}\n\n/**\n * Helper interface for a reporting run.\n */\nexport interface OverallReportContext {\n    [key: string]: any;\n}\n\n/**\n * Helper interface for reporting runs.\n */\nexport interface MetricSetReportContext {\n    /**\n     * The OverallReportContext this context is running in.\n     *\n     * @type {OverallReportContext}\n     * @memberof ReportingContext\n     */\n    overallCtx: OverallReportContext;\n    /**\n     * The array of metric instance that is currently reported.\n     *\n     * @type {M[]}\n     * @memberof ReportingContext\n     */\n    metrics: M[];\n    /**\n     * The registry the metric are registered in.\n     *\n     * @type {MetricRegistry}\n     * @memberof ReportingContext\n     */\n    readonly registry: MetricRegistry;\n    /**\n     * The current date.\n     *\n     * @type {Date}\n     * @memberof ReportingContext\n     */\n    readonly date: Date;\n    /**\n     * The type of the metrics in the {@link #metrics} array.\n     *\n     * @type {MetricType}\n     * @memberof ReportingContext\n     */\n    readonly type: MetricType;\n}\n\n/**\n * Helper interface for reporting results.\n */\nexport interface ReportingResult {\n    /**\n     * The metric the result refers to.\n     *\n     * @type {M}\n     * @memberof ReportingResult\n     */\n    readonly metric: M;\n    /**\n     * The reporting result - implementation specific.\n     *\n     * @type {T}\n     * @memberof ReportingResult\n     */\n    readonly result: T;\n}\n\n/**\n * Options for the {@link MetricReporter}.\n *\n * @export\n * @interface MetricReporterOptions\n */\nexport interface MetricReporterOptions {\n    /**\n     * Clock used to determine the date for the reporting as well as the minimum-reporting timeout feature.\n     *\n     * @type {Clock}\n     * @memberof MetricReporterOptions\n     */\n    readonly clock?: Clock;\n    /**\n     * Timeout in minutes a metric need to be included in the report without having changed.\n     *\n     * @type {number}\n     * @memberof MetricReporterOptions\n     */\n    minReportingTimeout?: number;\n    /**\n     * Tags for this reporter instance - to be combined with the tags of each metric while reporting.\n     *\n     * @type {Map}\n     * @memberof MetricReporterOptions\n     */\n    tags?: Map;\n}\n\n/**\n * Interface for metric-reporter.\n *\n * @export\n * @interface IMetricReporter\n */\nexport interface IMetricReporter {\n    /**\n     * Gets the reporter tags.\n     *\n     * @returns {Map}\n     * @memberof IMetricReporter\n     */\n    getTags(): Map;\n\n    /**\n     * Sets the reporter tags.\n     *\n     * @param {Map} tags\n     * @returns {this}\n     * @memberof IMetricReporter\n     */\n    setTags(tags: Map): this;\n\n    /**\n     * Implementations start reporting metrics when called.\n     *\n     * @abstract\n     * @returns {Promise}\n     * @memberof IMetricReporter\n     */\n    start(): Promise;\n\n    /**\n     * Implementations stop reporting metrics when called.\n     *\n     * @abstract\n     * @returns {Promise}\n     * @memberof IMetricReporter\n     */\n    stop(): Promise;\n\n    /**\n     * Adds a new {@link MetricRegistry} to be reported.\n     *\n     * @param {MetricRegistry} metricRegistry\n     * @returns {this}\n     * @memberof IMetricReporter\n     */\n    addMetricRegistry(metricRegistry: MetricRegistry): this;\n\n    /**\n     * Removes the given {@link MetricRegistry} if it was previously added.\n     *\n     * @param {MetricRegistry} metricRegistry\n     * @returns {this}\n     * @memberof IMetricReporter\n     */\n    removeMetricRegistry(metricRegistry: MetricRegistry): this;\n\n    /**\n     * Reports an {@link Event}.\n     *\n     * Implementations can choose how to process ad-hoc events, wether it's\n     * queuing the events to the next call to report or sending events\n     * immediately.\n     *\n     * Also the usual reporting process of calling {@link #beforeReport}, do the reporting\n     * and call {@link #afterReport} may not be applied for ad-hoc events.\n     *\n     * This implementation does nothing and always resolved the specified evnet.\n     *\n     * @param {MetricRegistry} event\n     * @returns {this}\n     * @memberof IMetricReporter\n     */\n    reportEvent>(event: TEvent): Promise;\n\n    /**\n     * Sends events remaining in the queue (if a queue is used in the implementation).\n     *\n     * @returns {Promise}\n     * @memberof IMetricReporter\n     */\n    flushEvents(): Promise;\n}\n\n/**\n * Base-class for metric-reporter implementations.\n *\n * @export\n * @abstract\n * @class MetricReporter\n */\nexport abstract class MetricReporter implements IMetricReporter {\n\n    /**\n     * {@link MetricRegistry} instances.\n     *\n     * @protected\n     * @type {MetricRegistry[]}\n     * @memberof MetricReporter\n     */\n    protected readonly metricRegistries: MetricRegistry[] = [];\n    /**\n     * options for this reporter instance.\n     *\n     * @protected\n     * @type {O}\n     * @memberof MetricReporter\n     */\n    protected readonly options: O;\n    /**\n     * Keeps track of the reporting states for each metric.\n     *\n     * @protected\n     * @type {Map}\n     * @memberof MetricReporter\n     */\n    protected readonly metricStates: Map = new Map();\n\n    /**\n     * Creates an instance of MetricReporter.\n     *\n     * @param {O} options\n     * @param {Map} [tags=new Map()]\n     *          tags for this reporter instance - to be combined with the tags of each metric while reporting\n     * @param {Clock} [clock=new StdClock()]\n     *          clock used to determine the date for the reporting as well as the minimum-reporting timeout feature\n     * @param {number} [minReportingTimeout=1]\n     *          timeout in minutes a metric need to be included in the report without having changed\n     * @memberof MetricReporter\n     */\n    public constructor(options: O) {\n        this.options = options;\n    }\n\n    /**\n     * Gets the reporter tags.\n     *\n     * @returns {Map}\n     * @memberof MetricReporter\n     */\n    public getTags(): Map {\n        return this.options.tags;\n    }\n\n    /**\n     * Sets the reporter tags.\n     *\n     * @param {Map} tags\n     * @returns {this}\n     * @memberof MetricReporter\n     */\n    public setTags(tags: Map): this {\n        this.options.tags = tags;\n        return this;\n    }\n\n    /**\n     * Implementations start reporting metrics when called.\n     *\n     * @abstract\n     * @returns {Promise}\n     * @memberof MetricReporter\n     */\n    public abstract start(): Promise;\n\n    /**\n     * Implementations stop reporting metrics when called.\n     *\n     * @abstract\n     * @returns {Promise}\n     * @memberof MetricReporter\n     */\n    public abstract stop(): Promise;\n\n    /**\n     * Adds a new {@link MetricRegistry} to be reported.\n     *\n     * @param {MetricRegistry} metricRegistry\n     * @returns {this}\n     * @memberof MetricReporter\n     */\n    public addMetricRegistry(metricRegistry: MetricRegistry): this {\n        this.metricRegistries.push(metricRegistry);\n        return this;\n    }\n\n    /**\n     * Removes the given {@link MetricRegistry} if it was previously added.\n     *\n     * @param {MetricRegistry} metricRegistry\n     * @returns {this}\n     * @memberof MetricReporter\n     */\n    public removeMetricRegistry(metricRegistry: MetricRegistry): this {\n        const index: number = this.metricRegistries.indexOf(metricRegistry);\n        if (index > -1) {\n            this.metricRegistries.splice(index, 1);\n        }\n        return this;\n    }\n\n    /**\n     * Reports an {@link Event}.\n     *\n     * Implementations can choose how to process ad-hoc events, wether it's\n     * queuing the events to the next call to report or sending events\n     * immediately.\n     *\n     * Also the usual reporting process of calling {@link #beforeReport}, do the reporting\n     * and call {@link #afterReport} may not be applied for ad-hoc events.\n     *\n     * This implementation does nothing and always resolved the specified event.\n     *\n     * @param {Event} event\n     * @returns {Promise}\n     * @memberof MetricReporter\n     */\n    public async reportEvent>(event: TEvent): Promise {\n        return event;\n    }\n\n    /**\n     * Sends events remaining in the queue (if a queue is used in the implementation).\n     *\n     * @returns {Promise}\n     * @memberof MetricReporter\n     */\n    public async flushEvents(): Promise {\n    }\n\n    /**\n     * Called be before each reporting run.\n     *\n     * @protected\n     * @memberof MetricReporter\n     */\n    protected async beforeReport(ctx: OverallReportContext) {\n    }\n\n    /**\n     * Called after each reporting run.\n     *\n     * @protected\n     * @memberof MetricReporter\n     */\n    protected async afterReport(ctx: OverallReportContext) {\n    }\n\n    /**\n     * Run the reporting procedures. Calls {@link #beforeReport} before each\n     * {@link MetricRegistry}'s metrics are reported and {@link #afterReport}\n     * afterwards.\n     *\n     * @protected\n     * @memberof MetricReporter\n     */\n    protected async report(): Promise {\n        if (this.metricRegistries && this.metricRegistries.length > 0) {\n            const ctx = this.createOverallReportContext();\n            await this.beforeReport(ctx);\n            for (const registry of this.metricRegistries) {\n                await this.reportMetricRegistry(ctx, registry);\n            }\n            await this.afterReport(ctx);\n            return ctx;\n        }\n        return {};\n    }\n\n    /**\n     * Reporting function for a sinlge {@link MetricRegistry}.\n     * Calls {@link #createReportingContext} for each metric type.\n     * Afterwarsds calls {@link #reportMetrics} for each of the\n     * registry's metrics - grouped by type.\n     * And finally calls {@link #handleResults} for each of the results.\n     *\n     * @protected\n     * @param {MetricRegistry} registry\n     * @memberof MetricReporter\n     */\n    protected async reportMetricRegistry(ctx: OverallReportContext, registry: MetricRegistry) {\n        const date: Date = new Date(this.options.clock.time().milliseconds);\n        const counterCtx: MetricSetReportContext = this\n            .createMetricSetReportContext(ctx, registry, date, \"counter\");\n        const gaugeCtx: MetricSetReportContext> = this\n            .createMetricSetReportContext(ctx, registry, date, \"gauge\");\n        const histogramCtx: MetricSetReportContext = this\n            .createMetricSetReportContext(ctx, registry, date, \"histogram\");\n        const meterCtx: MetricSetReportContext = this\n            .createMetricSetReportContext(ctx, registry, date, \"meter\");\n        const timerCtx: MetricSetReportContext = this\n            .createMetricSetReportContext(ctx, registry, date, \"timer\");\n\n        counterCtx.metrics = registry.getMonotoneCounterList();\n        const monotoneCounterResults = this.reportMetrics(ctx, counterCtx,\n            (counter: MonotoneCounter) => this.reportCounter(counter, counterCtx),\n            (counter: MonotoneCounter) => counter.getCount());\n\n        counterCtx.metrics = registry.getCounterList();\n        const counterResults = this.reportMetrics(ctx, counterCtx as MetricSetReportContext,\n            (counter: Counter) => this.reportCounter(counter, counterCtx),\n            (counter: Counter) => counter.getCount());\n\n        gaugeCtx.metrics = registry.getGaugeList();\n        const gaugeResults = this.reportMetrics(ctx, gaugeCtx,\n            (gauge: Gauge) => this.reportGauge(gauge, gaugeCtx),\n            (gauge: Gauge) => gauge.getValue());\n\n        histogramCtx.metrics = registry.getHistogramList();\n        const histogramResults = this.reportMetrics(ctx, histogramCtx,\n            (histogram: Histogram) => this.reportHistogram(histogram, histogramCtx),\n            (histogram: Histogram) => histogram.getCount());\n\n        meterCtx.metrics = registry.getMeterList();\n        const meterResults = this.reportMetrics(ctx, meterCtx,\n            (meter: Meter) => this.reportMeter(meter, meterCtx),\n            (meter: Meter) => meter.getCount());\n\n        timerCtx.metrics = registry.getTimerList();\n        const timerResults = this.reportMetrics(ctx, timerCtx,\n            (timer: Timer) => this.reportTimer(timer, timerCtx),\n            (timer: Timer) => timer.getCount());\n\n        await this.handleResults(ctx, registry, date, \"counter\", monotoneCounterResults);\n        await this.handleResults(ctx, registry, date, \"counter\", counterResults);\n        await this.handleResults(ctx, registry, date, \"gauge\", gaugeResults);\n        await this.handleResults(ctx, registry, date, \"histogram\", histogramResults);\n        await this.handleResults(ctx, registry, date, \"meter\", meterResults);\n        await this.handleResults(ctx, registry, date, \"timer\", timerResults);\n    }\n\n    /**\n     * Creates an OverallReportContext.\n     *\n     * @protected\n     * @returns {OverallReportContext}\n     * @memberof MetricReporter\n     */\n    protected createOverallReportContext(): OverallReportContext {\n        return {\n        };\n    }\n\n    /**\n     * Creates a MetricSetReportContext with the specified arguments.\n     *\n     * @protected\n     * @param {OverallReportContext} overallCtx\n     * @param {MetricRegistry} registry\n     * @param {Date} date\n     * @param {MetricType} type\n     * @returns {MetricSetReportContext}\n     * @memberof MetricReporter\n     */\n    protected createMetricSetReportContext(\n        overallCtx: OverallReportContext,\n        registry: MetricRegistry,\n        date: Date,\n        type: MetricType): MetricSetReportContext {\n        return {\n            date,\n            metrics: [],\n            overallCtx,\n            registry,\n            type,\n        };\n    }\n\n    /**\n     * Filters out each metric that does not necessarily need to be reported\n     * and calls the specified reporting function for the remaining.\n     *\n     * @protected\n     * @template M type of the metric\n     * @template C typed ReportingContext\n     * @param {C} ctx\n     * @param {(metric: M, ctx: C) => T} reportFunction\n     * @param {(metric: M, ctx: C) => number} lastModifiedFunction\n     * @returns {Array>}\n     * @memberof MetricReporter\n     */\n    protected reportMetrics>(\n        overallCtx: OverallReportContext,\n        ctx: C,\n        reportFunction: (metric: M, ctx: C) => T,\n        lastModifiedFunction: (metric: M, ctx: C) => number): Array> {\n\n        return ctx.metrics\n            .filter((metric) => {\n                const metricId = (metric as any).id;\n                return !metricId || this.hasChanged(metricId, lastModifiedFunction(metric, ctx), ctx.date.getTime());\n            })\n            .map((metric) => ({\n                metric,\n                result: reportFunction(metric, ctx),\n            }))\n            .filter((result) => !!result.result);\n    }\n\n    /**\n     * Handles the reporting result for a group of metric instances.\n     *\n     * @protected\n     * @abstract\n     * @param {OverallReportContext} ctx\n     * @param {MetricRegistry} registry\n     * @param {Date} date\n     * @param {MetricType} type\n     * @param {Array>} results\n     * @returns {Promise}\n     * @memberof MetricReporter\n     */\n    protected abstract handleResults(\n        ctx: OverallReportContext,\n        registry: MetricRegistry,\n        date: Date,\n        type: MetricType,\n        results: Array>): Promise;\n\n    /**\n     * Does the reporting for a counter or monotone counter.\n     *\n     * @protected\n     * @abstract\n     * @param {(MonotoneCounter | Counter)} counter\n     * @param {(MetricSetReportContext)} ctx\n     * @returns {T}\n     * @memberof MetricReporter\n     */\n    protected abstract reportCounter(\n        counter: MonotoneCounter | Counter, ctx: MetricSetReportContext): T;\n\n    /**\n     * Does the reporting for a gauge.\n     *\n     * @protected\n     * @abstract\n     * @param {Gauge} gauge\n     * @param {MetricSetReportContext>} ctx\n     * @returns {T}\n     * @memberof MetricReporter\n     */\n    protected abstract reportGauge(gauge: Gauge, ctx: MetricSetReportContext>): T;\n\n    /**\n     * Does the reporting for a histogram.\n     *\n     * @protected\n     * @abstract\n     * @param {Histogram} histogram\n     * @param {MetricSetReportContext} ctx\n     * @returns {T}\n     * @memberof MetricReporter\n     */\n    protected abstract reportHistogram(histogram: Histogram, ctx: MetricSetReportContext): T;\n\n    /**\n     * Does the reporting for a meter.\n     *\n     * @protected\n     * @abstract\n     * @param {Meter} meter\n     * @param {MetricSetReportContext} ctx\n     * @returns {T}\n     * @memberof MetricReporter\n     */\n    protected abstract reportMeter(meter: Meter, ctx: MetricSetReportContext): T;\n\n    /**\n     * Does the reporting for a timer.\n     *\n     * @protected\n     * @abstract\n     * @param {Timer} timer\n     * @param {MetricSetReportContext} ctx\n     * @returns {T}\n     * @memberof MetricReporter\n     */\n    protected abstract reportTimer(timer: Timer, ctx: MetricSetReportContext): T;\n\n    /**\n     * Determines if a metric instance has changed it's value since the last check.\n     * This is always true if the minimal-reporting timeout was reached.\n     *\n     * @private\n     * @param {number} metricId\n     * @param {number} lastValue\n     * @param {number} date\n     * @returns {boolean}\n     * @memberof MetricReporter\n     */\n    protected hasChanged(metricId: number, lastValue: number, date: number): boolean {\n        let changed = true;\n        let metricEntry = {\n            lastReport: 0,\n            lastValue,\n        };\n        if (this.metricStates.has(metricId)) {\n            metricEntry = this.metricStates.get(metricId);\n            changed = metricEntry.lastValue !== lastValue;\n            if (!changed) {\n                const minReportingTimeout = MINUTE.convertTo(this.options.minReportingTimeout, MILLISECOND);\n                changed = metricEntry.lastReport + minReportingTimeout  tags[key] = tag);\n        }\n        if (registry && registry.getTags()) {\n            registry.getTags().forEach((tag, key) => tags[key] = tag);\n        }\n        if (taggable.getTags()) {\n            taggable.getTags().forEach((tag, key) => tags[key] = tag);\n        }\n        return tags;\n    }\n\n    /**\n     * Checks the number and gives it back or zero (0) if it's not a number.\n     *\n     * @protected\n     * @param {number} value\n     * @returns {number}\n     * @memberof MetricReporter\n     */\n    protected getNumber(value: number): number {\n        if (isNaN(value)) {\n            return 0;\n        }\n        return value;\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MetricSet.html":{"url":"interfaces/MetricSet.html","title":"interface - MetricSet","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  MetricSet\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/metric-set.ts\n        \n\n            \n                Description\n            \n            \n                Represents a collection of metric instances as a single metric.\n\n            \n\n            \n                Extends\n            \n            \n                    Metric\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    getMetricList\n                                \n                                \n                                    getMetrics\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getMetricList\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetMetricList()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metric-set.ts:29\n                            \n                        \n\n\n                \n                    \n                            Gets a list of all Metric instances.\n\n\n                            \n                            \n                            \n                                Returns :     Metric[]\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getMetrics\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetMetrics()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metric-set.ts:21\n                            \n                        \n\n\n                \n                    \n                            Gets a mapping from names to metric instances.\n\n\n                            \n                            \n                            \n                                Returns :     Map\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { Metric } from \"./metric\";\n\n/**\n * Represents a collection of metric instances as a single metric.\n *\n * @export\n * @interface MetricSet\n * @extends {Metric}\n */\nexport interface MetricSet extends Metric {\n\n    /**\n     * Gets a mapping from names to metric instances.\n     *\n     * @deprecated since version 1.3 - use {@link getMetricList} instead\n     * @returns {Map}\n     * @memberof MetricSet\n     */\n    getMetrics(): Map;\n\n    /**\n     * Gets a list of all {@link Metric} instances.\n     *\n     * @returns {Metric[]}\n     * @memberof MetricSet\n     */\n    getMetricList(): Metric[];\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MetricSetReportContext.html":{"url":"interfaces/MetricSetReportContext.html","title":"interface - MetricSetReportContext","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  MetricSetReportContext\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/reporter/metric-reporter.ts\n        \n\n            \n                Description\n            \n            \n                Helper interface for reporting runs.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        date\n                                \n                                \n                                        metrics\n                                \n                                \n                                        overallCtx\n                                \n                                \n                                        registry\n                                \n                                \n                                        type\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        date\n                                    \n                                \n                                \n                                    \n                                        date:     Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Date\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The current date.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        metrics\n                                    \n                                \n                                \n                                    \n                                        metrics:     M[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     M[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The array of metric instance that is currently reported.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        overallCtx\n                                    \n                                \n                                \n                                    \n                                        overallCtx:     OverallReportContext\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     OverallReportContext\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The OverallReportContext this context is running in.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        registry\n                                    \n                                \n                                \n                                    \n                                        registry:     MetricRegistry\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     MetricRegistry\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The registry the metric are registered in.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                    \n                                \n                                \n                                    \n                                        type:     MetricType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     MetricType\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The type of the metrics in the #metrics array.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { Clock } from \"../clock\";\nimport { Counter, MonotoneCounter } from \"../counter\";\nimport { Event } from \"../event\";\nimport { Gauge } from \"../gauge\";\nimport { Histogram } from \"../histogram\";\nimport { Meter } from \"../meter\";\nimport { Metric } from \"../metric\";\nimport { MetricRegistry } from \"../metric-registry\";\nimport { Taggable } from \"../taggable\";\nimport { MILLISECOND, MINUTE } from \"../time-unit\";\nimport { Timer } from \"../timer\";\nimport { MetricEntry } from \"./metric-entry\";\nimport { MetricType } from \"./metric-type\";\n\n/**\n * Helper interface for handling tags.\n */\nexport interface Tags {\n    [key: string]: string;\n}\n\n/**\n * Helper interface for a reporting run.\n */\nexport interface OverallReportContext {\n    [key: string]: any;\n}\n\n/**\n * Helper interface for reporting runs.\n */\nexport interface MetricSetReportContext {\n    /**\n     * The OverallReportContext this context is running in.\n     *\n     * @type {OverallReportContext}\n     * @memberof ReportingContext\n     */\n    overallCtx: OverallReportContext;\n    /**\n     * The array of metric instance that is currently reported.\n     *\n     * @type {M[]}\n     * @memberof ReportingContext\n     */\n    metrics: M[];\n    /**\n     * The registry the metric are registered in.\n     *\n     * @type {MetricRegistry}\n     * @memberof ReportingContext\n     */\n    readonly registry: MetricRegistry;\n    /**\n     * The current date.\n     *\n     * @type {Date}\n     * @memberof ReportingContext\n     */\n    readonly date: Date;\n    /**\n     * The type of the metrics in the {@link #metrics} array.\n     *\n     * @type {MetricType}\n     * @memberof ReportingContext\n     */\n    readonly type: MetricType;\n}\n\n/**\n * Helper interface for reporting results.\n */\nexport interface ReportingResult {\n    /**\n     * The metric the result refers to.\n     *\n     * @type {M}\n     * @memberof ReportingResult\n     */\n    readonly metric: M;\n    /**\n     * The reporting result - implementation specific.\n     *\n     * @type {T}\n     * @memberof ReportingResult\n     */\n    readonly result: T;\n}\n\n/**\n * Options for the {@link MetricReporter}.\n *\n * @export\n * @interface MetricReporterOptions\n */\nexport interface MetricReporterOptions {\n    /**\n     * Clock used to determine the date for the reporting as well as the minimum-reporting timeout feature.\n     *\n     * @type {Clock}\n     * @memberof MetricReporterOptions\n     */\n    readonly clock?: Clock;\n    /**\n     * Timeout in minutes a metric need to be included in the report without having changed.\n     *\n     * @type {number}\n     * @memberof MetricReporterOptions\n     */\n    minReportingTimeout?: number;\n    /**\n     * Tags for this reporter instance - to be combined with the tags of each metric while reporting.\n     *\n     * @type {Map}\n     * @memberof MetricReporterOptions\n     */\n    tags?: Map;\n}\n\n/**\n * Interface for metric-reporter.\n *\n * @export\n * @interface IMetricReporter\n */\nexport interface IMetricReporter {\n    /**\n     * Gets the reporter tags.\n     *\n     * @returns {Map}\n     * @memberof IMetricReporter\n     */\n    getTags(): Map;\n\n    /**\n     * Sets the reporter tags.\n     *\n     * @param {Map} tags\n     * @returns {this}\n     * @memberof IMetricReporter\n     */\n    setTags(tags: Map): this;\n\n    /**\n     * Implementations start reporting metrics when called.\n     *\n     * @abstract\n     * @returns {Promise}\n     * @memberof IMetricReporter\n     */\n    start(): Promise;\n\n    /**\n     * Implementations stop reporting metrics when called.\n     *\n     * @abstract\n     * @returns {Promise}\n     * @memberof IMetricReporter\n     */\n    stop(): Promise;\n\n    /**\n     * Adds a new {@link MetricRegistry} to be reported.\n     *\n     * @param {MetricRegistry} metricRegistry\n     * @returns {this}\n     * @memberof IMetricReporter\n     */\n    addMetricRegistry(metricRegistry: MetricRegistry): this;\n\n    /**\n     * Removes the given {@link MetricRegistry} if it was previously added.\n     *\n     * @param {MetricRegistry} metricRegistry\n     * @returns {this}\n     * @memberof IMetricReporter\n     */\n    removeMetricRegistry(metricRegistry: MetricRegistry): this;\n\n    /**\n     * Reports an {@link Event}.\n     *\n     * Implementations can choose how to process ad-hoc events, wether it's\n     * queuing the events to the next call to report or sending events\n     * immediately.\n     *\n     * Also the usual reporting process of calling {@link #beforeReport}, do the reporting\n     * and call {@link #afterReport} may not be applied for ad-hoc events.\n     *\n     * This implementation does nothing and always resolved the specified evnet.\n     *\n     * @param {MetricRegistry} event\n     * @returns {this}\n     * @memberof IMetricReporter\n     */\n    reportEvent>(event: TEvent): Promise;\n\n    /**\n     * Sends events remaining in the queue (if a queue is used in the implementation).\n     *\n     * @returns {Promise}\n     * @memberof IMetricReporter\n     */\n    flushEvents(): Promise;\n}\n\n/**\n * Base-class for metric-reporter implementations.\n *\n * @export\n * @abstract\n * @class MetricReporter\n */\nexport abstract class MetricReporter implements IMetricReporter {\n\n    /**\n     * {@link MetricRegistry} instances.\n     *\n     * @protected\n     * @type {MetricRegistry[]}\n     * @memberof MetricReporter\n     */\n    protected readonly metricRegistries: MetricRegistry[] = [];\n    /**\n     * options for this reporter instance.\n     *\n     * @protected\n     * @type {O}\n     * @memberof MetricReporter\n     */\n    protected readonly options: O;\n    /**\n     * Keeps track of the reporting states for each metric.\n     *\n     * @protected\n     * @type {Map}\n     * @memberof MetricReporter\n     */\n    protected readonly metricStates: Map = new Map();\n\n    /**\n     * Creates an instance of MetricReporter.\n     *\n     * @param {O} options\n     * @param {Map} [tags=new Map()]\n     *          tags for this reporter instance - to be combined with the tags of each metric while reporting\n     * @param {Clock} [clock=new StdClock()]\n     *          clock used to determine the date for the reporting as well as the minimum-reporting timeout feature\n     * @param {number} [minReportingTimeout=1]\n     *          timeout in minutes a metric need to be included in the report without having changed\n     * @memberof MetricReporter\n     */\n    public constructor(options: O) {\n        this.options = options;\n    }\n\n    /**\n     * Gets the reporter tags.\n     *\n     * @returns {Map}\n     * @memberof MetricReporter\n     */\n    public getTags(): Map {\n        return this.options.tags;\n    }\n\n    /**\n     * Sets the reporter tags.\n     *\n     * @param {Map} tags\n     * @returns {this}\n     * @memberof MetricReporter\n     */\n    public setTags(tags: Map): this {\n        this.options.tags = tags;\n        return this;\n    }\n\n    /**\n     * Implementations start reporting metrics when called.\n     *\n     * @abstract\n     * @returns {Promise}\n     * @memberof MetricReporter\n     */\n    public abstract start(): Promise;\n\n    /**\n     * Implementations stop reporting metrics when called.\n     *\n     * @abstract\n     * @returns {Promise}\n     * @memberof MetricReporter\n     */\n    public abstract stop(): Promise;\n\n    /**\n     * Adds a new {@link MetricRegistry} to be reported.\n     *\n     * @param {MetricRegistry} metricRegistry\n     * @returns {this}\n     * @memberof MetricReporter\n     */\n    public addMetricRegistry(metricRegistry: MetricRegistry): this {\n        this.metricRegistries.push(metricRegistry);\n        return this;\n    }\n\n    /**\n     * Removes the given {@link MetricRegistry} if it was previously added.\n     *\n     * @param {MetricRegistry} metricRegistry\n     * @returns {this}\n     * @memberof MetricReporter\n     */\n    public removeMetricRegistry(metricRegistry: MetricRegistry): this {\n        const index: number = this.metricRegistries.indexOf(metricRegistry);\n        if (index > -1) {\n            this.metricRegistries.splice(index, 1);\n        }\n        return this;\n    }\n\n    /**\n     * Reports an {@link Event}.\n     *\n     * Implementations can choose how to process ad-hoc events, wether it's\n     * queuing the events to the next call to report or sending events\n     * immediately.\n     *\n     * Also the usual reporting process of calling {@link #beforeReport}, do the reporting\n     * and call {@link #afterReport} may not be applied for ad-hoc events.\n     *\n     * This implementation does nothing and always resolved the specified event.\n     *\n     * @param {Event} event\n     * @returns {Promise}\n     * @memberof MetricReporter\n     */\n    public async reportEvent>(event: TEvent): Promise {\n        return event;\n    }\n\n    /**\n     * Sends events remaining in the queue (if a queue is used in the implementation).\n     *\n     * @returns {Promise}\n     * @memberof MetricReporter\n     */\n    public async flushEvents(): Promise {\n    }\n\n    /**\n     * Called be before each reporting run.\n     *\n     * @protected\n     * @memberof MetricReporter\n     */\n    protected async beforeReport(ctx: OverallReportContext) {\n    }\n\n    /**\n     * Called after each reporting run.\n     *\n     * @protected\n     * @memberof MetricReporter\n     */\n    protected async afterReport(ctx: OverallReportContext) {\n    }\n\n    /**\n     * Run the reporting procedures. Calls {@link #beforeReport} before each\n     * {@link MetricRegistry}'s metrics are reported and {@link #afterReport}\n     * afterwards.\n     *\n     * @protected\n     * @memberof MetricReporter\n     */\n    protected async report(): Promise {\n        if (this.metricRegistries && this.metricRegistries.length > 0) {\n            const ctx = this.createOverallReportContext();\n            await this.beforeReport(ctx);\n            for (const registry of this.metricRegistries) {\n                await this.reportMetricRegistry(ctx, registry);\n            }\n            await this.afterReport(ctx);\n            return ctx;\n        }\n        return {};\n    }\n\n    /**\n     * Reporting function for a sinlge {@link MetricRegistry}.\n     * Calls {@link #createReportingContext} for each metric type.\n     * Afterwarsds calls {@link #reportMetrics} for each of the\n     * registry's metrics - grouped by type.\n     * And finally calls {@link #handleResults} for each of the results.\n     *\n     * @protected\n     * @param {MetricRegistry} registry\n     * @memberof MetricReporter\n     */\n    protected async reportMetricRegistry(ctx: OverallReportContext, registry: MetricRegistry) {\n        const date: Date = new Date(this.options.clock.time().milliseconds);\n        const counterCtx: MetricSetReportContext = this\n            .createMetricSetReportContext(ctx, registry, date, \"counter\");\n        const gaugeCtx: MetricSetReportContext> = this\n            .createMetricSetReportContext(ctx, registry, date, \"gauge\");\n        const histogramCtx: MetricSetReportContext = this\n            .createMetricSetReportContext(ctx, registry, date, \"histogram\");\n        const meterCtx: MetricSetReportContext = this\n            .createMetricSetReportContext(ctx, registry, date, \"meter\");\n        const timerCtx: MetricSetReportContext = this\n            .createMetricSetReportContext(ctx, registry, date, \"timer\");\n\n        counterCtx.metrics = registry.getMonotoneCounterList();\n        const monotoneCounterResults = this.reportMetrics(ctx, counterCtx,\n            (counter: MonotoneCounter) => this.reportCounter(counter, counterCtx),\n            (counter: MonotoneCounter) => counter.getCount());\n\n        counterCtx.metrics = registry.getCounterList();\n        const counterResults = this.reportMetrics(ctx, counterCtx as MetricSetReportContext,\n            (counter: Counter) => this.reportCounter(counter, counterCtx),\n            (counter: Counter) => counter.getCount());\n\n        gaugeCtx.metrics = registry.getGaugeList();\n        const gaugeResults = this.reportMetrics(ctx, gaugeCtx,\n            (gauge: Gauge) => this.reportGauge(gauge, gaugeCtx),\n            (gauge: Gauge) => gauge.getValue());\n\n        histogramCtx.metrics = registry.getHistogramList();\n        const histogramResults = this.reportMetrics(ctx, histogramCtx,\n            (histogram: Histogram) => this.reportHistogram(histogram, histogramCtx),\n            (histogram: Histogram) => histogram.getCount());\n\n        meterCtx.metrics = registry.getMeterList();\n        const meterResults = this.reportMetrics(ctx, meterCtx,\n            (meter: Meter) => this.reportMeter(meter, meterCtx),\n            (meter: Meter) => meter.getCount());\n\n        timerCtx.metrics = registry.getTimerList();\n        const timerResults = this.reportMetrics(ctx, timerCtx,\n            (timer: Timer) => this.reportTimer(timer, timerCtx),\n            (timer: Timer) => timer.getCount());\n\n        await this.handleResults(ctx, registry, date, \"counter\", monotoneCounterResults);\n        await this.handleResults(ctx, registry, date, \"counter\", counterResults);\n        await this.handleResults(ctx, registry, date, \"gauge\", gaugeResults);\n        await this.handleResults(ctx, registry, date, \"histogram\", histogramResults);\n        await this.handleResults(ctx, registry, date, \"meter\", meterResults);\n        await this.handleResults(ctx, registry, date, \"timer\", timerResults);\n    }\n\n    /**\n     * Creates an OverallReportContext.\n     *\n     * @protected\n     * @returns {OverallReportContext}\n     * @memberof MetricReporter\n     */\n    protected createOverallReportContext(): OverallReportContext {\n        return {\n        };\n    }\n\n    /**\n     * Creates a MetricSetReportContext with the specified arguments.\n     *\n     * @protected\n     * @param {OverallReportContext} overallCtx\n     * @param {MetricRegistry} registry\n     * @param {Date} date\n     * @param {MetricType} type\n     * @returns {MetricSetReportContext}\n     * @memberof MetricReporter\n     */\n    protected createMetricSetReportContext(\n        overallCtx: OverallReportContext,\n        registry: MetricRegistry,\n        date: Date,\n        type: MetricType): MetricSetReportContext {\n        return {\n            date,\n            metrics: [],\n            overallCtx,\n            registry,\n            type,\n        };\n    }\n\n    /**\n     * Filters out each metric that does not necessarily need to be reported\n     * and calls the specified reporting function for the remaining.\n     *\n     * @protected\n     * @template M type of the metric\n     * @template C typed ReportingContext\n     * @param {C} ctx\n     * @param {(metric: M, ctx: C) => T} reportFunction\n     * @param {(metric: M, ctx: C) => number} lastModifiedFunction\n     * @returns {Array>}\n     * @memberof MetricReporter\n     */\n    protected reportMetrics>(\n        overallCtx: OverallReportContext,\n        ctx: C,\n        reportFunction: (metric: M, ctx: C) => T,\n        lastModifiedFunction: (metric: M, ctx: C) => number): Array> {\n\n        return ctx.metrics\n            .filter((metric) => {\n                const metricId = (metric as any).id;\n                return !metricId || this.hasChanged(metricId, lastModifiedFunction(metric, ctx), ctx.date.getTime());\n            })\n            .map((metric) => ({\n                metric,\n                result: reportFunction(metric, ctx),\n            }))\n            .filter((result) => !!result.result);\n    }\n\n    /**\n     * Handles the reporting result for a group of metric instances.\n     *\n     * @protected\n     * @abstract\n     * @param {OverallReportContext} ctx\n     * @param {MetricRegistry} registry\n     * @param {Date} date\n     * @param {MetricType} type\n     * @param {Array>} results\n     * @returns {Promise}\n     * @memberof MetricReporter\n     */\n    protected abstract handleResults(\n        ctx: OverallReportContext,\n        registry: MetricRegistry,\n        date: Date,\n        type: MetricType,\n        results: Array>): Promise;\n\n    /**\n     * Does the reporting for a counter or monotone counter.\n     *\n     * @protected\n     * @abstract\n     * @param {(MonotoneCounter | Counter)} counter\n     * @param {(MetricSetReportContext)} ctx\n     * @returns {T}\n     * @memberof MetricReporter\n     */\n    protected abstract reportCounter(\n        counter: MonotoneCounter | Counter, ctx: MetricSetReportContext): T;\n\n    /**\n     * Does the reporting for a gauge.\n     *\n     * @protected\n     * @abstract\n     * @param {Gauge} gauge\n     * @param {MetricSetReportContext>} ctx\n     * @returns {T}\n     * @memberof MetricReporter\n     */\n    protected abstract reportGauge(gauge: Gauge, ctx: MetricSetReportContext>): T;\n\n    /**\n     * Does the reporting for a histogram.\n     *\n     * @protected\n     * @abstract\n     * @param {Histogram} histogram\n     * @param {MetricSetReportContext} ctx\n     * @returns {T}\n     * @memberof MetricReporter\n     */\n    protected abstract reportHistogram(histogram: Histogram, ctx: MetricSetReportContext): T;\n\n    /**\n     * Does the reporting for a meter.\n     *\n     * @protected\n     * @abstract\n     * @param {Meter} meter\n     * @param {MetricSetReportContext} ctx\n     * @returns {T}\n     * @memberof MetricReporter\n     */\n    protected abstract reportMeter(meter: Meter, ctx: MetricSetReportContext): T;\n\n    /**\n     * Does the reporting for a timer.\n     *\n     * @protected\n     * @abstract\n     * @param {Timer} timer\n     * @param {MetricSetReportContext} ctx\n     * @returns {T}\n     * @memberof MetricReporter\n     */\n    protected abstract reportTimer(timer: Timer, ctx: MetricSetReportContext): T;\n\n    /**\n     * Determines if a metric instance has changed it's value since the last check.\n     * This is always true if the minimal-reporting timeout was reached.\n     *\n     * @private\n     * @param {number} metricId\n     * @param {number} lastValue\n     * @param {number} date\n     * @returns {boolean}\n     * @memberof MetricReporter\n     */\n    protected hasChanged(metricId: number, lastValue: number, date: number): boolean {\n        let changed = true;\n        let metricEntry = {\n            lastReport: 0,\n            lastValue,\n        };\n        if (this.metricStates.has(metricId)) {\n            metricEntry = this.metricStates.get(metricId);\n            changed = metricEntry.lastValue !== lastValue;\n            if (!changed) {\n                const minReportingTimeout = MINUTE.convertTo(this.options.minReportingTimeout, MILLISECOND);\n                changed = metricEntry.lastReport + minReportingTimeout  tags[key] = tag);\n        }\n        if (registry && registry.getTags()) {\n            registry.getTags().forEach((tag, key) => tags[key] = tag);\n        }\n        if (taggable.getTags()) {\n            taggable.getTags().forEach((tag, key) => tags[key] = tag);\n        }\n        return tags;\n    }\n\n    /**\n     * Checks the number and gives it back or zero (0) if it's not a number.\n     *\n     * @protected\n     * @param {number} value\n     * @returns {number}\n     * @memberof MetricReporter\n     */\n    protected getNumber(value: number): number {\n        if (isNaN(value)) {\n            return 0;\n        }\n        return value;\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MovingAverage.html":{"url":"interfaces/MovingAverage.html","title":"interface - MovingAverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  MovingAverage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/moving-average.ts\n        \n\n            \n                Description\n            \n            \n                Represents an average value which depends on an alpha factor.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    getAlpha\n                                \n                                \n                                    getAverage\n                                \n                                \n                                    tick\n                                \n                                \n                                    update\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getAlpha\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetAlpha()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/moving-average.ts:19\n                            \n                        \n\n\n                \n                    \n                            Gets the alpha value.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getAverage\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetAverage(unit: TimeUnit)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/moving-average.ts:29\n                            \n                        \n\n\n                \n                    \n                            Gets the average for the specified time unit -\ne.g. 500 per second or 0.5 per millisecond or 30.000 per minute.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        unit\n                                                        \n                                                                    TimeUnit\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            tick\n                            \n                            \n                        \n                    \n                \n                \n                    \ntick()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/moving-average.ts:47\n                            \n                        \n\n\n                \n                    \n                            Triggers the actual average to be updated.\nA tick represents an update event.\n\n\n                            \n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            update\n                            \n                            \n                        \n                    \n                \n                \n                    \nupdate(value: number)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/moving-average.ts:38\n                            \n                        \n\n\n                \n                    \n                            Adds the given value to the logic of the implementation.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        value\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { NANOSECOND, TimeUnit } from \"./time-unit\";\n\n/**\n * Represents an average value which depends on an alpha factor.\n *\n * @export\n * @interface MovingAverage\n */\nexport interface MovingAverage {\n\n    /**\n     * Gets the alpha value.\n     *\n     * @returns {number}\n     * @memberof MovingAverage\n     */\n    getAlpha(): number;\n\n    /**\n     * Gets the average for the specified time unit -\n     * e.g. 500 per second or 0.5 per millisecond or 30.000 per minute.\n     *\n     * @param {TimeUnit} unit\n     * @returns {number}\n     * @memberof MovingAverage\n     */\n    getAverage(unit: TimeUnit): number;\n\n    /**\n     * Adds the given value to the logic of the implementation.\n     *\n     * @param {number} value\n     * @returns {this}\n     * @memberof MovingAverage\n     */\n    update(value: number): this;\n\n    /**\n     * Triggers the actual average to be updated.\n     * A tick represents an update event.\n     *\n     * @returns {this}\n     * @memberof MovingAverage\n     */\n    tick(): this;\n}\n\n/**\n * Calculates the moving average with an exponential alpha value.\n *\n * @export\n * @class ExponentiallyWeightedMovingAverage\n * @implements {MovingAverage}\n */\nexport class ExponentiallyWeightedMovingAverage implements MovingAverage {\n\n    public static ALPHA_1_MINUTE_1_SECOND_SAMPLERATE: number = 1 - Math.exp(-(1 / 60));\n    public static ALPHA_1_MINUTE_5_SECOND_SAMPLERATE: number = 1 - Math.exp(-(5 / 60));\n    public static ALPHA_5_MINUTE_1_SECOND_SAMPLERATE: number = 1 - Math.exp(-(1 / (60 * 5)));\n    public static ALPHA_5_MINUTE_5_SECOND_SAMPLERATE: number = 1 - Math.exp(-(5 / (60 * 5)));\n    public static ALPHA_15_MINUTE_1_SECOND_SAMPLERATE: number = 1 - Math.exp(-(1 / (60 * 15)));\n    public static ALPHA_15_MINUTE_5_SECOND_SAMPLERATE: number = 1 - Math.exp(-(5 / (60 * 15)));\n\n    /**\n     * Alpha component (weight) of the moving average.\n     *\n     * @private\n     * @type {number}\n     * @memberof ExponentiallyWeightedMovingAverage\n     */\n    private alpha: number;\n    /**\n     * The sampling interval.\n     *\n     * @private\n     * @type {number}\n     * @memberof ExponentiallyWeightedMovingAverage\n     */\n    private interval: number;\n    /**\n     * The sum of all values passed to the update function.\n     *\n     * @private\n     * @type {number}\n     * @memberof ExponentiallyWeightedMovingAverage\n     */\n    private sum: number = 0;\n    /**\n     * The current average.\n     *\n     * @private\n     * @type {number}\n     * @memberof ExponentiallyWeightedMovingAverage\n     */\n    private avg: number = -1.0;\n    /**\n     * Multiplier of the time unit specified in the constructor in nanoseconds.\n     *\n     * @private\n     * @type {number}\n     * @memberof ExponentiallyWeightedMovingAverage\n     */\n    private timeUnitInNanoseconds: number;\n    /**\n     * The time unit of the sampling rate.\n     *\n     * @private\n     * @type {TimeUnit}\n     * @memberof ExponentiallyWeightedMovingAverage\n     */\n    private unit: TimeUnit;\n\n    /**\n     * Creates an instance of ExponentiallyWeightedMovingAverage.\n     *\n     * @param {number} alpha\n     * @param {number} interval\n     * @param {TimeUnit} unit\n     * @memberof ExponentiallyWeightedMovingAverage\n     */\n    public constructor(alpha: number, interval: number, unit: TimeUnit) {\n        this.alpha = alpha;\n        this.interval = interval;\n        this.unit = unit;\n        this.timeUnitInNanoseconds = unit.convertTo(interval, NANOSECOND);\n    }\n\n    /**\n     * Gets the alpha value.\n     *\n     * @returns {number}\n     * @memberof ExponentiallyWeightedMovingAverage\n     */\n    public getAlpha(): number {\n        return this.alpha;\n    }\n\n    /**\n     * Gets the time unit.\n     *\n     * @returns {TimeUnit}\n     * @memberof ExponentiallyWeightedMovingAverage\n     */\n    public getUnit(): TimeUnit {\n        return this.unit;\n    }\n\n    /**\n     * Gets the average in the specified time unit.\n     *\n     * @param {TimeUnit} unit\n     * @returns {number}\n     * @memberof ExponentiallyWeightedMovingAverage\n     */\n    public getAverage(unit: TimeUnit): number {\n        if (this.avg === -1.0) {\n            return 0;\n        }\n        return this.avg * NANOSECOND.convertTo(this.timeUnitInNanoseconds, unit);\n    }\n\n    /**\n     * Adds the value to the current sum.\n     *\n     * @param {number} value\n     * @returns {this}\n     * @memberof ExponentiallyWeightedMovingAverage\n     */\n    public update(value: number): this {\n        this.sum += value;\n        return this;\n    }\n\n    /**\n     * Updates the current average by multiplying the alpha value with the difference\n     * of the last average and the current average.\n     *\n     * Averages are calculated by dividing the sum through the sampling interval.\n     *\n     * If the alpha value is high the last average has more weight and vice versa.\n     *\n     * @returns {this}\n     * @memberof ExponentiallyWeightedMovingAverage\n     */\n    public tick(): this {\n        const sum = this.sum;\n        const avg = sum / this.interval;\n        this.sum -= sum;\n\n        if (this.avg === -1.0) {\n            this.avg = avg;\n        } else {\n            this.avg += this.alpha * (avg - this.avg);\n        }\n        return this;\n    }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/OverallReportContext.html":{"url":"interfaces/OverallReportContext.html","title":"interface - OverallReportContext","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  OverallReportContext\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/reporter/metric-reporter.ts\n        \n\n            \n                Description\n            \n            \n                Helper interface for a reporting run.\n\n            \n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:    any\n\n                    \n                \n                        \n                            \n                                Defined in lib/metrics/reporter/metric-reporter.ts:27\n                            \n                        \n            \n        \n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { Clock } from \"../clock\";\nimport { Counter, MonotoneCounter } from \"../counter\";\nimport { Event } from \"../event\";\nimport { Gauge } from \"../gauge\";\nimport { Histogram } from \"../histogram\";\nimport { Meter } from \"../meter\";\nimport { Metric } from \"../metric\";\nimport { MetricRegistry } from \"../metric-registry\";\nimport { Taggable } from \"../taggable\";\nimport { MILLISECOND, MINUTE } from \"../time-unit\";\nimport { Timer } from \"../timer\";\nimport { MetricEntry } from \"./metric-entry\";\nimport { MetricType } from \"./metric-type\";\n\n/**\n * Helper interface for handling tags.\n */\nexport interface Tags {\n    [key: string]: string;\n}\n\n/**\n * Helper interface for a reporting run.\n */\nexport interface OverallReportContext {\n    [key: string]: any;\n}\n\n/**\n * Helper interface for reporting runs.\n */\nexport interface MetricSetReportContext {\n    /**\n     * The OverallReportContext this context is running in.\n     *\n     * @type {OverallReportContext}\n     * @memberof ReportingContext\n     */\n    overallCtx: OverallReportContext;\n    /**\n     * The array of metric instance that is currently reported.\n     *\n     * @type {M[]}\n     * @memberof ReportingContext\n     */\n    metrics: M[];\n    /**\n     * The registry the metric are registered in.\n     *\n     * @type {MetricRegistry}\n     * @memberof ReportingContext\n     */\n    readonly registry: MetricRegistry;\n    /**\n     * The current date.\n     *\n     * @type {Date}\n     * @memberof ReportingContext\n     */\n    readonly date: Date;\n    /**\n     * The type of the metrics in the {@link #metrics} array.\n     *\n     * @type {MetricType}\n     * @memberof ReportingContext\n     */\n    readonly type: MetricType;\n}\n\n/**\n * Helper interface for reporting results.\n */\nexport interface ReportingResult {\n    /**\n     * The metric the result refers to.\n     *\n     * @type {M}\n     * @memberof ReportingResult\n     */\n    readonly metric: M;\n    /**\n     * The reporting result - implementation specific.\n     *\n     * @type {T}\n     * @memberof ReportingResult\n     */\n    readonly result: T;\n}\n\n/**\n * Options for the {@link MetricReporter}.\n *\n * @export\n * @interface MetricReporterOptions\n */\nexport interface MetricReporterOptions {\n    /**\n     * Clock used to determine the date for the reporting as well as the minimum-reporting timeout feature.\n     *\n     * @type {Clock}\n     * @memberof MetricReporterOptions\n     */\n    readonly clock?: Clock;\n    /**\n     * Timeout in minutes a metric need to be included in the report without having changed.\n     *\n     * @type {number}\n     * @memberof MetricReporterOptions\n     */\n    minReportingTimeout?: number;\n    /**\n     * Tags for this reporter instance - to be combined with the tags of each metric while reporting.\n     *\n     * @type {Map}\n     * @memberof MetricReporterOptions\n     */\n    tags?: Map;\n}\n\n/**\n * Interface for metric-reporter.\n *\n * @export\n * @interface IMetricReporter\n */\nexport interface IMetricReporter {\n    /**\n     * Gets the reporter tags.\n     *\n     * @returns {Map}\n     * @memberof IMetricReporter\n     */\n    getTags(): Map;\n\n    /**\n     * Sets the reporter tags.\n     *\n     * @param {Map} tags\n     * @returns {this}\n     * @memberof IMetricReporter\n     */\n    setTags(tags: Map): this;\n\n    /**\n     * Implementations start reporting metrics when called.\n     *\n     * @abstract\n     * @returns {Promise}\n     * @memberof IMetricReporter\n     */\n    start(): Promise;\n\n    /**\n     * Implementations stop reporting metrics when called.\n     *\n     * @abstract\n     * @returns {Promise}\n     * @memberof IMetricReporter\n     */\n    stop(): Promise;\n\n    /**\n     * Adds a new {@link MetricRegistry} to be reported.\n     *\n     * @param {MetricRegistry} metricRegistry\n     * @returns {this}\n     * @memberof IMetricReporter\n     */\n    addMetricRegistry(metricRegistry: MetricRegistry): this;\n\n    /**\n     * Removes the given {@link MetricRegistry} if it was previously added.\n     *\n     * @param {MetricRegistry} metricRegistry\n     * @returns {this}\n     * @memberof IMetricReporter\n     */\n    removeMetricRegistry(metricRegistry: MetricRegistry): this;\n\n    /**\n     * Reports an {@link Event}.\n     *\n     * Implementations can choose how to process ad-hoc events, wether it's\n     * queuing the events to the next call to report or sending events\n     * immediately.\n     *\n     * Also the usual reporting process of calling {@link #beforeReport}, do the reporting\n     * and call {@link #afterReport} may not be applied for ad-hoc events.\n     *\n     * This implementation does nothing and always resolved the specified evnet.\n     *\n     * @param {MetricRegistry} event\n     * @returns {this}\n     * @memberof IMetricReporter\n     */\n    reportEvent>(event: TEvent): Promise;\n\n    /**\n     * Sends events remaining in the queue (if a queue is used in the implementation).\n     *\n     * @returns {Promise}\n     * @memberof IMetricReporter\n     */\n    flushEvents(): Promise;\n}\n\n/**\n * Base-class for metric-reporter implementations.\n *\n * @export\n * @abstract\n * @class MetricReporter\n */\nexport abstract class MetricReporter implements IMetricReporter {\n\n    /**\n     * {@link MetricRegistry} instances.\n     *\n     * @protected\n     * @type {MetricRegistry[]}\n     * @memberof MetricReporter\n     */\n    protected readonly metricRegistries: MetricRegistry[] = [];\n    /**\n     * options for this reporter instance.\n     *\n     * @protected\n     * @type {O}\n     * @memberof MetricReporter\n     */\n    protected readonly options: O;\n    /**\n     * Keeps track of the reporting states for each metric.\n     *\n     * @protected\n     * @type {Map}\n     * @memberof MetricReporter\n     */\n    protected readonly metricStates: Map = new Map();\n\n    /**\n     * Creates an instance of MetricReporter.\n     *\n     * @param {O} options\n     * @param {Map} [tags=new Map()]\n     *          tags for this reporter instance - to be combined with the tags of each metric while reporting\n     * @param {Clock} [clock=new StdClock()]\n     *          clock used to determine the date for the reporting as well as the minimum-reporting timeout feature\n     * @param {number} [minReportingTimeout=1]\n     *          timeout in minutes a metric need to be included in the report without having changed\n     * @memberof MetricReporter\n     */\n    public constructor(options: O) {\n        this.options = options;\n    }\n\n    /**\n     * Gets the reporter tags.\n     *\n     * @returns {Map}\n     * @memberof MetricReporter\n     */\n    public getTags(): Map {\n        return this.options.tags;\n    }\n\n    /**\n     * Sets the reporter tags.\n     *\n     * @param {Map} tags\n     * @returns {this}\n     * @memberof MetricReporter\n     */\n    public setTags(tags: Map): this {\n        this.options.tags = tags;\n        return this;\n    }\n\n    /**\n     * Implementations start reporting metrics when called.\n     *\n     * @abstract\n     * @returns {Promise}\n     * @memberof MetricReporter\n     */\n    public abstract start(): Promise;\n\n    /**\n     * Implementations stop reporting metrics when called.\n     *\n     * @abstract\n     * @returns {Promise}\n     * @memberof MetricReporter\n     */\n    public abstract stop(): Promise;\n\n    /**\n     * Adds a new {@link MetricRegistry} to be reported.\n     *\n     * @param {MetricRegistry} metricRegistry\n     * @returns {this}\n     * @memberof MetricReporter\n     */\n    public addMetricRegistry(metricRegistry: MetricRegistry): this {\n        this.metricRegistries.push(metricRegistry);\n        return this;\n    }\n\n    /**\n     * Removes the given {@link MetricRegistry} if it was previously added.\n     *\n     * @param {MetricRegistry} metricRegistry\n     * @returns {this}\n     * @memberof MetricReporter\n     */\n    public removeMetricRegistry(metricRegistry: MetricRegistry): this {\n        const index: number = this.metricRegistries.indexOf(metricRegistry);\n        if (index > -1) {\n            this.metricRegistries.splice(index, 1);\n        }\n        return this;\n    }\n\n    /**\n     * Reports an {@link Event}.\n     *\n     * Implementations can choose how to process ad-hoc events, wether it's\n     * queuing the events to the next call to report or sending events\n     * immediately.\n     *\n     * Also the usual reporting process of calling {@link #beforeReport}, do the reporting\n     * and call {@link #afterReport} may not be applied for ad-hoc events.\n     *\n     * This implementation does nothing and always resolved the specified event.\n     *\n     * @param {Event} event\n     * @returns {Promise}\n     * @memberof MetricReporter\n     */\n    public async reportEvent>(event: TEvent): Promise {\n        return event;\n    }\n\n    /**\n     * Sends events remaining in the queue (if a queue is used in the implementation).\n     *\n     * @returns {Promise}\n     * @memberof MetricReporter\n     */\n    public async flushEvents(): Promise {\n    }\n\n    /**\n     * Called be before each reporting run.\n     *\n     * @protected\n     * @memberof MetricReporter\n     */\n    protected async beforeReport(ctx: OverallReportContext) {\n    }\n\n    /**\n     * Called after each reporting run.\n     *\n     * @protected\n     * @memberof MetricReporter\n     */\n    protected async afterReport(ctx: OverallReportContext) {\n    }\n\n    /**\n     * Run the reporting procedures. Calls {@link #beforeReport} before each\n     * {@link MetricRegistry}'s metrics are reported and {@link #afterReport}\n     * afterwards.\n     *\n     * @protected\n     * @memberof MetricReporter\n     */\n    protected async report(): Promise {\n        if (this.metricRegistries && this.metricRegistries.length > 0) {\n            const ctx = this.createOverallReportContext();\n            await this.beforeReport(ctx);\n            for (const registry of this.metricRegistries) {\n                await this.reportMetricRegistry(ctx, registry);\n            }\n            await this.afterReport(ctx);\n            return ctx;\n        }\n        return {};\n    }\n\n    /**\n     * Reporting function for a sinlge {@link MetricRegistry}.\n     * Calls {@link #createReportingContext} for each metric type.\n     * Afterwarsds calls {@link #reportMetrics} for each of the\n     * registry's metrics - grouped by type.\n     * And finally calls {@link #handleResults} for each of the results.\n     *\n     * @protected\n     * @param {MetricRegistry} registry\n     * @memberof MetricReporter\n     */\n    protected async reportMetricRegistry(ctx: OverallReportContext, registry: MetricRegistry) {\n        const date: Date = new Date(this.options.clock.time().milliseconds);\n        const counterCtx: MetricSetReportContext = this\n            .createMetricSetReportContext(ctx, registry, date, \"counter\");\n        const gaugeCtx: MetricSetReportContext> = this\n            .createMetricSetReportContext(ctx, registry, date, \"gauge\");\n        const histogramCtx: MetricSetReportContext = this\n            .createMetricSetReportContext(ctx, registry, date, \"histogram\");\n        const meterCtx: MetricSetReportContext = this\n            .createMetricSetReportContext(ctx, registry, date, \"meter\");\n        const timerCtx: MetricSetReportContext = this\n            .createMetricSetReportContext(ctx, registry, date, \"timer\");\n\n        counterCtx.metrics = registry.getMonotoneCounterList();\n        const monotoneCounterResults = this.reportMetrics(ctx, counterCtx,\n            (counter: MonotoneCounter) => this.reportCounter(counter, counterCtx),\n            (counter: MonotoneCounter) => counter.getCount());\n\n        counterCtx.metrics = registry.getCounterList();\n        const counterResults = this.reportMetrics(ctx, counterCtx as MetricSetReportContext,\n            (counter: Counter) => this.reportCounter(counter, counterCtx),\n            (counter: Counter) => counter.getCount());\n\n        gaugeCtx.metrics = registry.getGaugeList();\n        const gaugeResults = this.reportMetrics(ctx, gaugeCtx,\n            (gauge: Gauge) => this.reportGauge(gauge, gaugeCtx),\n            (gauge: Gauge) => gauge.getValue());\n\n        histogramCtx.metrics = registry.getHistogramList();\n        const histogramResults = this.reportMetrics(ctx, histogramCtx,\n            (histogram: Histogram) => this.reportHistogram(histogram, histogramCtx),\n            (histogram: Histogram) => histogram.getCount());\n\n        meterCtx.metrics = registry.getMeterList();\n        const meterResults = this.reportMetrics(ctx, meterCtx,\n            (meter: Meter) => this.reportMeter(meter, meterCtx),\n            (meter: Meter) => meter.getCount());\n\n        timerCtx.metrics = registry.getTimerList();\n        const timerResults = this.reportMetrics(ctx, timerCtx,\n            (timer: Timer) => this.reportTimer(timer, timerCtx),\n            (timer: Timer) => timer.getCount());\n\n        await this.handleResults(ctx, registry, date, \"counter\", monotoneCounterResults);\n        await this.handleResults(ctx, registry, date, \"counter\", counterResults);\n        await this.handleResults(ctx, registry, date, \"gauge\", gaugeResults);\n        await this.handleResults(ctx, registry, date, \"histogram\", histogramResults);\n        await this.handleResults(ctx, registry, date, \"meter\", meterResults);\n        await this.handleResults(ctx, registry, date, \"timer\", timerResults);\n    }\n\n    /**\n     * Creates an OverallReportContext.\n     *\n     * @protected\n     * @returns {OverallReportContext}\n     * @memberof MetricReporter\n     */\n    protected createOverallReportContext(): OverallReportContext {\n        return {\n        };\n    }\n\n    /**\n     * Creates a MetricSetReportContext with the specified arguments.\n     *\n     * @protected\n     * @param {OverallReportContext} overallCtx\n     * @param {MetricRegistry} registry\n     * @param {Date} date\n     * @param {MetricType} type\n     * @returns {MetricSetReportContext}\n     * @memberof MetricReporter\n     */\n    protected createMetricSetReportContext(\n        overallCtx: OverallReportContext,\n        registry: MetricRegistry,\n        date: Date,\n        type: MetricType): MetricSetReportContext {\n        return {\n            date,\n            metrics: [],\n            overallCtx,\n            registry,\n            type,\n        };\n    }\n\n    /**\n     * Filters out each metric that does not necessarily need to be reported\n     * and calls the specified reporting function for the remaining.\n     *\n     * @protected\n     * @template M type of the metric\n     * @template C typed ReportingContext\n     * @param {C} ctx\n     * @param {(metric: M, ctx: C) => T} reportFunction\n     * @param {(metric: M, ctx: C) => number} lastModifiedFunction\n     * @returns {Array>}\n     * @memberof MetricReporter\n     */\n    protected reportMetrics>(\n        overallCtx: OverallReportContext,\n        ctx: C,\n        reportFunction: (metric: M, ctx: C) => T,\n        lastModifiedFunction: (metric: M, ctx: C) => number): Array> {\n\n        return ctx.metrics\n            .filter((metric) => {\n                const metricId = (metric as any).id;\n                return !metricId || this.hasChanged(metricId, lastModifiedFunction(metric, ctx), ctx.date.getTime());\n            })\n            .map((metric) => ({\n                metric,\n                result: reportFunction(metric, ctx),\n            }))\n            .filter((result) => !!result.result);\n    }\n\n    /**\n     * Handles the reporting result for a group of metric instances.\n     *\n     * @protected\n     * @abstract\n     * @param {OverallReportContext} ctx\n     * @param {MetricRegistry} registry\n     * @param {Date} date\n     * @param {MetricType} type\n     * @param {Array>} results\n     * @returns {Promise}\n     * @memberof MetricReporter\n     */\n    protected abstract handleResults(\n        ctx: OverallReportContext,\n        registry: MetricRegistry,\n        date: Date,\n        type: MetricType,\n        results: Array>): Promise;\n\n    /**\n     * Does the reporting for a counter or monotone counter.\n     *\n     * @protected\n     * @abstract\n     * @param {(MonotoneCounter | Counter)} counter\n     * @param {(MetricSetReportContext)} ctx\n     * @returns {T}\n     * @memberof MetricReporter\n     */\n    protected abstract reportCounter(\n        counter: MonotoneCounter | Counter, ctx: MetricSetReportContext): T;\n\n    /**\n     * Does the reporting for a gauge.\n     *\n     * @protected\n     * @abstract\n     * @param {Gauge} gauge\n     * @param {MetricSetReportContext>} ctx\n     * @returns {T}\n     * @memberof MetricReporter\n     */\n    protected abstract reportGauge(gauge: Gauge, ctx: MetricSetReportContext>): T;\n\n    /**\n     * Does the reporting for a histogram.\n     *\n     * @protected\n     * @abstract\n     * @param {Histogram} histogram\n     * @param {MetricSetReportContext} ctx\n     * @returns {T}\n     * @memberof MetricReporter\n     */\n    protected abstract reportHistogram(histogram: Histogram, ctx: MetricSetReportContext): T;\n\n    /**\n     * Does the reporting for a meter.\n     *\n     * @protected\n     * @abstract\n     * @param {Meter} meter\n     * @param {MetricSetReportContext} ctx\n     * @returns {T}\n     * @memberof MetricReporter\n     */\n    protected abstract reportMeter(meter: Meter, ctx: MetricSetReportContext): T;\n\n    /**\n     * Does the reporting for a timer.\n     *\n     * @protected\n     * @abstract\n     * @param {Timer} timer\n     * @param {MetricSetReportContext} ctx\n     * @returns {T}\n     * @memberof MetricReporter\n     */\n    protected abstract reportTimer(timer: Timer, ctx: MetricSetReportContext): T;\n\n    /**\n     * Determines if a metric instance has changed it's value since the last check.\n     * This is always true if the minimal-reporting timeout was reached.\n     *\n     * @private\n     * @param {number} metricId\n     * @param {number} lastValue\n     * @param {number} date\n     * @returns {boolean}\n     * @memberof MetricReporter\n     */\n    protected hasChanged(metricId: number, lastValue: number, date: number): boolean {\n        let changed = true;\n        let metricEntry = {\n            lastReport: 0,\n            lastValue,\n        };\n        if (this.metricStates.has(metricId)) {\n            metricEntry = this.metricStates.get(metricId);\n            changed = metricEntry.lastValue !== lastValue;\n            if (!changed) {\n                const minReportingTimeout = MINUTE.convertTo(this.options.minReportingTimeout, MILLISECOND);\n                changed = metricEntry.lastReport + minReportingTimeout  tags[key] = tag);\n        }\n        if (registry && registry.getTags()) {\n            registry.getTags().forEach((tag, key) => tags[key] = tag);\n        }\n        if (taggable.getTags()) {\n            taggable.getTags().forEach((tag, key) => tags[key] = tag);\n        }\n        return tags;\n    }\n\n    /**\n     * Checks the number and gives it back or zero (0) if it's not a number.\n     *\n     * @protected\n     * @param {number} value\n     * @returns {number}\n     * @memberof MetricReporter\n     */\n    protected getNumber(value: number): number {\n        if (isNaN(value)) {\n            return 0;\n        }\n        return value;\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ReportingResult.html":{"url":"interfaces/ReportingResult.html","title":"interface - ReportingResult","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ReportingResult\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/reporter/metric-reporter.ts\n        \n\n            \n                Description\n            \n            \n                Helper interface for reporting results.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        metric\n                                \n                                \n                                        result\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        metric\n                                    \n                                \n                                \n                                    \n                                        metric:     M\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     M\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The metric the result refers to.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        result\n                                    \n                                \n                                \n                                    \n                                        result:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The reporting result - implementation specific.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { Clock } from \"../clock\";\nimport { Counter, MonotoneCounter } from \"../counter\";\nimport { Event } from \"../event\";\nimport { Gauge } from \"../gauge\";\nimport { Histogram } from \"../histogram\";\nimport { Meter } from \"../meter\";\nimport { Metric } from \"../metric\";\nimport { MetricRegistry } from \"../metric-registry\";\nimport { Taggable } from \"../taggable\";\nimport { MILLISECOND, MINUTE } from \"../time-unit\";\nimport { Timer } from \"../timer\";\nimport { MetricEntry } from \"./metric-entry\";\nimport { MetricType } from \"./metric-type\";\n\n/**\n * Helper interface for handling tags.\n */\nexport interface Tags {\n    [key: string]: string;\n}\n\n/**\n * Helper interface for a reporting run.\n */\nexport interface OverallReportContext {\n    [key: string]: any;\n}\n\n/**\n * Helper interface for reporting runs.\n */\nexport interface MetricSetReportContext {\n    /**\n     * The OverallReportContext this context is running in.\n     *\n     * @type {OverallReportContext}\n     * @memberof ReportingContext\n     */\n    overallCtx: OverallReportContext;\n    /**\n     * The array of metric instance that is currently reported.\n     *\n     * @type {M[]}\n     * @memberof ReportingContext\n     */\n    metrics: M[];\n    /**\n     * The registry the metric are registered in.\n     *\n     * @type {MetricRegistry}\n     * @memberof ReportingContext\n     */\n    readonly registry: MetricRegistry;\n    /**\n     * The current date.\n     *\n     * @type {Date}\n     * @memberof ReportingContext\n     */\n    readonly date: Date;\n    /**\n     * The type of the metrics in the {@link #metrics} array.\n     *\n     * @type {MetricType}\n     * @memberof ReportingContext\n     */\n    readonly type: MetricType;\n}\n\n/**\n * Helper interface for reporting results.\n */\nexport interface ReportingResult {\n    /**\n     * The metric the result refers to.\n     *\n     * @type {M}\n     * @memberof ReportingResult\n     */\n    readonly metric: M;\n    /**\n     * The reporting result - implementation specific.\n     *\n     * @type {T}\n     * @memberof ReportingResult\n     */\n    readonly result: T;\n}\n\n/**\n * Options for the {@link MetricReporter}.\n *\n * @export\n * @interface MetricReporterOptions\n */\nexport interface MetricReporterOptions {\n    /**\n     * Clock used to determine the date for the reporting as well as the minimum-reporting timeout feature.\n     *\n     * @type {Clock}\n     * @memberof MetricReporterOptions\n     */\n    readonly clock?: Clock;\n    /**\n     * Timeout in minutes a metric need to be included in the report without having changed.\n     *\n     * @type {number}\n     * @memberof MetricReporterOptions\n     */\n    minReportingTimeout?: number;\n    /**\n     * Tags for this reporter instance - to be combined with the tags of each metric while reporting.\n     *\n     * @type {Map}\n     * @memberof MetricReporterOptions\n     */\n    tags?: Map;\n}\n\n/**\n * Interface for metric-reporter.\n *\n * @export\n * @interface IMetricReporter\n */\nexport interface IMetricReporter {\n    /**\n     * Gets the reporter tags.\n     *\n     * @returns {Map}\n     * @memberof IMetricReporter\n     */\n    getTags(): Map;\n\n    /**\n     * Sets the reporter tags.\n     *\n     * @param {Map} tags\n     * @returns {this}\n     * @memberof IMetricReporter\n     */\n    setTags(tags: Map): this;\n\n    /**\n     * Implementations start reporting metrics when called.\n     *\n     * @abstract\n     * @returns {Promise}\n     * @memberof IMetricReporter\n     */\n    start(): Promise;\n\n    /**\n     * Implementations stop reporting metrics when called.\n     *\n     * @abstract\n     * @returns {Promise}\n     * @memberof IMetricReporter\n     */\n    stop(): Promise;\n\n    /**\n     * Adds a new {@link MetricRegistry} to be reported.\n     *\n     * @param {MetricRegistry} metricRegistry\n     * @returns {this}\n     * @memberof IMetricReporter\n     */\n    addMetricRegistry(metricRegistry: MetricRegistry): this;\n\n    /**\n     * Removes the given {@link MetricRegistry} if it was previously added.\n     *\n     * @param {MetricRegistry} metricRegistry\n     * @returns {this}\n     * @memberof IMetricReporter\n     */\n    removeMetricRegistry(metricRegistry: MetricRegistry): this;\n\n    /**\n     * Reports an {@link Event}.\n     *\n     * Implementations can choose how to process ad-hoc events, wether it's\n     * queuing the events to the next call to report or sending events\n     * immediately.\n     *\n     * Also the usual reporting process of calling {@link #beforeReport}, do the reporting\n     * and call {@link #afterReport} may not be applied for ad-hoc events.\n     *\n     * This implementation does nothing and always resolved the specified evnet.\n     *\n     * @param {MetricRegistry} event\n     * @returns {this}\n     * @memberof IMetricReporter\n     */\n    reportEvent>(event: TEvent): Promise;\n\n    /**\n     * Sends events remaining in the queue (if a queue is used in the implementation).\n     *\n     * @returns {Promise}\n     * @memberof IMetricReporter\n     */\n    flushEvents(): Promise;\n}\n\n/**\n * Base-class for metric-reporter implementations.\n *\n * @export\n * @abstract\n * @class MetricReporter\n */\nexport abstract class MetricReporter implements IMetricReporter {\n\n    /**\n     * {@link MetricRegistry} instances.\n     *\n     * @protected\n     * @type {MetricRegistry[]}\n     * @memberof MetricReporter\n     */\n    protected readonly metricRegistries: MetricRegistry[] = [];\n    /**\n     * options for this reporter instance.\n     *\n     * @protected\n     * @type {O}\n     * @memberof MetricReporter\n     */\n    protected readonly options: O;\n    /**\n     * Keeps track of the reporting states for each metric.\n     *\n     * @protected\n     * @type {Map}\n     * @memberof MetricReporter\n     */\n    protected readonly metricStates: Map = new Map();\n\n    /**\n     * Creates an instance of MetricReporter.\n     *\n     * @param {O} options\n     * @param {Map} [tags=new Map()]\n     *          tags for this reporter instance - to be combined with the tags of each metric while reporting\n     * @param {Clock} [clock=new StdClock()]\n     *          clock used to determine the date for the reporting as well as the minimum-reporting timeout feature\n     * @param {number} [minReportingTimeout=1]\n     *          timeout in minutes a metric need to be included in the report without having changed\n     * @memberof MetricReporter\n     */\n    public constructor(options: O) {\n        this.options = options;\n    }\n\n    /**\n     * Gets the reporter tags.\n     *\n     * @returns {Map}\n     * @memberof MetricReporter\n     */\n    public getTags(): Map {\n        return this.options.tags;\n    }\n\n    /**\n     * Sets the reporter tags.\n     *\n     * @param {Map} tags\n     * @returns {this}\n     * @memberof MetricReporter\n     */\n    public setTags(tags: Map): this {\n        this.options.tags = tags;\n        return this;\n    }\n\n    /**\n     * Implementations start reporting metrics when called.\n     *\n     * @abstract\n     * @returns {Promise}\n     * @memberof MetricReporter\n     */\n    public abstract start(): Promise;\n\n    /**\n     * Implementations stop reporting metrics when called.\n     *\n     * @abstract\n     * @returns {Promise}\n     * @memberof MetricReporter\n     */\n    public abstract stop(): Promise;\n\n    /**\n     * Adds a new {@link MetricRegistry} to be reported.\n     *\n     * @param {MetricRegistry} metricRegistry\n     * @returns {this}\n     * @memberof MetricReporter\n     */\n    public addMetricRegistry(metricRegistry: MetricRegistry): this {\n        this.metricRegistries.push(metricRegistry);\n        return this;\n    }\n\n    /**\n     * Removes the given {@link MetricRegistry} if it was previously added.\n     *\n     * @param {MetricRegistry} metricRegistry\n     * @returns {this}\n     * @memberof MetricReporter\n     */\n    public removeMetricRegistry(metricRegistry: MetricRegistry): this {\n        const index: number = this.metricRegistries.indexOf(metricRegistry);\n        if (index > -1) {\n            this.metricRegistries.splice(index, 1);\n        }\n        return this;\n    }\n\n    /**\n     * Reports an {@link Event}.\n     *\n     * Implementations can choose how to process ad-hoc events, wether it's\n     * queuing the events to the next call to report or sending events\n     * immediately.\n     *\n     * Also the usual reporting process of calling {@link #beforeReport}, do the reporting\n     * and call {@link #afterReport} may not be applied for ad-hoc events.\n     *\n     * This implementation does nothing and always resolved the specified event.\n     *\n     * @param {Event} event\n     * @returns {Promise}\n     * @memberof MetricReporter\n     */\n    public async reportEvent>(event: TEvent): Promise {\n        return event;\n    }\n\n    /**\n     * Sends events remaining in the queue (if a queue is used in the implementation).\n     *\n     * @returns {Promise}\n     * @memberof MetricReporter\n     */\n    public async flushEvents(): Promise {\n    }\n\n    /**\n     * Called be before each reporting run.\n     *\n     * @protected\n     * @memberof MetricReporter\n     */\n    protected async beforeReport(ctx: OverallReportContext) {\n    }\n\n    /**\n     * Called after each reporting run.\n     *\n     * @protected\n     * @memberof MetricReporter\n     */\n    protected async afterReport(ctx: OverallReportContext) {\n    }\n\n    /**\n     * Run the reporting procedures. Calls {@link #beforeReport} before each\n     * {@link MetricRegistry}'s metrics are reported and {@link #afterReport}\n     * afterwards.\n     *\n     * @protected\n     * @memberof MetricReporter\n     */\n    protected async report(): Promise {\n        if (this.metricRegistries && this.metricRegistries.length > 0) {\n            const ctx = this.createOverallReportContext();\n            await this.beforeReport(ctx);\n            for (const registry of this.metricRegistries) {\n                await this.reportMetricRegistry(ctx, registry);\n            }\n            await this.afterReport(ctx);\n            return ctx;\n        }\n        return {};\n    }\n\n    /**\n     * Reporting function for a sinlge {@link MetricRegistry}.\n     * Calls {@link #createReportingContext} for each metric type.\n     * Afterwarsds calls {@link #reportMetrics} for each of the\n     * registry's metrics - grouped by type.\n     * And finally calls {@link #handleResults} for each of the results.\n     *\n     * @protected\n     * @param {MetricRegistry} registry\n     * @memberof MetricReporter\n     */\n    protected async reportMetricRegistry(ctx: OverallReportContext, registry: MetricRegistry) {\n        const date: Date = new Date(this.options.clock.time().milliseconds);\n        const counterCtx: MetricSetReportContext = this\n            .createMetricSetReportContext(ctx, registry, date, \"counter\");\n        const gaugeCtx: MetricSetReportContext> = this\n            .createMetricSetReportContext(ctx, registry, date, \"gauge\");\n        const histogramCtx: MetricSetReportContext = this\n            .createMetricSetReportContext(ctx, registry, date, \"histogram\");\n        const meterCtx: MetricSetReportContext = this\n            .createMetricSetReportContext(ctx, registry, date, \"meter\");\n        const timerCtx: MetricSetReportContext = this\n            .createMetricSetReportContext(ctx, registry, date, \"timer\");\n\n        counterCtx.metrics = registry.getMonotoneCounterList();\n        const monotoneCounterResults = this.reportMetrics(ctx, counterCtx,\n            (counter: MonotoneCounter) => this.reportCounter(counter, counterCtx),\n            (counter: MonotoneCounter) => counter.getCount());\n\n        counterCtx.metrics = registry.getCounterList();\n        const counterResults = this.reportMetrics(ctx, counterCtx as MetricSetReportContext,\n            (counter: Counter) => this.reportCounter(counter, counterCtx),\n            (counter: Counter) => counter.getCount());\n\n        gaugeCtx.metrics = registry.getGaugeList();\n        const gaugeResults = this.reportMetrics(ctx, gaugeCtx,\n            (gauge: Gauge) => this.reportGauge(gauge, gaugeCtx),\n            (gauge: Gauge) => gauge.getValue());\n\n        histogramCtx.metrics = registry.getHistogramList();\n        const histogramResults = this.reportMetrics(ctx, histogramCtx,\n            (histogram: Histogram) => this.reportHistogram(histogram, histogramCtx),\n            (histogram: Histogram) => histogram.getCount());\n\n        meterCtx.metrics = registry.getMeterList();\n        const meterResults = this.reportMetrics(ctx, meterCtx,\n            (meter: Meter) => this.reportMeter(meter, meterCtx),\n            (meter: Meter) => meter.getCount());\n\n        timerCtx.metrics = registry.getTimerList();\n        const timerResults = this.reportMetrics(ctx, timerCtx,\n            (timer: Timer) => this.reportTimer(timer, timerCtx),\n            (timer: Timer) => timer.getCount());\n\n        await this.handleResults(ctx, registry, date, \"counter\", monotoneCounterResults);\n        await this.handleResults(ctx, registry, date, \"counter\", counterResults);\n        await this.handleResults(ctx, registry, date, \"gauge\", gaugeResults);\n        await this.handleResults(ctx, registry, date, \"histogram\", histogramResults);\n        await this.handleResults(ctx, registry, date, \"meter\", meterResults);\n        await this.handleResults(ctx, registry, date, \"timer\", timerResults);\n    }\n\n    /**\n     * Creates an OverallReportContext.\n     *\n     * @protected\n     * @returns {OverallReportContext}\n     * @memberof MetricReporter\n     */\n    protected createOverallReportContext(): OverallReportContext {\n        return {\n        };\n    }\n\n    /**\n     * Creates a MetricSetReportContext with the specified arguments.\n     *\n     * @protected\n     * @param {OverallReportContext} overallCtx\n     * @param {MetricRegistry} registry\n     * @param {Date} date\n     * @param {MetricType} type\n     * @returns {MetricSetReportContext}\n     * @memberof MetricReporter\n     */\n    protected createMetricSetReportContext(\n        overallCtx: OverallReportContext,\n        registry: MetricRegistry,\n        date: Date,\n        type: MetricType): MetricSetReportContext {\n        return {\n            date,\n            metrics: [],\n            overallCtx,\n            registry,\n            type,\n        };\n    }\n\n    /**\n     * Filters out each metric that does not necessarily need to be reported\n     * and calls the specified reporting function for the remaining.\n     *\n     * @protected\n     * @template M type of the metric\n     * @template C typed ReportingContext\n     * @param {C} ctx\n     * @param {(metric: M, ctx: C) => T} reportFunction\n     * @param {(metric: M, ctx: C) => number} lastModifiedFunction\n     * @returns {Array>}\n     * @memberof MetricReporter\n     */\n    protected reportMetrics>(\n        overallCtx: OverallReportContext,\n        ctx: C,\n        reportFunction: (metric: M, ctx: C) => T,\n        lastModifiedFunction: (metric: M, ctx: C) => number): Array> {\n\n        return ctx.metrics\n            .filter((metric) => {\n                const metricId = (metric as any).id;\n                return !metricId || this.hasChanged(metricId, lastModifiedFunction(metric, ctx), ctx.date.getTime());\n            })\n            .map((metric) => ({\n                metric,\n                result: reportFunction(metric, ctx),\n            }))\n            .filter((result) => !!result.result);\n    }\n\n    /**\n     * Handles the reporting result for a group of metric instances.\n     *\n     * @protected\n     * @abstract\n     * @param {OverallReportContext} ctx\n     * @param {MetricRegistry} registry\n     * @param {Date} date\n     * @param {MetricType} type\n     * @param {Array>} results\n     * @returns {Promise}\n     * @memberof MetricReporter\n     */\n    protected abstract handleResults(\n        ctx: OverallReportContext,\n        registry: MetricRegistry,\n        date: Date,\n        type: MetricType,\n        results: Array>): Promise;\n\n    /**\n     * Does the reporting for a counter or monotone counter.\n     *\n     * @protected\n     * @abstract\n     * @param {(MonotoneCounter | Counter)} counter\n     * @param {(MetricSetReportContext)} ctx\n     * @returns {T}\n     * @memberof MetricReporter\n     */\n    protected abstract reportCounter(\n        counter: MonotoneCounter | Counter, ctx: MetricSetReportContext): T;\n\n    /**\n     * Does the reporting for a gauge.\n     *\n     * @protected\n     * @abstract\n     * @param {Gauge} gauge\n     * @param {MetricSetReportContext>} ctx\n     * @returns {T}\n     * @memberof MetricReporter\n     */\n    protected abstract reportGauge(gauge: Gauge, ctx: MetricSetReportContext>): T;\n\n    /**\n     * Does the reporting for a histogram.\n     *\n     * @protected\n     * @abstract\n     * @param {Histogram} histogram\n     * @param {MetricSetReportContext} ctx\n     * @returns {T}\n     * @memberof MetricReporter\n     */\n    protected abstract reportHistogram(histogram: Histogram, ctx: MetricSetReportContext): T;\n\n    /**\n     * Does the reporting for a meter.\n     *\n     * @protected\n     * @abstract\n     * @param {Meter} meter\n     * @param {MetricSetReportContext} ctx\n     * @returns {T}\n     * @memberof MetricReporter\n     */\n    protected abstract reportMeter(meter: Meter, ctx: MetricSetReportContext): T;\n\n    /**\n     * Does the reporting for a timer.\n     *\n     * @protected\n     * @abstract\n     * @param {Timer} timer\n     * @param {MetricSetReportContext} ctx\n     * @returns {T}\n     * @memberof MetricReporter\n     */\n    protected abstract reportTimer(timer: Timer, ctx: MetricSetReportContext): T;\n\n    /**\n     * Determines if a metric instance has changed it's value since the last check.\n     * This is always true if the minimal-reporting timeout was reached.\n     *\n     * @private\n     * @param {number} metricId\n     * @param {number} lastValue\n     * @param {number} date\n     * @returns {boolean}\n     * @memberof MetricReporter\n     */\n    protected hasChanged(metricId: number, lastValue: number, date: number): boolean {\n        let changed = true;\n        let metricEntry = {\n            lastReport: 0,\n            lastValue,\n        };\n        if (this.metricStates.has(metricId)) {\n            metricEntry = this.metricStates.get(metricId);\n            changed = metricEntry.lastValue !== lastValue;\n            if (!changed) {\n                const minReportingTimeout = MINUTE.convertTo(this.options.minReportingTimeout, MILLISECOND);\n                changed = metricEntry.lastReport + minReportingTimeout  tags[key] = tag);\n        }\n        if (registry && registry.getTags()) {\n            registry.getTags().forEach((tag, key) => tags[key] = tag);\n        }\n        if (taggable.getTags()) {\n            taggable.getTags().forEach((tag, key) => tags[key] = tag);\n        }\n        return tags;\n    }\n\n    /**\n     * Checks the number and gives it back or zero (0) if it's not a number.\n     *\n     * @protected\n     * @param {number} value\n     * @returns {number}\n     * @memberof MetricReporter\n     */\n    protected getNumber(value: number): number {\n        if (isNaN(value)) {\n            return 0;\n        }\n        return value;\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Reservoir.html":{"url":"interfaces/Reservoir.html","title":"interface - Reservoir","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Reservoir\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/reservoir.ts\n        \n\n            \n                Description\n            \n            \n                Represents a collection of values.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    size\n                                \n                                \n                                    snapshot\n                                \n                                \n                                    update\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            size\n                            \n                            \n                        \n                    \n                \n                \n                    \nsize()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/reservoir.ts:19\n                            \n                        \n\n\n                \n                    \n                            Gets the capacity of this reservoir.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            snapshot\n                            \n                            \n                        \n                    \n                \n                \n                    \nsnapshot()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/reservoir.ts:36\n                            \n                        \n\n\n                \n                    \n                            Creates a new snapshot of this reservoir.\n\n\n                            \n                            \n                            \n                                Returns :     Snapshot\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            update\n                            \n                            \n                        \n                    \n                \n                \n                    \nupdate(value: number)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/reservoir.ts:28\n                            \n                        \n\n\n                \n                    \n                            Adds a value to the reservoir.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        value\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { SimpleSnapshot, Snapshot } from \"./snapshot\";\n\n/**\n * Represents a collection of values.\n *\n * @export\n * @interface Reservoir\n */\nexport interface Reservoir {\n\n    /**\n     * Gets the capacity of this reservoir.\n     *\n     * @returns {number}\n     * @memberof Reservoir\n     */\n    size(): number;\n\n    /**\n     * Adds a value to the reservoir.\n     *\n     * @param {number} value\n     * @returns {this}\n     * @memberof Reservoir\n     */\n    update(value: number): this;\n\n    /**\n     * Creates a new snapshot of this reservoir.\n     *\n     * @returns {Snapshot}\n     * @memberof Reservoir\n     */\n    snapshot(): Snapshot;\n\n}\n\n/**\n * Simple implementation of a reservoir.\n * It has a maximum number of values, if the maximum\n * is reached old values are replaced by new values.\n *\n * @export\n * @class DefaultReservoir\n * @implements {Reservoir}\n */\nexport class DefaultReservoir implements Reservoir {\n\n    /**\n     * The values.\n     *\n     * @private\n     * @type {number[]}\n     * @memberof DefaultReservoir\n     */\n    private values: number[] = [];\n    /**\n     * The capacity of this reservoir.\n     *\n     * @private\n     * @type {number}\n     * @memberof DefaultReservoir\n     */\n    private maxSize: number;\n\n    /**\n     * Creates an instance of DefaultReservoir.\n     *\n     * @param {number} maxSize\n     * @memberof DefaultReservoir\n     */\n    public constructor(maxSize: number) {\n        this.maxSize = maxSize;\n    }\n\n    /**\n     * Gets the actual number of value, but at max the specified maximum.\n     *\n     * @returns {number}\n     * @memberof DefaultReservoir\n     */\n    public size(): number {\n        return this.values.length;\n    }\n\n    /**\n     * Adds the value to the array of numbers until the maximum number of\n     * values is reached. If the maximum number of values is reached\n     * an old value at a random position is replaced with the specified value.\n     *\n     * @param {number} value\n     * @returns {this}\n     * @memberof DefaultReservoir\n     */\n    public update(value: number): this {\n        if (this.values.length \n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Sampling.html":{"url":"interfaces/Sampling.html","title":"interface - Sampling","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Sampling\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/sampling.ts\n        \n\n            \n                Description\n            \n            \n                Interface fo all metric classes that can build a snapshot of values.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    getSnapshot\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getSnapshot\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetSnapshot()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/sampling.ts:19\n                            \n                        \n\n\n                \n                    \n                            Gets the snapshot of values.\n\n\n                            \n                            \n                            \n                                Returns :     Snapshot\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { Snapshot } from \"./snapshot\";\n\n/**\n * Interface fo all metric classes that can build a snapshot of values.\n *\n * @export\n * @interface Sampling\n */\nexport interface Sampling {\n\n    /**\n     * Gets the snapshot of values.\n     *\n     * @returns {Snapshot}\n     * @memberof Sampling\n     */\n    getSnapshot(): Snapshot;\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ScheduledMetricReporterOptions.html":{"url":"interfaces/ScheduledMetricReporterOptions.html","title":"interface - ScheduledMetricReporterOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ScheduledMetricReporterOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/reporter/scheduled-reporter.ts\n        \n\n            \n                Description\n            \n            \n                Options for the ScheduledMetricReporter.\n\n            \n\n            \n                Extends\n            \n            \n                    MetricReporterOptions\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        reportInterval\n                                \n                                \n                                            Optional\n                                        scheduler\n                                \n                                \n                                            Optional\n                                        unit\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        reportInterval\n                                    \n                                \n                                \n                                    \n                                        reportInterval:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The reporting interval in the time-unit specified in #unit.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        scheduler\n                                    \n                                \n                                \n                                    \n                                        scheduler:     Scheduler\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Scheduler\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The scheduler function used to trigger reporting runs.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        unit\n                                    \n                                \n                                \n                                    \n                                        unit:     TimeUnit\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     TimeUnit\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Time unit for the reporting interval.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { MILLISECOND, TimeUnit } from \"../time-unit\";\nimport { MetricReporter, MetricReporterOptions } from \"./metric-reporter\";\n\n/**\n * Scheduler function type definition.\n */\nexport type Scheduler = (prog: () => Promise, interval: number) => NodeJS.Timer;\n\n/**\n * Options for the {@link ScheduledMetricReporter}.\n *\n * @export\n * @interface ScheduledMetricReporterOptions\n * @extends {MetricReporterOptions}\n */\nexport interface ScheduledMetricReporterOptions extends MetricReporterOptions {\n    /**\n     * The reporting interval in the time-unit specified in {@link #unit}.\n     *\n     * @type {number}\n     * @memberof ScheduledMetricReporterOptions\n     */\n    readonly reportInterval?: number;\n    /**\n     * Time unit for the reporting interval.\n     *\n     * @type {TimeUnit}\n     * @memberof ScheduledMetricReporterOptions\n     */\n    readonly unit?: TimeUnit;\n    /**\n     * The scheduler function used to trigger reporting runs.\n     *\n     * @type {Scheduler}\n     * @memberof ScheduledMetricReporterOptions\n     */\n    readonly scheduler?: Scheduler;\n}\n\n/**\n * Base-class for scheduled metric-reporter implementations.\n *\n * @export\n * @abstract\n * @class ScheduledMetricReporter\n */\nexport abstract class ScheduledMetricReporter\n    extends MetricReporter {\n\n    /**\n     * Timer instance retuned by the scheduler function.\n     *\n     * @private\n     * @type {NodeJS.Timer}\n     * @memberof ScheduledMetricReporter\n     */\n    private timer: NodeJS.Timer;\n\n    /**\n     * Creates an instance of ScheduledMetricReporter.\n     *\n     * @param {O} options\n     * @memberof ScheduledMetricReporter\n     */\n    public constructor(options: O) {\n        super(options);\n    }\n\n    /**\n     * Uses the scheduler function to call the {@link #report} function\n     * in the interval specified. The interval is converted into {@link MILLISECOND}s.\n     *\n     * @returns {Promise}\n     * @memberof ScheduledMetricReporter\n     */\n    public async start(): Promise {\n        const interval: number = this.options.unit.convertTo(this.options.reportInterval, MILLISECOND);\n        this.timer = this.options.scheduler(() => this.report(), interval);\n        return this;\n    }\n\n    /**\n     * Stops reporting metrics.\n     *\n     * @returns {Promise}\n     * @memberof ScheduledMetricReporter\n     */\n    public async stop(): Promise {\n        if (this.timer) {\n            this.timer.unref();\n        }\n        return this;\n    }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SimpleSnapshot.html":{"url":"classes/SimpleSnapshot.html","title":"class - SimpleSnapshot","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SimpleSnapshot\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/snapshot.ts\n        \n\n            \n                Description\n            \n            \n                Default implementation of the Snapshot interface.\n\n            \n\n\n            \n                Implements\n            \n            \n                        Snapshot\n            \n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                values\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                get75thPercentile\n                            \n                            \n                                    Public\n                                get95thPercentile\n                            \n                            \n                                    Public\n                                get98thPercentile\n                            \n                            \n                                    Public\n                                get999thPercentile\n                            \n                            \n                                    Public\n                                get99thPercentile\n                            \n                            \n                                    Public\n                                getMax\n                            \n                            \n                                    Public\n                                getMean\n                            \n                            \n                                    Public\n                                getMedian\n                            \n                            \n                                    Public\n                                getMin\n                            \n                            \n                                    Public\n                                getStdDev\n                            \n                            \n                                    Public\n                                getValue\n                            \n                            \n                                    Public\n                                getValues\n                            \n                            \n                                    Public\n                                size\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(values: number[])\n                    \n                \n                        \n                            \n                                Defined in lib/metrics/snapshot.ts:134\n                            \n                        \n\n                \n                    \n                            Creates an instance of SimpleSnapshot.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        values\n                                                  \n                                                        \n                                                                    number[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            values\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        values:     number[]\n\n                    \n                \n                    \n                        \n                            Type :     number[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/snapshot.ts:134\n                            \n                        \n\n                \n                    \n                        Sorted collection of values.\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            get75thPercentile\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        get75thPercentile()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/snapshot.ts:153\n                            \n                        \n\n\n                \n                    \n                            Calls getValue(0.75) to get the value of the 75% boundary\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            get95thPercentile\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        get95thPercentile()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/snapshot.ts:163\n                            \n                        \n\n\n                \n                    \n                            Calls getValue(0.95) to get the value of the 95% boundary\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            get98thPercentile\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        get98thPercentile()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/snapshot.ts:173\n                            \n                        \n\n\n                \n                    \n                            Calls getValue(0.98) to get the value of the 98% boundary\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            get999thPercentile\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        get999thPercentile()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/snapshot.ts:183\n                            \n                        \n\n\n                \n                    \n                            Calls getValue(0.999) to get the value of the 99.9% boundary\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            get99thPercentile\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        get99thPercentile()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/snapshot.ts:193\n                            \n                        \n\n\n                \n                    \n                            Calls getValue(0.99) to get the value of the 99% boundary\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getMax\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getMax()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/snapshot.ts:213\n                            \n                        \n\n\n                \n                    \n                            Gets the last value of the value array.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getMean\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getMean()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/snapshot.ts:253\n                            \n                        \n\n\n                \n                    \n                            Gets average value of the value array.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getMedian\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getMedian()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/snapshot.ts:203\n                            \n                        \n\n\n                \n                    \n                            Calls getValue(0.5) to get the value of the 50% boundary\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getMin\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getMin()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/snapshot.ts:223\n                            \n                        \n\n\n                \n                    \n                            Gets the first value of the value array.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getStdDev\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getStdDev()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/snapshot.ts:269\n                            \n                        \n\n\n                \n                    \n                            Gets the average deviation among the values.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getValue\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getValue(quantile: number)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/snapshot.ts:303\n                            \n                        \n\n\n                \n                    \n                            Gets the value of the boundary specified.\nE.g. considering the following values (sorted): [12, 20, 22, 25, 30, 32, 40, 50, 55, 56]\nquantile | position / index | value\n0.25 | 3 | 24.25\n0.5 | 5 | 36\n0.75 | 8 | 51,25\n0.95 | 10 | NaN\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        quantile\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getValues\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getValues()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/snapshot.ts:233\n                            \n                        \n\n\n                \n                    \n                            Gets the value array.\n\n\n                            \n                            \n                            \n                                Returns :     number[]\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            size\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        size()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/snapshot.ts:243\n                            \n                        \n\n\n                \n                    \n                            Gets the length of the value array.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\n/**\n * A static state of a collection of values.\n *\n * @export\n * @interface Snapshot\n */\nexport interface Snapshot {\n\n    /**\n     * Gets the value of 75% boundary.\n     *\n     * @returns {number}\n     * @memberof Snapshot\n     */\n    get75thPercentile(): number;\n\n    /**\n     * Gets the value of 95% boundary.\n     *\n     * @returns {number}\n     * @memberof Snapshot\n     */\n    get95thPercentile(): number;\n\n    /**\n     * Gets the value of 98% boundary.\n     *\n     * @returns {number}\n     * @memberof Snapshot\n     */\n    get98thPercentile(): number;\n\n    /**\n     * Gets the value of 99.9% boundary.\n     *\n     * @returns {number}\n     * @memberof Snapshot\n     */\n    get999thPercentile(): number;\n\n    /**\n     * Gets the value of 99% boundary.\n     *\n     * @returns {number}\n     * @memberof Snapshot\n     */\n    get99thPercentile(): number;\n\n    /**\n     * Gets the value of 50% boundary.\n     *\n     * @returns {number}\n     * @memberof Snapshot\n     */\n    getMedian(): number;\n\n    /**\n     * Gets the maximum value.\n     *\n     * @returns {number}\n     * @memberof Snapshot\n     */\n    getMax(): number;\n\n    /**\n     * Gets the minimum value.\n     *\n     * @returns {number}\n     * @memberof Snapshot\n     */\n    getMin(): number;\n\n    /**\n     * Gets all values.\n     *\n     * @returns {number[]}\n     * @memberof Snapshot\n     */\n    getValues(): number[];\n\n    /**\n     * Gets the number of values.\n     *\n     * @returns {number}\n     * @memberof Snapshot\n     */\n    size(): number;\n\n    /**\n     * Gets the average of all values.\n     *\n     * @returns {number}\n     * @memberof Snapshot\n     */\n    getMean(): number;\n\n    /**\n     * Gets the average deviation among the values.\n     *\n     * @returns {number}\n     * @memberof Snapshot\n     */\n    getStdDev(): number;\n\n    /**\n     * Gets the value of boundary specified.\n     *\n     * @param {number} quantile\n     * @returns {number}\n     * @memberof Snapshot\n     */\n    getValue(quantile: number): number;\n\n}\n\n/**\n * Default implementation of the {@link Snapshot} interface.\n *\n * @export\n * @class SimpleSnapshot\n * @implements {Snapshot}\n */\nexport class SimpleSnapshot implements Snapshot {\n\n    /**\n     * Sorted collection of values.\n     *\n     * @private\n     * @type {number[]}\n     * @memberof SimpleSnapshot\n     */\n    private values: number[] = [];\n\n    /**\n     * Creates an instance of SimpleSnapshot.\n     *\n     * @param {number[]} values\n     * @memberof SimpleSnapshot\n     */\n    public constructor(values: number[]) {\n        this.values = values.slice(0, values.length);\n        this.values = this.values.sort((a, b) => a - b);\n    }\n\n    /**\n     * Calls getValue(0.75) to get the value of the 75% boundary\n     *\n     * @returns {number}\n     * @memberof SimpleSnapshot\n     */\n    public get75thPercentile(): number {\n        return this.getValue(0.75);\n    }\n\n    /**\n     * Calls getValue(0.95) to get the value of the 95% boundary\n     *\n     * @returns {number}\n     * @memberof SimpleSnapshot\n     */\n    public get95thPercentile(): number {\n        return this.getValue(0.95);\n    }\n\n    /**\n     * Calls getValue(0.98) to get the value of the 98% boundary\n     *\n     * @returns {number}\n     * @memberof SimpleSnapshot\n     */\n    public get98thPercentile(): number {\n        return this.getValue(0.98);\n    }\n\n    /**\n     * Calls getValue(0.999) to get the value of the 99.9% boundary\n     *\n     * @returns {number}\n     * @memberof SimpleSnapshot\n     */\n    public get999thPercentile(): number {\n        return this.getValue(0.999);\n    }\n\n    /**\n     * Calls getValue(0.99) to get the value of the 99% boundary\n     *\n     * @returns {number}\n     * @memberof SimpleSnapshot\n     */\n    public get99thPercentile(): number {\n        return this.getValue(0.99);\n    }\n\n    /**\n     * Calls getValue(0.5) to get the value of the 50% boundary\n     *\n     * @returns {number}\n     * @memberof SimpleSnapshot\n     */\n    public getMedian(): number {\n        return this.getValue(0.5);\n    }\n\n    /**\n     * Gets the last value of the value array.\n     *\n     * @returns {number}\n     * @memberof SimpleSnapshot\n     */\n    public getMax(): number {\n        return this.values[this.values.length - 1];\n    }\n\n    /**\n     * Gets the first value of the value array.\n     *\n     * @returns {number}\n     * @memberof SimpleSnapshot\n     */\n    public getMin(): number {\n        return this.values[0];\n    }\n\n    /**\n     * Gets the value array.\n     *\n     * @returns {number[]}\n     * @memberof SimpleSnapshot\n     */\n    public getValues(): number[] {\n        return this.values;\n    }\n\n    /**\n     * Gets the length of the value array.\n     *\n     * @returns {number}\n     * @memberof SimpleSnapshot\n     */\n    public size(): number {\n        return this.values.length;\n    }\n\n    /**\n     * Gets average value of the value array.\n     *\n     * @returns {number}\n     * @memberof SimpleSnapshot\n     */\n    public getMean(): number {\n        if (this.values.length === 0) {\n            return 0;\n        }\n\n        let sum = 0;\n        this.values.forEach((value) => sum += value);\n        return sum / this.values.length;\n    }\n\n    /**\n     * Gets the average deviation among the values.\n     *\n     * @returns {number}\n     * @memberof SimpleSnapshot\n     */\n    public getStdDev(): number {\n        if (this.values.length === 0) {\n            return 0;\n        }\n\n        const mean = this.getMean();\n        let sum = 0;\n        this.values.forEach((value) => {\n            const diff = value - mean;\n            sum += diff * diff;\n        });\n\n        return Math.sqrt(sum / (this.values.length - 1));\n    }\n\n    /**\n     * Gets the value of the boundary specified.\n     *\n     * E.g. considering the following values (sorted): [12, 20, 22, 25, 30, 32, 40, 50, 55, 56]\n     *\n     * quantile | position / index | value\n     *\n     * 0.25 | 3 | 24.25\n     *\n     * 0.5 | 5 | 36\n     *\n     * 0.75 | 8 | 51,25\n     *\n     * 0.95 | 10 | NaN\n     *\n     * @param {number} quantile\n     * @returns {number}\n     * @memberof SimpleSnapshot\n     */\n    public getValue(quantile: number): number {\n        if (quantile  1.0 || isNaN(quantile)) {\n            return NaN;\n        }\n\n        if (this.values.length === 0) {\n            return 0;\n        }\n\n        const pos = quantile * (this.values.length + 1);\n        const index = Math.round(pos);\n\n        if (index = this.values.length) {\n            return this.getMax();\n        }\n\n        const lower = this.values[index - 1];\n        const upper = this.values[index];\n        return lower + (pos - Math.floor(pos)) * (upper - lower);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SizeAttributeInterface.html":{"url":"interfaces/SizeAttributeInterface.html","title":"interface - SizeAttributeInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  SizeAttributeInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/size-gauge.ts\n        \n\n            \n                Description\n            \n            \n                Accessor-interface for objects with \"size\" attribute (e.g. Map, Set).\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        size\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        size\n                                    \n                                \n                                \n                                    \n                                        size:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { Gauge } from \"./gauge\";\nimport { BaseMetric } from \"./metric\";\n\n/**\n * Accessor-interface for objects with \"length()\" method.\n *\n * @export\n * @interface LengthMethodInterface\n */\nexport interface LengthMethodInterface {\n    length(): number;\n}\n\n/**\n * Accessor-interface for objects with \"length\" attribute (e.g. Array).\n *\n * @export\n * @interface LengthAttributeInterface\n */\nexport interface LengthAttributeInterface {\n    length: number;\n}\n\n/**\n * Accessor-interface for objects with \"size\" method.\n *\n * @export\n * @interface SizeMethodInterface\n */\nexport interface SizeMethodInterface {\n    size(): number;\n}\n\n/**\n * Accessor-interface for objects with \"size\" attribute (e.g. Map, Set).\n *\n * @export\n * @interface SizeAttributeInterface\n */\nexport interface SizeAttributeInterface {\n    size: number;\n}\n\ntype ValueExtractor = () => number;\n\n/**\n * Gets the current size / length of an object as gauge metric.\n *\n * @export\n * @class SizeGauge\n * @extends {BaseMetric}\n * @implements {Gauge}\n */\nexport class SizeGauge extends BaseMetric implements Gauge {\n\n    /**\n     * Checks if the specified collection is a {link LengthAttributeInterface}.\n     *\n     * @protected\n     * @static\n     * @param {*} collection\n     * @returns {collection is LengthAttributeInterface}\n     * @memberof SizeGauge\n     */\n    protected static isLengthAttributeInterface(collection: any): collection is LengthAttributeInterface {\n        return collection && typeof collection.length === \"number\";\n    }\n\n    /**\n     * Checks if the specified collection is a {link LengthMethodInterface}.\n     *\n     * @protected\n     * @static\n     * @param {*} collection\n     * @returns {collection is LengthMethodInterface}\n     * @memberof SizeGauge\n     */\n    protected static isLengthMethodInterface(collection: any): collection is LengthMethodInterface {\n        return collection && typeof collection.length === \"function\";\n    }\n\n    /**\n     * Checks if the specified collection is a {link SizeAttributeInterface}.\n     *\n     * @protected\n     * @static\n     * @param {*} collection\n     * @returns {collection is SizeAttributeInterface}\n     * @memberof SizeGauge\n     */\n    protected static isSizeAttributeInterface(collection: any): collection is SizeAttributeInterface {\n        return collection && typeof collection.size === \"number\";\n    }\n\n    /**\n     * Checks if the specified collection is a {link SizeMethodInterface}.\n     *\n     * @protected\n     * @static\n     * @param {*} collection\n     * @returns {collection is SizeMethodInterface}\n     * @memberof SizeGauge\n     */\n    protected static isSizeMethodInterface(collection: any): collection is SizeMethodInterface {\n        return collection && typeof collection.size === \"function\";\n    }\n\n    /**\n     * Gets the actual value for the collection passed to the constructor.\n     *\n     * @private\n     * @type {ValueExtractor}\n     * @memberof SizeGauge\n     */\n    private extractor: ValueExtractor;\n\n    /**\n     * Creates an instance of SizeGauge.\n     *\n     * @param {string} name The name of the metric\n     * @param collection The collection to get the size / length from.\n     * @param {string} [description] The description of the metric\n     * @memberof SizeGauge\n     */\n    public constructor(\n        name: string,\n        collection: LengthAttributeInterface | LengthMethodInterface | SizeAttributeInterface | SizeMethodInterface,\n        description?: string) {\n\n        super();\n        this.setName(name);\n        this.setDescription(description);\n\n        if (SizeGauge.isLengthAttributeInterface(collection)) {\n            this.extractor = () => collection.length;\n        } else if (SizeGauge.isLengthMethodInterface(collection)) {\n            this.extractor = () => collection.length();\n        } else if (SizeGauge.isSizeAttributeInterface(collection)) {\n            this.extractor = () => collection.size;\n        } else if (SizeGauge.isSizeMethodInterface(collection)) {\n            this.extractor = () => collection.size();\n        } else {\n            this.extractor = () => -1;\n        }\n    }\n\n    /**\n     * Reports the size / length of the collection.\n     *\n     * @returns {number} Returns the current size of the collection or -1.\n     * @memberof SizeGauge\n     */\n    public getValue(): number {\n        return this.extractor();\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SizeMethodInterface.html":{"url":"interfaces/SizeMethodInterface.html","title":"interface - SizeMethodInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  SizeMethodInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/size-gauge.ts\n        \n\n            \n                Description\n            \n            \n                Accessor-interface for objects with \"size\" method.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    size\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            size\n                            \n                            \n                        \n                    \n                \n                \n                    \nsize()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/size-gauge.ts:33\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     number\n\n                            \n                    \n                \n            \n        \n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { Gauge } from \"./gauge\";\nimport { BaseMetric } from \"./metric\";\n\n/**\n * Accessor-interface for objects with \"length()\" method.\n *\n * @export\n * @interface LengthMethodInterface\n */\nexport interface LengthMethodInterface {\n    length(): number;\n}\n\n/**\n * Accessor-interface for objects with \"length\" attribute (e.g. Array).\n *\n * @export\n * @interface LengthAttributeInterface\n */\nexport interface LengthAttributeInterface {\n    length: number;\n}\n\n/**\n * Accessor-interface for objects with \"size\" method.\n *\n * @export\n * @interface SizeMethodInterface\n */\nexport interface SizeMethodInterface {\n    size(): number;\n}\n\n/**\n * Accessor-interface for objects with \"size\" attribute (e.g. Map, Set).\n *\n * @export\n * @interface SizeAttributeInterface\n */\nexport interface SizeAttributeInterface {\n    size: number;\n}\n\ntype ValueExtractor = () => number;\n\n/**\n * Gets the current size / length of an object as gauge metric.\n *\n * @export\n * @class SizeGauge\n * @extends {BaseMetric}\n * @implements {Gauge}\n */\nexport class SizeGauge extends BaseMetric implements Gauge {\n\n    /**\n     * Checks if the specified collection is a {link LengthAttributeInterface}.\n     *\n     * @protected\n     * @static\n     * @param {*} collection\n     * @returns {collection is LengthAttributeInterface}\n     * @memberof SizeGauge\n     */\n    protected static isLengthAttributeInterface(collection: any): collection is LengthAttributeInterface {\n        return collection && typeof collection.length === \"number\";\n    }\n\n    /**\n     * Checks if the specified collection is a {link LengthMethodInterface}.\n     *\n     * @protected\n     * @static\n     * @param {*} collection\n     * @returns {collection is LengthMethodInterface}\n     * @memberof SizeGauge\n     */\n    protected static isLengthMethodInterface(collection: any): collection is LengthMethodInterface {\n        return collection && typeof collection.length === \"function\";\n    }\n\n    /**\n     * Checks if the specified collection is a {link SizeAttributeInterface}.\n     *\n     * @protected\n     * @static\n     * @param {*} collection\n     * @returns {collection is SizeAttributeInterface}\n     * @memberof SizeGauge\n     */\n    protected static isSizeAttributeInterface(collection: any): collection is SizeAttributeInterface {\n        return collection && typeof collection.size === \"number\";\n    }\n\n    /**\n     * Checks if the specified collection is a {link SizeMethodInterface}.\n     *\n     * @protected\n     * @static\n     * @param {*} collection\n     * @returns {collection is SizeMethodInterface}\n     * @memberof SizeGauge\n     */\n    protected static isSizeMethodInterface(collection: any): collection is SizeMethodInterface {\n        return collection && typeof collection.size === \"function\";\n    }\n\n    /**\n     * Gets the actual value for the collection passed to the constructor.\n     *\n     * @private\n     * @type {ValueExtractor}\n     * @memberof SizeGauge\n     */\n    private extractor: ValueExtractor;\n\n    /**\n     * Creates an instance of SizeGauge.\n     *\n     * @param {string} name The name of the metric\n     * @param collection The collection to get the size / length from.\n     * @param {string} [description] The description of the metric\n     * @memberof SizeGauge\n     */\n    public constructor(\n        name: string,\n        collection: LengthAttributeInterface | LengthMethodInterface | SizeAttributeInterface | SizeMethodInterface,\n        description?: string) {\n\n        super();\n        this.setName(name);\n        this.setDescription(description);\n\n        if (SizeGauge.isLengthAttributeInterface(collection)) {\n            this.extractor = () => collection.length;\n        } else if (SizeGauge.isLengthMethodInterface(collection)) {\n            this.extractor = () => collection.length();\n        } else if (SizeGauge.isSizeAttributeInterface(collection)) {\n            this.extractor = () => collection.size;\n        } else if (SizeGauge.isSizeMethodInterface(collection)) {\n            this.extractor = () => collection.size();\n        } else {\n            this.extractor = () => -1;\n        }\n    }\n\n    /**\n     * Reports the size / length of the collection.\n     *\n     * @returns {number} Returns the current size of the collection or -1.\n     * @memberof SizeGauge\n     */\n    public getValue(): number {\n        return this.extractor();\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SlidingWindowReservoir.html":{"url":"classes/SlidingWindowReservoir.html","title":"class - SlidingWindowReservoir","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SlidingWindowReservoir\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/reservoir.ts\n        \n\n            \n                Description\n            \n            \n                A reservoir that keeps the order of values and restarts\nat the beginning if the maximum number of values is reached.\n\n            \n\n\n            \n                Implements\n            \n            \n                        Reservoir\n            \n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                index\n                            \n                            \n                                    Private\n                                maxSize\n                            \n                            \n                                    Private\n                                values\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                size\n                            \n                            \n                                    Public\n                                snapshot\n                            \n                            \n                                    Public\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(maxSize: number)\n                    \n                \n                        \n                            \n                                Defined in lib/metrics/reservoir.ts:152\n                            \n                        \n\n                \n                    \n                            Creates an instance of SlidingWindowReservoir.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        maxSize\n                                                  \n                                                        \n                                                                    number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            index\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        index:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/reservoir.ts:152\n                            \n                        \n\n                \n                    \n                        The current index in the value array.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            maxSize\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        maxSize:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/reservoir.ts:144\n                            \n                        \n\n                \n                    \n                        The capacity of the reservoir.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            values\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        values:     number[]\n\n                    \n                \n                    \n                        \n                            Type :     number[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/reservoir.ts:136\n                            \n                        \n\n                \n                    \n                        The values.\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            size\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        size()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/reservoir.ts:170\n                            \n                        \n\n\n                \n                    \n                            Gets the number of values, but at may the capacity of the reservoir.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            snapshot\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        snapshot()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/reservoir.ts:198\n                            \n                        \n\n\n                \n                    \n                            Creates a new snapshot using the values array.\n\n\n                            \n                            \n                            \n                                Returns :     Snapshot\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            update\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        update(value: number)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/reservoir.ts:183\n                            \n                        \n\n\n                \n                    \n                            Adds the value to the array of values until the capacity\nof the reservoir is reached. If the maximum number of\nvalues is reached, the insertion restarts at the beginning.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        value\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { SimpleSnapshot, Snapshot } from \"./snapshot\";\n\n/**\n * Represents a collection of values.\n *\n * @export\n * @interface Reservoir\n */\nexport interface Reservoir {\n\n    /**\n     * Gets the capacity of this reservoir.\n     *\n     * @returns {number}\n     * @memberof Reservoir\n     */\n    size(): number;\n\n    /**\n     * Adds a value to the reservoir.\n     *\n     * @param {number} value\n     * @returns {this}\n     * @memberof Reservoir\n     */\n    update(value: number): this;\n\n    /**\n     * Creates a new snapshot of this reservoir.\n     *\n     * @returns {Snapshot}\n     * @memberof Reservoir\n     */\n    snapshot(): Snapshot;\n\n}\n\n/**\n * Simple implementation of a reservoir.\n * It has a maximum number of values, if the maximum\n * is reached old values are replaced by new values.\n *\n * @export\n * @class DefaultReservoir\n * @implements {Reservoir}\n */\nexport class DefaultReservoir implements Reservoir {\n\n    /**\n     * The values.\n     *\n     * @private\n     * @type {number[]}\n     * @memberof DefaultReservoir\n     */\n    private values: number[] = [];\n    /**\n     * The capacity of this reservoir.\n     *\n     * @private\n     * @type {number}\n     * @memberof DefaultReservoir\n     */\n    private maxSize: number;\n\n    /**\n     * Creates an instance of DefaultReservoir.\n     *\n     * @param {number} maxSize\n     * @memberof DefaultReservoir\n     */\n    public constructor(maxSize: number) {\n        this.maxSize = maxSize;\n    }\n\n    /**\n     * Gets the actual number of value, but at max the specified maximum.\n     *\n     * @returns {number}\n     * @memberof DefaultReservoir\n     */\n    public size(): number {\n        return this.values.length;\n    }\n\n    /**\n     * Adds the value to the array of numbers until the maximum number of\n     * values is reached. If the maximum number of values is reached\n     * an old value at a random position is replaced with the specified value.\n     *\n     * @param {number} value\n     * @returns {this}\n     * @memberof DefaultReservoir\n     */\n    public update(value: number): this {\n        if (this.values.length \n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Snapshot.html":{"url":"interfaces/Snapshot.html","title":"interface - Snapshot","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Snapshot\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/snapshot.ts\n        \n\n            \n                Description\n            \n            \n                A static state of a collection of values.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    get75thPercentile\n                                \n                                \n                                    get95thPercentile\n                                \n                                \n                                    get98thPercentile\n                                \n                                \n                                    get999thPercentile\n                                \n                                \n                                    get99thPercentile\n                                \n                                \n                                    getMax\n                                \n                                \n                                    getMean\n                                \n                                \n                                    getMedian\n                                \n                                \n                                    getMin\n                                \n                                \n                                    getStdDev\n                                \n                                \n                                    getValue\n                                \n                                \n                                    getValues\n                                \n                                \n                                    size\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            get75thPercentile\n                            \n                            \n                        \n                    \n                \n                \n                    \nget75thPercentile()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/snapshot.ts:17\n                            \n                        \n\n\n                \n                    \n                            Gets the value of 75% boundary.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            get95thPercentile\n                            \n                            \n                        \n                    \n                \n                \n                    \nget95thPercentile()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/snapshot.ts:25\n                            \n                        \n\n\n                \n                    \n                            Gets the value of 95% boundary.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            get98thPercentile\n                            \n                            \n                        \n                    \n                \n                \n                    \nget98thPercentile()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/snapshot.ts:33\n                            \n                        \n\n\n                \n                    \n                            Gets the value of 98% boundary.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            get999thPercentile\n                            \n                            \n                        \n                    \n                \n                \n                    \nget999thPercentile()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/snapshot.ts:41\n                            \n                        \n\n\n                \n                    \n                            Gets the value of 99.9% boundary.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            get99thPercentile\n                            \n                            \n                        \n                    \n                \n                \n                    \nget99thPercentile()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/snapshot.ts:49\n                            \n                        \n\n\n                \n                    \n                            Gets the value of 99% boundary.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getMax\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetMax()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/snapshot.ts:65\n                            \n                        \n\n\n                \n                    \n                            Gets the maximum value.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getMean\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetMean()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/snapshot.ts:97\n                            \n                        \n\n\n                \n                    \n                            Gets the average of all values.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getMedian\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetMedian()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/snapshot.ts:57\n                            \n                        \n\n\n                \n                    \n                            Gets the value of 50% boundary.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getMin\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetMin()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/snapshot.ts:73\n                            \n                        \n\n\n                \n                    \n                            Gets the minimum value.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getStdDev\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetStdDev()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/snapshot.ts:105\n                            \n                        \n\n\n                \n                    \n                            Gets the average deviation among the values.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getValue\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetValue(quantile: number)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/snapshot.ts:114\n                            \n                        \n\n\n                \n                    \n                            Gets the value of boundary specified.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        quantile\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getValues\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetValues()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/snapshot.ts:81\n                            \n                        \n\n\n                \n                    \n                            Gets all values.\n\n\n                            \n                            \n                            \n                                Returns :     number[]\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            size\n                            \n                            \n                        \n                    \n                \n                \n                    \nsize()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/snapshot.ts:89\n                            \n                        \n\n\n                \n                    \n                            Gets the number of values.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\n/**\n * A static state of a collection of values.\n *\n * @export\n * @interface Snapshot\n */\nexport interface Snapshot {\n\n    /**\n     * Gets the value of 75% boundary.\n     *\n     * @returns {number}\n     * @memberof Snapshot\n     */\n    get75thPercentile(): number;\n\n    /**\n     * Gets the value of 95% boundary.\n     *\n     * @returns {number}\n     * @memberof Snapshot\n     */\n    get95thPercentile(): number;\n\n    /**\n     * Gets the value of 98% boundary.\n     *\n     * @returns {number}\n     * @memberof Snapshot\n     */\n    get98thPercentile(): number;\n\n    /**\n     * Gets the value of 99.9% boundary.\n     *\n     * @returns {number}\n     * @memberof Snapshot\n     */\n    get999thPercentile(): number;\n\n    /**\n     * Gets the value of 99% boundary.\n     *\n     * @returns {number}\n     * @memberof Snapshot\n     */\n    get99thPercentile(): number;\n\n    /**\n     * Gets the value of 50% boundary.\n     *\n     * @returns {number}\n     * @memberof Snapshot\n     */\n    getMedian(): number;\n\n    /**\n     * Gets the maximum value.\n     *\n     * @returns {number}\n     * @memberof Snapshot\n     */\n    getMax(): number;\n\n    /**\n     * Gets the minimum value.\n     *\n     * @returns {number}\n     * @memberof Snapshot\n     */\n    getMin(): number;\n\n    /**\n     * Gets all values.\n     *\n     * @returns {number[]}\n     * @memberof Snapshot\n     */\n    getValues(): number[];\n\n    /**\n     * Gets the number of values.\n     *\n     * @returns {number}\n     * @memberof Snapshot\n     */\n    size(): number;\n\n    /**\n     * Gets the average of all values.\n     *\n     * @returns {number}\n     * @memberof Snapshot\n     */\n    getMean(): number;\n\n    /**\n     * Gets the average deviation among the values.\n     *\n     * @returns {number}\n     * @memberof Snapshot\n     */\n    getStdDev(): number;\n\n    /**\n     * Gets the value of boundary specified.\n     *\n     * @param {number} quantile\n     * @returns {number}\n     * @memberof Snapshot\n     */\n    getValue(quantile: number): number;\n\n}\n\n/**\n * Default implementation of the {@link Snapshot} interface.\n *\n * @export\n * @class SimpleSnapshot\n * @implements {Snapshot}\n */\nexport class SimpleSnapshot implements Snapshot {\n\n    /**\n     * Sorted collection of values.\n     *\n     * @private\n     * @type {number[]}\n     * @memberof SimpleSnapshot\n     */\n    private values: number[] = [];\n\n    /**\n     * Creates an instance of SimpleSnapshot.\n     *\n     * @param {number[]} values\n     * @memberof SimpleSnapshot\n     */\n    public constructor(values: number[]) {\n        this.values = values.slice(0, values.length);\n        this.values = this.values.sort((a, b) => a - b);\n    }\n\n    /**\n     * Calls getValue(0.75) to get the value of the 75% boundary\n     *\n     * @returns {number}\n     * @memberof SimpleSnapshot\n     */\n    public get75thPercentile(): number {\n        return this.getValue(0.75);\n    }\n\n    /**\n     * Calls getValue(0.95) to get the value of the 95% boundary\n     *\n     * @returns {number}\n     * @memberof SimpleSnapshot\n     */\n    public get95thPercentile(): number {\n        return this.getValue(0.95);\n    }\n\n    /**\n     * Calls getValue(0.98) to get the value of the 98% boundary\n     *\n     * @returns {number}\n     * @memberof SimpleSnapshot\n     */\n    public get98thPercentile(): number {\n        return this.getValue(0.98);\n    }\n\n    /**\n     * Calls getValue(0.999) to get the value of the 99.9% boundary\n     *\n     * @returns {number}\n     * @memberof SimpleSnapshot\n     */\n    public get999thPercentile(): number {\n        return this.getValue(0.999);\n    }\n\n    /**\n     * Calls getValue(0.99) to get the value of the 99% boundary\n     *\n     * @returns {number}\n     * @memberof SimpleSnapshot\n     */\n    public get99thPercentile(): number {\n        return this.getValue(0.99);\n    }\n\n    /**\n     * Calls getValue(0.5) to get the value of the 50% boundary\n     *\n     * @returns {number}\n     * @memberof SimpleSnapshot\n     */\n    public getMedian(): number {\n        return this.getValue(0.5);\n    }\n\n    /**\n     * Gets the last value of the value array.\n     *\n     * @returns {number}\n     * @memberof SimpleSnapshot\n     */\n    public getMax(): number {\n        return this.values[this.values.length - 1];\n    }\n\n    /**\n     * Gets the first value of the value array.\n     *\n     * @returns {number}\n     * @memberof SimpleSnapshot\n     */\n    public getMin(): number {\n        return this.values[0];\n    }\n\n    /**\n     * Gets the value array.\n     *\n     * @returns {number[]}\n     * @memberof SimpleSnapshot\n     */\n    public getValues(): number[] {\n        return this.values;\n    }\n\n    /**\n     * Gets the length of the value array.\n     *\n     * @returns {number}\n     * @memberof SimpleSnapshot\n     */\n    public size(): number {\n        return this.values.length;\n    }\n\n    /**\n     * Gets average value of the value array.\n     *\n     * @returns {number}\n     * @memberof SimpleSnapshot\n     */\n    public getMean(): number {\n        if (this.values.length === 0) {\n            return 0;\n        }\n\n        let sum = 0;\n        this.values.forEach((value) => sum += value);\n        return sum / this.values.length;\n    }\n\n    /**\n     * Gets the average deviation among the values.\n     *\n     * @returns {number}\n     * @memberof SimpleSnapshot\n     */\n    public getStdDev(): number {\n        if (this.values.length === 0) {\n            return 0;\n        }\n\n        const mean = this.getMean();\n        let sum = 0;\n        this.values.forEach((value) => {\n            const diff = value - mean;\n            sum += diff * diff;\n        });\n\n        return Math.sqrt(sum / (this.values.length - 1));\n    }\n\n    /**\n     * Gets the value of the boundary specified.\n     *\n     * E.g. considering the following values (sorted): [12, 20, 22, 25, 30, 32, 40, 50, 55, 56]\n     *\n     * quantile | position / index | value\n     *\n     * 0.25 | 3 | 24.25\n     *\n     * 0.5 | 5 | 36\n     *\n     * 0.75 | 8 | 51,25\n     *\n     * 0.95 | 10 | NaN\n     *\n     * @param {number} quantile\n     * @returns {number}\n     * @memberof SimpleSnapshot\n     */\n    public getValue(quantile: number): number {\n        if (quantile  1.0 || isNaN(quantile)) {\n            return NaN;\n        }\n\n        if (this.values.length === 0) {\n            return 0;\n        }\n\n        const pos = quantile * (this.values.length + 1);\n        const index = Math.round(pos);\n\n        if (index = this.values.length) {\n            return this.getMax();\n        }\n\n        const lower = this.values[index - 1];\n        const upper = this.values[index];\n        return lower + (pos - Math.floor(pos)) * (upper - lower);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/StdClock.html":{"url":"classes/StdClock.html","title":"class - StdClock","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StdClock\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/clock.ts\n        \n\n            \n                Description\n            \n            \n                Default implementation of a Clock. Uses Date.now() as source of truth.\n\n            \n\n            \n                Extends\n            \n            \n                    Clock\n            \n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                time\n                            \n                            \n                                    Public\n                                    Abstract\n                                time\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            time\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        time()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/clock.ts:68\n                            \n                        \n\n\n                \n                    \n                            Returns a Time object whos nanoseconds component is always zero.\n\n\n                            \n                            \n                            \n                                Returns :     Time\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Abstract\n                            time\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        time()\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     Clock\n\n                                \n                            \n                        \n                            \n                                    Defined in Clock:49\n                            \n                        \n\n\n                \n                    \n                            Gets the current point in time according to the logic of the clock implementation.\n\n\n                            \n                            \n                            \n                                Returns :     Time\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\n/**\n * Represents a point in time.\n *\n * @export\n * @interface Time\n */\nexport interface Time {\n    milliseconds: number;\n    nanoseconds: number;\n}\n\n/**\n * Gets the time elapsed from parameter one to parameter two in nanoseconds.\n *\n * Also assumes that the first point in time is older than the second point in time.\n *\n * @export\n * @param {Time} one time sample\n * @param {Time} two time sample\n * @returns {number} a duration in nanoseconds\n */\nexport function diff(one: Time, two: Time): number {\n    if (!one || !two) {\n        return 0;\n    }\n    const oneValue: number = one.nanoseconds + one.milliseconds * 1000000;\n    const twoValue: number = two.nanoseconds + two.milliseconds * 1000000;\n    return twoValue - oneValue;\n}\n\n/**\n * Abstraction of a clock. Used to determine progress in time.\n *\n * @export\n * @abstract\n * @class Clock\n */\nexport abstract class Clock {\n\n    /**\n     * Gets the current point in time according to the logic of the clock implementation.\n     *\n     * @abstract\n     * @returns {Time}\n     * @memberof Clock\n     */\n    public abstract time(): Time;\n\n}\n\n/**\n * Default implementation of a Clock. Uses Date.now() as source of truth.\n *\n * @export\n * @class StdClock\n * @extends {Clock}\n */\nexport class StdClock extends Clock {\n\n    /**\n     * Returns a Time object whos nanoseconds component is always zero.\n     *\n     * @returns {Time}\n     * @memberof StdClock\n     */\n    public time(): Time {\n        const time = {\n            milliseconds: Date.now(),\n            nanoseconds: 0,\n        };\n        return time;\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/StopWatch.html":{"url":"classes/StopWatch.html","title":"class - StopWatch","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StopWatch\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/timer.ts\n        \n\n            \n                Description\n            \n            \n                A convenience wrapper class for a Timer to measure durations.\n\n            \n\n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                clock\n                            \n                            \n                                    Private\n                                startTime\n                            \n                            \n                                    Private\n                                timer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                start\n                            \n                            \n                                    Public\n                                stop\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(clock: Clock, timer: Timer)\n                    \n                \n                        \n                            \n                                Defined in lib/metrics/timer.ts:47\n                            \n                        \n\n                \n                    \n                            Creates an instance of StopWatch.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        clock\n                                                  \n                                                        \n                                                                    Clock\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        timer\n                                                  \n                                                        \n                                                                    Timer\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            clock\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        clock:     Clock\n\n                    \n                \n                    \n                        \n                            Type :     Clock\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/timer.ts:31\n                            \n                        \n\n                \n                    \n                        Used to determine a duration.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            startTime\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        startTime:     Time\n\n                    \n                \n                    \n                        \n                            Type :     Time\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/timer.ts:47\n                            \n                        \n\n                \n                    \n                        Gets set when the start function is invoked using the clock.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            timer\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        timer:     Timer\n\n                    \n                \n                    \n                        \n                            Type :     Timer\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/timer.ts:39\n                            \n                        \n\n                \n                    \n                        The timer the duration is reported to.\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            start\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        start()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/timer.ts:67\n                            \n                        \n\n\n                \n                    \n                            Sets the startTime variable.\n\n\n                            \n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            stop\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        stop()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/timer.ts:79\n                            \n                        \n\n\n                \n                    \n                            Adds the duration between the last invocation of the start function\nand this invocation to the timer in nanoseconds.\n\n\n                            \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { Clock, diff, Time } from \"./clock\";\nimport { BucketCounting, Buckets } from \"./counting\";\nimport { Histogram } from \"./histogram\";\nimport { Int64Wrapper } from \"./int64\";\nimport { Meter } from \"./meter\";\nimport { Metered } from \"./metered\";\nimport { BaseMetric } from \"./metric\";\nimport { Reservoir } from \"./reservoir\";\nimport { Sampling } from \"./sampling\";\nimport { Snapshot } from \"./snapshot\";\nimport { Summarizing } from \"./summarizing\";\nimport { NANOSECOND, TimeUnit } from \"./time-unit\";\n\n/**\n * A convenience wrapper class for a {@link Timer} to measure durations.\n *\n * @export\n * @class StopWatch\n */\nexport class StopWatch {\n\n    /**\n     * Used to determine a duration.\n     *\n     * @private\n     * @type {Clock}\n     * @memberof StopWatch\n     */\n    private clock: Clock;\n    /**\n     * The timer the duration is reported to.\n     *\n     * @private\n     * @type {Timer}\n     * @memberof StopWatch\n     */\n    private timer: Timer;\n    /**\n     * Gets set when the start function is invoked using the clock.\n     *\n     * @private\n     * @type {Time}\n     * @memberof StopWatch\n     */\n    private startTime: Time;\n\n    /**\n     * Creates an instance of StopWatch.\n     *\n     * @param {Clock} clock\n     * @param {Timer} timer\n     * @memberof StopWatch\n     */\n    public constructor(clock: Clock, timer: Timer) {\n        this.clock = clock;\n        this.timer = timer;\n    }\n\n    /**\n     * Sets the startTime variable.\n     *\n     * @returns {this}\n     * @memberof StopWatch\n     */\n    public start(): this {\n        this.startTime = this.clock.time();\n        return this;\n    }\n\n    /**\n     * Adds the duration between the last invocation of the start function\n     * and this invocation to the timer in nanoseconds.\n     *\n     * @returns {this}\n     * @memberof StopWatch\n     */\n    public stop(): this {\n        this.timer.addDuration(diff(this.startTime, this.clock.time()), NANOSECOND);\n        return this;\n    }\n\n}\n\n/**\n * A Timer is a combination of a {@link Histogram} (for the duration of an event)\n * and a {@link Meter} (for the rate of events).\n *\n * @export\n * @class Timer\n * @extends {BaseMetric}\n * @implements {Metered}\n * @implements {Sampling}\n */\nexport class Timer extends BaseMetric implements BucketCounting, Metered, Sampling, Summarizing {\n\n    /**\n     * Used to determine a duration.\n     *\n     * @private\n     * @type {Clock}\n     * @memberof Timer\n     */\n    private clock: Clock;\n    /**\n     * Metric to measure the event rate.\n     *\n     * @private\n     * @type {Meter}\n     * @memberof Timer\n     */\n    private meter: Meter;\n    /**\n     * Metric to measure the duration of events.\n     *\n     * @private\n     * @type {Histogram}\n     * @memberof Timer\n     */\n    private histogram: Histogram;\n\n    /**\n     * Creates an instance of Timer.\n     *\n     * @param {Clock} clock\n     * @param {Reservoir} reservoir\n     * @param {string} [name]\n     * @param {string} [description]\n     * @param {string} [buckets=new Buckets()]\n     * @memberof Timer\n     */\n    public constructor(\n        clock: Clock,\n        reservoir: Reservoir,\n        name?: string,\n        description?: string,\n        buckets: Buckets = new Buckets()) {\n\n        super();\n        this.clock = clock;\n        this.name = name;\n        this.description = description;\n        this.meter = new Meter(clock, 1, name);\n        this.histogram = new Histogram(reservoir, name, description, buckets);\n    }\n\n    /**\n     * Adds a duration manually.\n     *\n     * @param {number} duration\n     * @param {TimeUnit} unit\n     * @returns {this}\n     * @memberof Timer\n     */\n    public addDuration(duration: number, unit: TimeUnit): this {\n        if (duration >= 0) {\n            this.histogram.update(unit.convertTo(duration, NANOSECOND));\n            this.meter.mark(1);\n        }\n        return this;\n    }\n\n    /**\n     * Gets a snapshot from the embedded {@link Histogram}.\n     *\n     * @returns {Snapshot}\n     * @memberof Timer\n     */\n    public getSnapshot(): Snapshot {\n        return this.histogram.getSnapshot();\n    }\n\n    /**\n     * Gets the count from the embedded {@link Histogram}.\n     *\n     * @returns {number}\n     * @memberof Timer\n     */\n    public getCount(): number {\n        return this.histogram.getCount();\n    }\n\n    /**\n     * Gets the sum from the embedded {@link Histogram}.\n     *\n     * @returns {Int64Wrapper}\n     * @memberof Timer\n     */\n    public getSum(): Int64Wrapper {\n        return this.histogram.getSum();\n    }\n\n    /**\n     * Gets the average rate per second of last 15 minutes.\n     *\n     * @returns {number}\n     * @memberof Timer\n     */\n    public get15MinuteRate(): number {\n        return this.meter.get15MinuteRate();\n    }\n\n    /**\n     * Gets the average rate per second of last 5 minutes.\n     *\n     * @returns {number}\n     * @memberof Timer\n     */\n    public get5MinuteRate(): number {\n        return this.meter.get5MinuteRate();\n    }\n\n    /**\n     * Gets the average rate per second of last minute.\n     *\n     * @returns {number}\n     * @memberof Timer\n     */\n    public get1MinuteRate(): number {\n        return this.meter.get1MinuteRate();\n    }\n\n    /**\n     * Gets the mean rate from the embedded {@link Meter}.\n     *\n     * @returns {number}\n     * @memberof Timer\n     */\n    public getMeanRate(): number {\n        return this.meter.getMeanRate();\n    }\n\n    /**\n     * Gets the bucket config from the internal {@link Histogram} and therefore representing the durations.\n     *\n     * @returns {Buckets}\n     * @memberof Timer\n     */\n    public getBuckets(): Buckets {\n        return this.histogram.getBuckets();\n    }\n\n    /**\n     * Gets the bucket counts from the internal {@link Histogram}.\n     *\n     * @returns {Map}\n     * @memberof Timer\n     */\n    public getCounts(): Map {\n        return this.histogram.getCounts();\n    }\n\n    /**\n     * Measures the duration of the passed function's invocation\n     * synchronously and adds it to the pool.\n     *\n     * @template T\n     * @returns {T}\n     * @memberof Timer\n     */\n    public time(f: () => T): T {\n        const startTime: Time = this.clock.time();\n        try {\n            return f();\n        } finally {\n            this.addDuration(diff(startTime, this.clock.time()), NANOSECOND);\n        }\n    }\n\n    /**\n     * Measures the duration of the passed function's invocation\n     * asynchronously and adds it to the pool.\n     *\n     * @template T\n     * @returns {T}\n     * @memberof Timer\n     */\n    public timeAsync(f: () => Promise): Promise {\n        const startTime: Time = this.clock.time();\n        return f()\n            .then((res) => {\n                this.addDuration(diff(startTime, this.clock.time()), NANOSECOND);\n                return res;\n            })\n            .catch((err) => {\n                this.addDuration(diff(startTime, this.clock.time()), NANOSECOND);\n                throw err;\n            });\n    }\n\n    /**\n     * Builds a new StopWatch.\n     *\n     * @returns {StopWatch}\n     * @memberof Timer\n     */\n    public newStopWatch(): StopWatch {\n        return new StopWatch(this.clock, this);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Summarizing.html":{"url":"interfaces/Summarizing.html","title":"interface - Summarizing","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Summarizing\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/summarizing.ts\n        \n\n            \n                Description\n            \n            \n                Interface fo all metric classes that build a sum of values.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    getSum\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getSum\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetSum()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/summarizing.ts:18\n                            \n                        \n\n\n                \n                    \n                            Gets the sum of values.\n\n\n                            \n                            \n                            \n                                Returns :     Int64Wrapper\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\nimport { Int64Wrapper } from \"./int64\";\n\n/**\n * Interface fo all metric classes that build a sum of values.\n *\n * @export\n * @interface Summarizing\n */\nexport interface Summarizing {\n\n    /**\n     * Gets the sum of values.\n     *\n     * @returns {Int64Wrapper}\n     * @memberof Summarizing\n     */\n    getSum(): Int64Wrapper;\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Taggable.html":{"url":"interfaces/Taggable.html","title":"interface - Taggable","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Taggable\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/taggable.ts\n        \n\n            \n                Description\n            \n            \n                An interface for taggable classes.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    addTags\n                                \n                                \n                                    getTag\n                                \n                                \n                                    getTags\n                                \n                                \n                                    removeTag\n                                \n                                \n                                    removeTags\n                                \n                                \n                                    setTag\n                                \n                                \n                                    setTags\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            addTags\n                            \n                            \n                        \n                    \n                \n                \n                    \naddTags(tags: Map)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/taggable.ts:54\n                            \n                        \n\n\n                \n                    \n                            Adds the specified tags to metric's tags.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        tags\n                                                        \n                                                                    Map\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getTag\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetTag(name: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/taggable.ts:26\n                            \n                        \n\n\n                \n                    \n                            Gets the specified tag or {@code null}.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     string\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getTags\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetTags()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/taggable.ts:17\n                            \n                        \n\n\n                \n                    \n                            Gets all tags.\n\n\n                            \n                            \n                            \n                                Returns :     Map\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            removeTag\n                            \n                            \n                        \n                    \n                \n                \n                    \nremoveTag(name: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/taggable.ts:63\n                            \n                        \n\n\n                \n                    \n                            Removes the specified tag.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            removeTags\n                            \n                            \n                        \n                    \n                \n                \n                    \nremoveTags(...names: string[])\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/taggable.ts:72\n                            \n                        \n\n\n                \n                    \n                            Removes the specified tag names.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        names\n                                                        \n                                                                    string[]\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            setTag\n                            \n                            \n                        \n                    \n                \n                \n                    \nsetTag(name: string, value: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/taggable.ts:36\n                            \n                        \n\n\n                \n                    \n                            Sets the specified tag.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        value\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            setTags\n                            \n                            \n                        \n                    \n                \n                \n                    \nsetTags(tags: Map)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/taggable.ts:45\n                            \n                        \n\n\n                \n                    \n                            Sets tags set.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        tags\n                                                        \n                                                                    Map\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\n/**\n * An interface for taggable classes.\n *\n * @export\n * @interface Taggable\n */\nexport interface Taggable {\n\n    /**\n     * Gets all tags.\n     *\n     * @returns {Map}\n     * @memberof Taggable\n     */\n    getTags(): Map;\n\n    /**\n     * Gets the specified tag or {@code null}.\n     *\n     * @param {string} name\n     * @returns {string}\n     * @memberof Taggable\n     */\n    getTag(name: string): string;\n\n    /**\n     * Sets the specified tag.\n     *\n     * @param {string} name\n     * @param {string} value\n     * @returns {this}\n     * @memberof Taggable\n     */\n    setTag(name: string, value: string): this;\n\n    /**\n     * Sets tags set.\n     *\n     * @param {Map} name\n     * @returns {this}\n     * @memberof Taggable\n     */\n    setTags(tags: Map): this;\n\n    /**\n     * Adds the specified tags to metric's tags.\n     *\n     * @param {Map} name\n     * @returns {this}\n     * @memberof Taggable\n     */\n    addTags(tags: Map): this;\n\n    /**\n     * Removes the specified tag.\n     *\n     * @param {string} name\n     * @returns {this}\n     * @memberof Taggable\n     */\n    removeTag(name: string): this;\n\n    /**\n     * Removes the specified tag names.\n     *\n     * @param {string[]} names\n     * @returns {this}\n     * @memberof Taggable\n     */\n    removeTags(...names: string[]): this;\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Tags.html":{"url":"interfaces/Tags.html","title":"interface - Tags","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Tags\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/reporter/metric-reporter.ts\n        \n\n            \n                Description\n            \n            \n                Helper interface for handling tags.\n\n            \n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:    string\n\n                    \n                \n                        \n                            \n                                Defined in lib/metrics/reporter/metric-reporter.ts:20\n                            \n                        \n            \n        \n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { Clock } from \"../clock\";\nimport { Counter, MonotoneCounter } from \"../counter\";\nimport { Event } from \"../event\";\nimport { Gauge } from \"../gauge\";\nimport { Histogram } from \"../histogram\";\nimport { Meter } from \"../meter\";\nimport { Metric } from \"../metric\";\nimport { MetricRegistry } from \"../metric-registry\";\nimport { Taggable } from \"../taggable\";\nimport { MILLISECOND, MINUTE } from \"../time-unit\";\nimport { Timer } from \"../timer\";\nimport { MetricEntry } from \"./metric-entry\";\nimport { MetricType } from \"./metric-type\";\n\n/**\n * Helper interface for handling tags.\n */\nexport interface Tags {\n    [key: string]: string;\n}\n\n/**\n * Helper interface for a reporting run.\n */\nexport interface OverallReportContext {\n    [key: string]: any;\n}\n\n/**\n * Helper interface for reporting runs.\n */\nexport interface MetricSetReportContext {\n    /**\n     * The OverallReportContext this context is running in.\n     *\n     * @type {OverallReportContext}\n     * @memberof ReportingContext\n     */\n    overallCtx: OverallReportContext;\n    /**\n     * The array of metric instance that is currently reported.\n     *\n     * @type {M[]}\n     * @memberof ReportingContext\n     */\n    metrics: M[];\n    /**\n     * The registry the metric are registered in.\n     *\n     * @type {MetricRegistry}\n     * @memberof ReportingContext\n     */\n    readonly registry: MetricRegistry;\n    /**\n     * The current date.\n     *\n     * @type {Date}\n     * @memberof ReportingContext\n     */\n    readonly date: Date;\n    /**\n     * The type of the metrics in the {@link #metrics} array.\n     *\n     * @type {MetricType}\n     * @memberof ReportingContext\n     */\n    readonly type: MetricType;\n}\n\n/**\n * Helper interface for reporting results.\n */\nexport interface ReportingResult {\n    /**\n     * The metric the result refers to.\n     *\n     * @type {M}\n     * @memberof ReportingResult\n     */\n    readonly metric: M;\n    /**\n     * The reporting result - implementation specific.\n     *\n     * @type {T}\n     * @memberof ReportingResult\n     */\n    readonly result: T;\n}\n\n/**\n * Options for the {@link MetricReporter}.\n *\n * @export\n * @interface MetricReporterOptions\n */\nexport interface MetricReporterOptions {\n    /**\n     * Clock used to determine the date for the reporting as well as the minimum-reporting timeout feature.\n     *\n     * @type {Clock}\n     * @memberof MetricReporterOptions\n     */\n    readonly clock?: Clock;\n    /**\n     * Timeout in minutes a metric need to be included in the report without having changed.\n     *\n     * @type {number}\n     * @memberof MetricReporterOptions\n     */\n    minReportingTimeout?: number;\n    /**\n     * Tags for this reporter instance - to be combined with the tags of each metric while reporting.\n     *\n     * @type {Map}\n     * @memberof MetricReporterOptions\n     */\n    tags?: Map;\n}\n\n/**\n * Interface for metric-reporter.\n *\n * @export\n * @interface IMetricReporter\n */\nexport interface IMetricReporter {\n    /**\n     * Gets the reporter tags.\n     *\n     * @returns {Map}\n     * @memberof IMetricReporter\n     */\n    getTags(): Map;\n\n    /**\n     * Sets the reporter tags.\n     *\n     * @param {Map} tags\n     * @returns {this}\n     * @memberof IMetricReporter\n     */\n    setTags(tags: Map): this;\n\n    /**\n     * Implementations start reporting metrics when called.\n     *\n     * @abstract\n     * @returns {Promise}\n     * @memberof IMetricReporter\n     */\n    start(): Promise;\n\n    /**\n     * Implementations stop reporting metrics when called.\n     *\n     * @abstract\n     * @returns {Promise}\n     * @memberof IMetricReporter\n     */\n    stop(): Promise;\n\n    /**\n     * Adds a new {@link MetricRegistry} to be reported.\n     *\n     * @param {MetricRegistry} metricRegistry\n     * @returns {this}\n     * @memberof IMetricReporter\n     */\n    addMetricRegistry(metricRegistry: MetricRegistry): this;\n\n    /**\n     * Removes the given {@link MetricRegistry} if it was previously added.\n     *\n     * @param {MetricRegistry} metricRegistry\n     * @returns {this}\n     * @memberof IMetricReporter\n     */\n    removeMetricRegistry(metricRegistry: MetricRegistry): this;\n\n    /**\n     * Reports an {@link Event}.\n     *\n     * Implementations can choose how to process ad-hoc events, wether it's\n     * queuing the events to the next call to report or sending events\n     * immediately.\n     *\n     * Also the usual reporting process of calling {@link #beforeReport}, do the reporting\n     * and call {@link #afterReport} may not be applied for ad-hoc events.\n     *\n     * This implementation does nothing and always resolved the specified evnet.\n     *\n     * @param {MetricRegistry} event\n     * @returns {this}\n     * @memberof IMetricReporter\n     */\n    reportEvent>(event: TEvent): Promise;\n\n    /**\n     * Sends events remaining in the queue (if a queue is used in the implementation).\n     *\n     * @returns {Promise}\n     * @memberof IMetricReporter\n     */\n    flushEvents(): Promise;\n}\n\n/**\n * Base-class for metric-reporter implementations.\n *\n * @export\n * @abstract\n * @class MetricReporter\n */\nexport abstract class MetricReporter implements IMetricReporter {\n\n    /**\n     * {@link MetricRegistry} instances.\n     *\n     * @protected\n     * @type {MetricRegistry[]}\n     * @memberof MetricReporter\n     */\n    protected readonly metricRegistries: MetricRegistry[] = [];\n    /**\n     * options for this reporter instance.\n     *\n     * @protected\n     * @type {O}\n     * @memberof MetricReporter\n     */\n    protected readonly options: O;\n    /**\n     * Keeps track of the reporting states for each metric.\n     *\n     * @protected\n     * @type {Map}\n     * @memberof MetricReporter\n     */\n    protected readonly metricStates: Map = new Map();\n\n    /**\n     * Creates an instance of MetricReporter.\n     *\n     * @param {O} options\n     * @param {Map} [tags=new Map()]\n     *          tags for this reporter instance - to be combined with the tags of each metric while reporting\n     * @param {Clock} [clock=new StdClock()]\n     *          clock used to determine the date for the reporting as well as the minimum-reporting timeout feature\n     * @param {number} [minReportingTimeout=1]\n     *          timeout in minutes a metric need to be included in the report without having changed\n     * @memberof MetricReporter\n     */\n    public constructor(options: O) {\n        this.options = options;\n    }\n\n    /**\n     * Gets the reporter tags.\n     *\n     * @returns {Map}\n     * @memberof MetricReporter\n     */\n    public getTags(): Map {\n        return this.options.tags;\n    }\n\n    /**\n     * Sets the reporter tags.\n     *\n     * @param {Map} tags\n     * @returns {this}\n     * @memberof MetricReporter\n     */\n    public setTags(tags: Map): this {\n        this.options.tags = tags;\n        return this;\n    }\n\n    /**\n     * Implementations start reporting metrics when called.\n     *\n     * @abstract\n     * @returns {Promise}\n     * @memberof MetricReporter\n     */\n    public abstract start(): Promise;\n\n    /**\n     * Implementations stop reporting metrics when called.\n     *\n     * @abstract\n     * @returns {Promise}\n     * @memberof MetricReporter\n     */\n    public abstract stop(): Promise;\n\n    /**\n     * Adds a new {@link MetricRegistry} to be reported.\n     *\n     * @param {MetricRegistry} metricRegistry\n     * @returns {this}\n     * @memberof MetricReporter\n     */\n    public addMetricRegistry(metricRegistry: MetricRegistry): this {\n        this.metricRegistries.push(metricRegistry);\n        return this;\n    }\n\n    /**\n     * Removes the given {@link MetricRegistry} if it was previously added.\n     *\n     * @param {MetricRegistry} metricRegistry\n     * @returns {this}\n     * @memberof MetricReporter\n     */\n    public removeMetricRegistry(metricRegistry: MetricRegistry): this {\n        const index: number = this.metricRegistries.indexOf(metricRegistry);\n        if (index > -1) {\n            this.metricRegistries.splice(index, 1);\n        }\n        return this;\n    }\n\n    /**\n     * Reports an {@link Event}.\n     *\n     * Implementations can choose how to process ad-hoc events, wether it's\n     * queuing the events to the next call to report or sending events\n     * immediately.\n     *\n     * Also the usual reporting process of calling {@link #beforeReport}, do the reporting\n     * and call {@link #afterReport} may not be applied for ad-hoc events.\n     *\n     * This implementation does nothing and always resolved the specified event.\n     *\n     * @param {Event} event\n     * @returns {Promise}\n     * @memberof MetricReporter\n     */\n    public async reportEvent>(event: TEvent): Promise {\n        return event;\n    }\n\n    /**\n     * Sends events remaining in the queue (if a queue is used in the implementation).\n     *\n     * @returns {Promise}\n     * @memberof MetricReporter\n     */\n    public async flushEvents(): Promise {\n    }\n\n    /**\n     * Called be before each reporting run.\n     *\n     * @protected\n     * @memberof MetricReporter\n     */\n    protected async beforeReport(ctx: OverallReportContext) {\n    }\n\n    /**\n     * Called after each reporting run.\n     *\n     * @protected\n     * @memberof MetricReporter\n     */\n    protected async afterReport(ctx: OverallReportContext) {\n    }\n\n    /**\n     * Run the reporting procedures. Calls {@link #beforeReport} before each\n     * {@link MetricRegistry}'s metrics are reported and {@link #afterReport}\n     * afterwards.\n     *\n     * @protected\n     * @memberof MetricReporter\n     */\n    protected async report(): Promise {\n        if (this.metricRegistries && this.metricRegistries.length > 0) {\n            const ctx = this.createOverallReportContext();\n            await this.beforeReport(ctx);\n            for (const registry of this.metricRegistries) {\n                await this.reportMetricRegistry(ctx, registry);\n            }\n            await this.afterReport(ctx);\n            return ctx;\n        }\n        return {};\n    }\n\n    /**\n     * Reporting function for a sinlge {@link MetricRegistry}.\n     * Calls {@link #createReportingContext} for each metric type.\n     * Afterwarsds calls {@link #reportMetrics} for each of the\n     * registry's metrics - grouped by type.\n     * And finally calls {@link #handleResults} for each of the results.\n     *\n     * @protected\n     * @param {MetricRegistry} registry\n     * @memberof MetricReporter\n     */\n    protected async reportMetricRegistry(ctx: OverallReportContext, registry: MetricRegistry) {\n        const date: Date = new Date(this.options.clock.time().milliseconds);\n        const counterCtx: MetricSetReportContext = this\n            .createMetricSetReportContext(ctx, registry, date, \"counter\");\n        const gaugeCtx: MetricSetReportContext> = this\n            .createMetricSetReportContext(ctx, registry, date, \"gauge\");\n        const histogramCtx: MetricSetReportContext = this\n            .createMetricSetReportContext(ctx, registry, date, \"histogram\");\n        const meterCtx: MetricSetReportContext = this\n            .createMetricSetReportContext(ctx, registry, date, \"meter\");\n        const timerCtx: MetricSetReportContext = this\n            .createMetricSetReportContext(ctx, registry, date, \"timer\");\n\n        counterCtx.metrics = registry.getMonotoneCounterList();\n        const monotoneCounterResults = this.reportMetrics(ctx, counterCtx,\n            (counter: MonotoneCounter) => this.reportCounter(counter, counterCtx),\n            (counter: MonotoneCounter) => counter.getCount());\n\n        counterCtx.metrics = registry.getCounterList();\n        const counterResults = this.reportMetrics(ctx, counterCtx as MetricSetReportContext,\n            (counter: Counter) => this.reportCounter(counter, counterCtx),\n            (counter: Counter) => counter.getCount());\n\n        gaugeCtx.metrics = registry.getGaugeList();\n        const gaugeResults = this.reportMetrics(ctx, gaugeCtx,\n            (gauge: Gauge) => this.reportGauge(gauge, gaugeCtx),\n            (gauge: Gauge) => gauge.getValue());\n\n        histogramCtx.metrics = registry.getHistogramList();\n        const histogramResults = this.reportMetrics(ctx, histogramCtx,\n            (histogram: Histogram) => this.reportHistogram(histogram, histogramCtx),\n            (histogram: Histogram) => histogram.getCount());\n\n        meterCtx.metrics = registry.getMeterList();\n        const meterResults = this.reportMetrics(ctx, meterCtx,\n            (meter: Meter) => this.reportMeter(meter, meterCtx),\n            (meter: Meter) => meter.getCount());\n\n        timerCtx.metrics = registry.getTimerList();\n        const timerResults = this.reportMetrics(ctx, timerCtx,\n            (timer: Timer) => this.reportTimer(timer, timerCtx),\n            (timer: Timer) => timer.getCount());\n\n        await this.handleResults(ctx, registry, date, \"counter\", monotoneCounterResults);\n        await this.handleResults(ctx, registry, date, \"counter\", counterResults);\n        await this.handleResults(ctx, registry, date, \"gauge\", gaugeResults);\n        await this.handleResults(ctx, registry, date, \"histogram\", histogramResults);\n        await this.handleResults(ctx, registry, date, \"meter\", meterResults);\n        await this.handleResults(ctx, registry, date, \"timer\", timerResults);\n    }\n\n    /**\n     * Creates an OverallReportContext.\n     *\n     * @protected\n     * @returns {OverallReportContext}\n     * @memberof MetricReporter\n     */\n    protected createOverallReportContext(): OverallReportContext {\n        return {\n        };\n    }\n\n    /**\n     * Creates a MetricSetReportContext with the specified arguments.\n     *\n     * @protected\n     * @param {OverallReportContext} overallCtx\n     * @param {MetricRegistry} registry\n     * @param {Date} date\n     * @param {MetricType} type\n     * @returns {MetricSetReportContext}\n     * @memberof MetricReporter\n     */\n    protected createMetricSetReportContext(\n        overallCtx: OverallReportContext,\n        registry: MetricRegistry,\n        date: Date,\n        type: MetricType): MetricSetReportContext {\n        return {\n            date,\n            metrics: [],\n            overallCtx,\n            registry,\n            type,\n        };\n    }\n\n    /**\n     * Filters out each metric that does not necessarily need to be reported\n     * and calls the specified reporting function for the remaining.\n     *\n     * @protected\n     * @template M type of the metric\n     * @template C typed ReportingContext\n     * @param {C} ctx\n     * @param {(metric: M, ctx: C) => T} reportFunction\n     * @param {(metric: M, ctx: C) => number} lastModifiedFunction\n     * @returns {Array>}\n     * @memberof MetricReporter\n     */\n    protected reportMetrics>(\n        overallCtx: OverallReportContext,\n        ctx: C,\n        reportFunction: (metric: M, ctx: C) => T,\n        lastModifiedFunction: (metric: M, ctx: C) => number): Array> {\n\n        return ctx.metrics\n            .filter((metric) => {\n                const metricId = (metric as any).id;\n                return !metricId || this.hasChanged(metricId, lastModifiedFunction(metric, ctx), ctx.date.getTime());\n            })\n            .map((metric) => ({\n                metric,\n                result: reportFunction(metric, ctx),\n            }))\n            .filter((result) => !!result.result);\n    }\n\n    /**\n     * Handles the reporting result for a group of metric instances.\n     *\n     * @protected\n     * @abstract\n     * @param {OverallReportContext} ctx\n     * @param {MetricRegistry} registry\n     * @param {Date} date\n     * @param {MetricType} type\n     * @param {Array>} results\n     * @returns {Promise}\n     * @memberof MetricReporter\n     */\n    protected abstract handleResults(\n        ctx: OverallReportContext,\n        registry: MetricRegistry,\n        date: Date,\n        type: MetricType,\n        results: Array>): Promise;\n\n    /**\n     * Does the reporting for a counter or monotone counter.\n     *\n     * @protected\n     * @abstract\n     * @param {(MonotoneCounter | Counter)} counter\n     * @param {(MetricSetReportContext)} ctx\n     * @returns {T}\n     * @memberof MetricReporter\n     */\n    protected abstract reportCounter(\n        counter: MonotoneCounter | Counter, ctx: MetricSetReportContext): T;\n\n    /**\n     * Does the reporting for a gauge.\n     *\n     * @protected\n     * @abstract\n     * @param {Gauge} gauge\n     * @param {MetricSetReportContext>} ctx\n     * @returns {T}\n     * @memberof MetricReporter\n     */\n    protected abstract reportGauge(gauge: Gauge, ctx: MetricSetReportContext>): T;\n\n    /**\n     * Does the reporting for a histogram.\n     *\n     * @protected\n     * @abstract\n     * @param {Histogram} histogram\n     * @param {MetricSetReportContext} ctx\n     * @returns {T}\n     * @memberof MetricReporter\n     */\n    protected abstract reportHistogram(histogram: Histogram, ctx: MetricSetReportContext): T;\n\n    /**\n     * Does the reporting for a meter.\n     *\n     * @protected\n     * @abstract\n     * @param {Meter} meter\n     * @param {MetricSetReportContext} ctx\n     * @returns {T}\n     * @memberof MetricReporter\n     */\n    protected abstract reportMeter(meter: Meter, ctx: MetricSetReportContext): T;\n\n    /**\n     * Does the reporting for a timer.\n     *\n     * @protected\n     * @abstract\n     * @param {Timer} timer\n     * @param {MetricSetReportContext} ctx\n     * @returns {T}\n     * @memberof MetricReporter\n     */\n    protected abstract reportTimer(timer: Timer, ctx: MetricSetReportContext): T;\n\n    /**\n     * Determines if a metric instance has changed it's value since the last check.\n     * This is always true if the minimal-reporting timeout was reached.\n     *\n     * @private\n     * @param {number} metricId\n     * @param {number} lastValue\n     * @param {number} date\n     * @returns {boolean}\n     * @memberof MetricReporter\n     */\n    protected hasChanged(metricId: number, lastValue: number, date: number): boolean {\n        let changed = true;\n        let metricEntry = {\n            lastReport: 0,\n            lastValue,\n        };\n        if (this.metricStates.has(metricId)) {\n            metricEntry = this.metricStates.get(metricId);\n            changed = metricEntry.lastValue !== lastValue;\n            if (!changed) {\n                const minReportingTimeout = MINUTE.convertTo(this.options.minReportingTimeout, MILLISECOND);\n                changed = metricEntry.lastReport + minReportingTimeout  tags[key] = tag);\n        }\n        if (registry && registry.getTags()) {\n            registry.getTags().forEach((tag, key) => tags[key] = tag);\n        }\n        if (taggable.getTags()) {\n            taggable.getTags().forEach((tag, key) => tags[key] = tag);\n        }\n        return tags;\n    }\n\n    /**\n     * Checks the number and gives it back or zero (0) if it's not a number.\n     *\n     * @protected\n     * @param {number} value\n     * @returns {number}\n     * @memberof MetricReporter\n     */\n    protected getNumber(value: number): number {\n        if (isNaN(value)) {\n            return 0;\n        }\n        return value;\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Time.html":{"url":"interfaces/Time.html","title":"interface - Time","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Time\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/clock.ts\n        \n\n            \n                Description\n            \n            \n                Represents a point in time.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        milliseconds\n                                \n                                \n                                        nanoseconds\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        milliseconds\n                                    \n                                \n                                \n                                    \n                                        milliseconds:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        nanoseconds\n                                    \n                                \n                                \n                                    \n                                        nanoseconds:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import \"source-map-support/register\";\n\n/**\n * Represents a point in time.\n *\n * @export\n * @interface Time\n */\nexport interface Time {\n    milliseconds: number;\n    nanoseconds: number;\n}\n\n/**\n * Gets the time elapsed from parameter one to parameter two in nanoseconds.\n *\n * Also assumes that the first point in time is older than the second point in time.\n *\n * @export\n * @param {Time} one time sample\n * @param {Time} two time sample\n * @returns {number} a duration in nanoseconds\n */\nexport function diff(one: Time, two: Time): number {\n    if (!one || !two) {\n        return 0;\n    }\n    const oneValue: number = one.nanoseconds + one.milliseconds * 1000000;\n    const twoValue: number = two.nanoseconds + two.milliseconds * 1000000;\n    return twoValue - oneValue;\n}\n\n/**\n * Abstraction of a clock. Used to determine progress in time.\n *\n * @export\n * @abstract\n * @class Clock\n */\nexport abstract class Clock {\n\n    /**\n     * Gets the current point in time according to the logic of the clock implementation.\n     *\n     * @abstract\n     * @returns {Time}\n     * @memberof Clock\n     */\n    public abstract time(): Time;\n\n}\n\n/**\n * Default implementation of a Clock. Uses Date.now() as source of truth.\n *\n * @export\n * @class StdClock\n * @extends {Clock}\n */\nexport class StdClock extends Clock {\n\n    /**\n     * Returns a Time object whos nanoseconds component is always zero.\n     *\n     * @returns {Time}\n     * @memberof StdClock\n     */\n    public time(): Time {\n        const time = {\n            milliseconds: Date.now(),\n            nanoseconds: 0,\n        };\n        return time;\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TimeUnit.html":{"url":"classes/TimeUnit.html","title":"class - TimeUnit","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TimeUnit\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/time-unit.ts\n        \n\n            \n                Description\n            \n            \n                Represents a time unit like second, minute, hour.\n\n            \n\n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                nanosecondsPerUnit\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                convertTo\n                            \n                            \n                                    Public\n                                getNanosecondsPerUnit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(nanosecondsPerUnit: number)\n                    \n                \n                        \n                            \n                                Defined in lib/metrics/time-unit.ts:18\n                            \n                        \n\n                \n                    \n                            Creates an instance of TimeUnit.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        nanosecondsPerUnit\n                                                  \n                                                        \n                                                                    number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            nanosecondsPerUnit\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        nanosecondsPerUnit:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/time-unit.ts:18\n                            \n                        \n\n                \n                    \n                        The nanoseconds for one unit of this time unit.\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            convertTo\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        convertTo(value: number, unit: TimeUnit)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/time-unit.ts:53\n                            \n                        \n\n\n                \n                    \n                            Converts the given value to the time unit specified.\nE.g.:\nNANOSECOND.convertTo(1000, MICROSECOND) equals 1 microsecond.\nMICROSECOND.convertTo(1000, NANOSECOND) equals 1000000 nanoseconds.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        value\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        unit\n                                                        \n                                                                    TimeUnit\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getNanosecondsPerUnit\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getNanosecondsPerUnit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/time-unit.ts:36\n                            \n                        \n\n\n                \n                    \n                            Gets the nanoseconds in one unit of this time unit.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\n/**\n * Represents a time unit like second, minute, hour.\n *\n * @export\n * @class TimeUnit\n */\nexport class TimeUnit {\n\n    /**\n     * The nanoseconds for one unit of this time unit.\n     *\n     * @private\n     * @type {number}\n     * @memberof TimeUnit\n     */\n    private nanosecondsPerUnit: number;\n\n    /**\n     * Creates an instance of TimeUnit.\n     *\n     * @param {number} nanosecondsPerUnit\n     * @memberof TimeUnit\n     */\n    public constructor(nanosecondsPerUnit: number) {\n        this.nanosecondsPerUnit = nanosecondsPerUnit;\n    }\n\n    /**\n     * Gets the nanoseconds in one unit of this time unit.\n     *\n     * @returns {number}\n     * @memberof TimeUnit\n     */\n    public getNanosecondsPerUnit(): number {\n        return this.nanosecondsPerUnit;\n    }\n\n    /**\n     * Converts the given value to the time unit specified.\n     *\n     * E.g.:\n     *\n     * NANOSECOND.convertTo(1000, MICROSECOND) equals 1 microsecond.\n     * MICROSECOND.convertTo(1000, NANOSECOND) equals 1000000 nanoseconds.\n     *\n     * @param {number} value\n     * @param {TimeUnit} unit\n     * @returns {number}\n     * @memberof TimeUnit\n     */\n    public convertTo(value: number, unit: TimeUnit): number {\n        return (value * this.nanosecondsPerUnit) / unit.nanosecondsPerUnit;\n    }\n\n}\n\n/**\n * One nanosecond.\n */\nexport const NANOSECOND = new TimeUnit(1);\n/**\n * One microsecond in nanoseconds.\n */\nexport const MICROSECOND = new TimeUnit(1000);\n/**\n * One millisecond in nanoseconds.\n */\nexport const MILLISECOND = new TimeUnit(1000000);\n/**\n * One second in nanoseconds.\n */\nexport const SECOND = new TimeUnit(1000000000);\n/**\n * One minute in nanoseconds.\n */\nexport const MINUTE = new TimeUnit(60000000000);\n/**\n * One hour in nanoseconds.\n */\nexport const HOUR = new TimeUnit(3600000000000);\n/**\n * One day in nanoseconds.\n */\nexport const DAY = new TimeUnit(86400000000000);\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\nChangelog\nAll notable changes to this project will be documented in this file.\nThe format is based on Keep a Changelog,\nand this project adheres to Semantic Versioning.\n[Unreleased]\n[1.17.1] - 2018-12-17\nChanged\n\nfixed typos in docs\nfixed minimum reporting timeout bug\nfixed last value reported bug\n\n[1.17.0] - 2018-11-30\nChanged\n\nmetric-reporter start and stop methods return promise\nupdated dependencies\n\n[1.16.0] - 2018-11-27\nAdded\n\nconvenience methods for setting tags on all metrics and reporters\nhttps://github.com/rstiller/inspector-metrics/pull/11\nthanks to https://github.com/doubret\n\n\n\nChanged\n\nadded nodejs 11 to playground\nset version of transitive dependency event-stream to 3.3.4\n\n[1.15.0] - 2018-11-25\nAdded\n\nad-hoc events\nhttps://github.com/rstiller/inspector-metrics/pull/10\nthanks to https://github.com/doubret\n\n\nmetric-reporter\n'reportEvent' method - reports an ad-hoc event\n'flushEvents' method - triggers immediate reporting of events if applicable\n\n\n\n[1.14.0] - 2018-11-22\nChanged\n\nintroduced fluent interface for public setter functions\nhttps://github.com/rstiller/inspector-metrics/pull/8\nthanks to https://github.com/doubret\n\n\n\n[1.13.1] - 2018-11-21\nChanged\n\nupdated docs in README / added https://github.com/rstiller/inspector-vm reference\nupdated docs in README / fixed first example code\n\n[1.13.0] - 2018-11-04\nAdded\n\nCHANGELOG\ncompile and test script for different node versions\ntrace method in Logger interface\nreporter\nScheduledReporter base class\nMetricType\nMetricEntry\n\n\n\nChanged\n\nupdated dependencies\nupdated docs in README / added https://github.com/rstiller/inspector-csv reference\nrefactored logger-reporter and metric-reporter\ntravisci build for node version 6, 7, 8, 9, 10, 11\ncompile target from \"es2017\" to \"es6\"\n\n[1.12.1] - 2018-10-16\nChanged\n\nfixed naming bug within metric-registry\n\n[1.12.0] - 2018-10-06\nAdded\n\noptional dependency 'native-hdr-histogram'\nHdrHistogram (extends Histogram)\n\nChanged\n\nupdated doc in README / added https://github.com/rstiller/inspector-prometheus reference\nmetric-registry\nadded 'newHdrHistogram' method\n\n\n\n[1.11.0] - 2018-10-01\nAdded\n\nBuckets & BucketCounting interfaces\nimplemented by Histogram & Timer\n\n\n\n[1.10.0] - 2018-09-29\nAdded\n\nMetadataContainer interface\nimplemented by BaseMetric\n\n\n\nChanged\n\nupdated dependencies\nupdated docs in README\n\n[1.9.1] - 2018-09-29\nAdded\n\nmetric-registry\n'isPureMonotoneCounter' static method\n\n\n'compodoc' as dev-dependency\n'homepage' field in package.json\n\nChanged\n\nfixed logger-reporter bug (log-metadata object mutated)\nadded MonotoneCounter to logger-reporter\nmetric-registry\n'GetMonotoneCounterList' now only returns MonotoneCounter instance\n\n\nupdated build scripts (for documentation)\n\nRemoved\n\nJenkinsfile\n'typedoc' as dev dependency\n\n[1.9.0] - 2018-09-28\nAdded\n\nMonotoneCounter class + tests\ndescription field to metrics\n'getDescription()' / 'setDescription()' method in Metric interface\nSummarizing interface\nimplemented in Histogram & Timer\n\n\nadded 'node-cint64' as dependency for 64bit integer support\nadded Int64Wrapper for 'node-cint64' module\n\nChanged\n\nupdated build scripts\n\n[1.8.8] - 2018-09-21\nAdded\n\njsdoc comments for most of the components\n\nChanged\n\nupdated dependencies\nupdated keywords in package.json\nadded description in package.json\n\n[1.8.7] - 2018-07-08\nChanged\n\ntravisci build for node version 6, 7, 8, 9, 10\nupdated dependencies\n\nRemoved\n\n'async' as dependency\n\n[1.8.6] - 2018-02-14\nChanged\n\nupdated docs in README\nbug fix for https://github.com/rstiller/inspector-metrics/issues/3 (thanks to https://github.com/rwfaulkner)\n\n[1.8.5] - 2018-02-08\nChanged\n\nremoved docs folder from npm package\nupdated doc in README / added https://github.com/rstiller/inspector-carbon reference\n\n[1.8.4] - 2018-02-02\nAdded\n\ntypedoc as dev-dependency\njsdoc comments for clock\n\nChanged\n\nupdated dependencies\nupdated Jenkinsfile\ndocs folder in npm package\nupdated doc in README / added https://github.com/rstiller/inspector-elasticsearch reference\n\n[1.8.3] - 2017-11-20\nChanged\n\nupdated dependencies\nremoved ts-node/register from mocha config\n\n[1.8.2] - 2017-11-19\nChanged\n\ntravisci build for node version 6, 7, 8, 9\nlogger-reporter doesn't use async queue anymore\nupdated dependencies\n\n[1.8.1] - 2017-09-17\nAdded\n\nsize / length gauges for arrays, maps, etc\n\n[1.7.0] - 2017-08-26\nAdded\n\nprivate id field to BaseMetric (incremented for each new metric instance)\n\n[1.6.0] - 2017-08-26\nChanged\n\nupdated dependencies\nadjusted line feed in tsconfig\nlogger\nmethod return 'any' instead of 'void' now\n\n\n\nRemoved\n[1.5.4] - 2017-08-18\nChanged\n\ntimer\nfixed 'timeAsync' method to be compatible with nodejs 6\n\n\n\n[1.5.3] - 2017-08-18\nAdded\n\ntimer\n'timeAsync' method\n\n\n\nChanged\n\nupdated dependencies\nupdated timer doc in README\n\nRemoved\n[1.5.2] - 2017-08-01\nAdded\n\ntravisci config\nbadges in README\n\nChanged\n\nupdated dependencies\n\n[1.5.1] - 2017-06-10\nChanged\n\nupdated dependencies\n\n[1.5.0] - 2017-06-10\nAdded\n\nmetric-registry\n'registerMetric' method\n\n\n\nChanged\n\nchange typescript compilation target from 'es6' to 'es2017'\nupdated documentation in README\n\n[1.4.2] - 2017-06-09\nChanged\n\nmetric-registry\nfixed bug 'isCounter' method\nfixed bug 'isHistogram' method\nfixed bug 'isMeter' method\nfixed bug 'isTimer' method\n\n\n\n[1.4.1] - 2017-06-09\nChanged\n\nuse rimraf to erase build folder\nmetric-registry\n'isCounter' method is now static\n'isHistogram' method is now static\n'isMeter' method is now static\n'isTimer' method is now static\n'isGauge' method is now static\n'isMetricSet' method is now static\n\n\n\n[1.3.0] - 2017-05-29\nAdded\n\n.editorconfig file\nname attribute to metric classes\nname parameter to metric constructors\n'getName' / 'setName' method in 'Metric' interface\nMetricRegistration class for registering the same metric instance in multiple registry under different names\nmetric-registry\n'getCounterList' method\n'getGaugeList' method\n'getHistogramList' method\n'getMeterList' method\n'getTimerList' method\n'getMetricList' method\n\n\n\nChanged\n\nuse metric array instead of Maps for metric instances in metric-registry internally\nmetric-registry\ndeprecate 'removeMetric' method (use 'removeMetrics' instead)\ndeprecate 'removeCounter' method (use 'removeMetrics' instead)\ndeprecate 'removeGauge' method (use 'removeMetrics' instead)\ndeprecate 'removeHistogram' method (use 'removeMetrics' instead)\ndeprecate 'removeMeter' method (use 'removeMetrics' instead)\ndeprecate 'removeTimer' method (use 'removeMetrics' instead)\ndeprecate 'getCounters' method (use 'getCounterList' instead)\ndeprecate 'getGauges' method (use 'getGaugeList' instead)\ndeprecate 'getHistograms' method (use 'getHistogramList' instead)\ndeprecate 'getMeters' method (use 'getMeterList' instead)\ndeprecate 'getTimers' method (use 'getTimerList' instead)\ndeprecate 'getMetrics' method (use 'getMetricList' instead)\n\n\nmetric-set\ndeprecate 'getMetrics' method (use 'getMetricList' instead)\n\n\ndon't remove comments / jsdocs from source when compiling\nupdated dependencies\n\n[1.2.1] - 2017-05-11\nChanged\n\nrefactored test / test suites\n\n[1.2.0] - 2017-04-10\nAdded\n\nmetric-registry-listener + tests\ndocumentation for metric-registry listener in README\n\nChanged\n\nrenamed 'IGroupable' & 'ITaggable' interfacer to 'Groupable' and 'Taggable'\n\n[1.1.1] - 2017-04-09\nChanged\n\nfixed import of group related classes and interfaces\n\n[1.1.0] - 2017-04-09\nAdded\n\nbase-metric class\nsupport for setting groups to metrics\n\nChanged\n\nlogger-reporter uses group for metric names\n\n[1.0.3] - 2017-04-05\nAdded\n\ndocumentation in README\n\n[1.0.2] - 2017-03-31\nChanged\n\nfixed main / typings path in package.json\n\n[1.0.1] - 2017-03-31\nChanged\n\ndefined fileset for npm package\n\n[1.0.0] - 2017-03-31\nInitial commit.\nAdded\n\nproject setup\nREADME\ntypescript config\nlint config\n\n\nlicensed under MIT license\nbasic metrics\ncounter\ngauge\nhistogram\nmeter\ntimer\n\n\nbasic metric-registry\nlogger reporter (console, scheduled)\nmocha testing (with chai, sinon)\nJenkins pipeline\nbasic unit-tests for components\nNYC code-coverage config\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                lib/metrics/clock.ts\n            \n            \n                class\n            \n            \n                Clock\n            \n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                lib/metrics/clock.ts\n            \n            \n                class\n            \n            \n                StdClock\n            \n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                lib/metrics/clock.ts\n            \n            \n                interface\n            \n            \n                Time\n            \n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                lib/metrics/clock.ts\n            \n            \n                function\n            \n            \n                diff\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/metrics/counter.ts\n            \n            \n                class\n            \n            \n                Counter\n            \n            \n                45 %\n                (15/33)\n            \n        \n        \n            \n                \n                lib/metrics/counter.ts\n            \n            \n                class\n            \n            \n                MonotoneCounter\n            \n            \n                41 %\n                (13/31)\n            \n        \n        \n            \n                \n                lib/metrics/counting.ts\n            \n            \n                class\n            \n            \n                Buckets\n            \n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                lib/metrics/counting.ts\n            \n            \n                interface\n            \n            \n                BucketCounting\n            \n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                lib/metrics/counting.ts\n            \n            \n                interface\n            \n            \n                Counting\n            \n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                lib/metrics/event.ts\n            \n            \n                class\n            \n            \n                Event\n            \n            \n                47 %\n                (16/34)\n            \n        \n        \n            \n                \n                lib/metrics/gauge.ts\n            \n            \n                class\n            \n            \n                SimpleGauge\n            \n            \n                40 %\n                (12/30)\n            \n        \n        \n            \n                \n                lib/metrics/gauge.ts\n            \n            \n                interface\n            \n            \n                Gauge\n            \n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                lib/metrics/groupable.ts\n            \n            \n                interface\n            \n            \n                Groupable\n            \n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                lib/metrics/hdr-histogram.ts\n            \n            \n                class\n            \n            \n                HdrHistogram\n            \n            \n                57 %\n                (24/42)\n            \n        \n        \n            \n                \n                lib/metrics/hdr-histogram.ts\n            \n            \n                class\n            \n            \n                HdrSnapshot\n            \n            \n                100 %\n                (15/15)\n            \n        \n        \n            \n                \n                lib/metrics/hdr-histogram.ts\n            \n            \n                variable\n            \n            \n                NativeHistogram\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/metrics/histogram.ts\n            \n            \n                class\n            \n            \n                Histogram\n            \n            \n                52 %\n                (20/38)\n            \n        \n        \n            \n                \n                lib/metrics/int64.ts\n            \n            \n                class\n            \n            \n                Int64Wrapper\n            \n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                lib/metrics/int64.ts\n            \n            \n                variable\n            \n            \n                Int64\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/metrics/metadata-container.ts\n            \n            \n                interface\n            \n            \n                MetadataContainer\n            \n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                lib/metrics/meter.ts\n            \n            \n                class\n            \n            \n                Meter\n            \n            \n                62 %\n                (30/48)\n            \n        \n        \n            \n                \n                lib/metrics/metered.ts\n            \n            \n                interface\n            \n            \n                Metered\n            \n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                lib/metrics/metric-registry-listener.ts\n            \n            \n                interface\n            \n            \n                MetricRegistryListener\n            \n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                lib/metrics/metric-registry.ts\n            \n            \n                class\n            \n            \n                MetricRegistration\n            \n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                lib/metrics/metric-registry.ts\n            \n            \n                class\n            \n            \n                MetricRegistry\n            \n            \n                61 %\n                (55/90)\n            \n        \n        \n            \n                \n                lib/metrics/metric-registry.ts\n            \n            \n                class\n            \n            \n                MetricRegistryListenerRegistration\n            \n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                lib/metrics/metric-set.ts\n            \n            \n                interface\n            \n            \n                MetricSet\n            \n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                lib/metrics/metric.ts\n            \n            \n                class\n            \n            \n                BaseMetric\n            \n            \n                30 %\n                (8/26)\n            \n        \n        \n            \n                \n                lib/metrics/metric.ts\n            \n            \n                interface\n            \n            \n                Metric\n            \n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                lib/metrics/moving-average.ts\n            \n            \n                class\n            \n            \n                ExponentiallyWeightedMovingAverage\n            \n            \n                68 %\n                (13/19)\n            \n        \n        \n            \n                \n                lib/metrics/moving-average.ts\n            \n            \n                interface\n            \n            \n                MovingAverage\n            \n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                lib/metrics/reporter/logger-reporter.ts\n            \n            \n                class\n            \n            \n                LoggerReporter\n            \n            \n                100 %\n                (16/16)\n            \n        \n        \n            \n                \n                lib/metrics/reporter/logger-reporter.ts\n            \n            \n                interface\n            \n            \n                LoggerReporterOptions\n            \n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                lib/metrics/reporter/logger-reporter.ts\n            \n            \n                interface\n            \n            \n                LoggerReportingContext\n            \n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                lib/metrics/reporter/logger-reporter.ts\n            \n            \n                interface\n            \n            \n                LogLine\n            \n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                lib/metrics/reporter/logger.ts\n            \n            \n                interface\n            \n            \n                Logger\n            \n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                lib/metrics/reporter/metric-entry.ts\n            \n            \n                interface\n            \n            \n                MetricEntry\n            \n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                lib/metrics/reporter/metric-reporter.ts\n            \n            \n                class\n            \n            \n                MetricReporter\n            \n            \n                100 %\n                (29/29)\n            \n        \n        \n            \n                \n                lib/metrics/reporter/metric-reporter.ts\n            \n            \n                interface\n            \n            \n                IMetricReporter\n            \n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                lib/metrics/reporter/metric-reporter.ts\n            \n            \n                interface\n            \n            \n                MetricReporterOptions\n            \n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                lib/metrics/reporter/metric-reporter.ts\n            \n            \n                interface\n            \n            \n                MetricSetReportContext\n            \n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                lib/metrics/reporter/metric-reporter.ts\n            \n            \n                interface\n            \n            \n                OverallReportContext\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/metrics/reporter/metric-reporter.ts\n            \n            \n                interface\n            \n            \n                ReportingResult\n            \n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                lib/metrics/reporter/metric-reporter.ts\n            \n            \n                interface\n            \n            \n                Tags\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/metrics/reporter/scheduled-reporter.ts\n            \n            \n                class\n            \n            \n                ScheduledMetricReporter\n            \n            \n                100 %\n                (32/32)\n            \n        \n        \n            \n                \n                lib/metrics/reporter/scheduled-reporter.ts\n            \n            \n                interface\n            \n            \n                ScheduledMetricReporterOptions\n            \n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                lib/metrics/reservoir.ts\n            \n            \n                class\n            \n            \n                DefaultReservoir\n            \n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                lib/metrics/reservoir.ts\n            \n            \n                class\n            \n            \n                SlidingWindowReservoir\n            \n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                lib/metrics/reservoir.ts\n            \n            \n                interface\n            \n            \n                Reservoir\n            \n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                lib/metrics/sampling.ts\n            \n            \n                interface\n            \n            \n                Sampling\n            \n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                lib/metrics/size-gauge.ts\n            \n            \n                class\n            \n            \n                SizeGauge\n            \n            \n                45 %\n                (15/33)\n            \n        \n        \n            \n                \n                lib/metrics/size-gauge.ts\n            \n            \n                interface\n            \n            \n                LengthAttributeInterface\n            \n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                lib/metrics/size-gauge.ts\n            \n            \n                interface\n            \n            \n                LengthMethodInterface\n            \n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                lib/metrics/size-gauge.ts\n            \n            \n                interface\n            \n            \n                SizeAttributeInterface\n            \n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                lib/metrics/size-gauge.ts\n            \n            \n                interface\n            \n            \n                SizeMethodInterface\n            \n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                lib/metrics/snapshot.ts\n            \n            \n                class\n            \n            \n                SimpleSnapshot\n            \n            \n                100 %\n                (16/16)\n            \n        \n        \n            \n                \n                lib/metrics/snapshot.ts\n            \n            \n                interface\n            \n            \n                Snapshot\n            \n            \n                100 %\n                (14/14)\n            \n        \n        \n            \n                \n                lib/metrics/summarizing.ts\n            \n            \n                interface\n            \n            \n                Summarizing\n            \n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                lib/metrics/taggable.ts\n            \n            \n                interface\n            \n            \n                Taggable\n            \n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                lib/metrics/time-unit.ts\n            \n            \n                class\n            \n            \n                TimeUnit\n            \n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                lib/metrics/time-unit.ts\n            \n            \n                variable\n            \n            \n                DAY\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/metrics/time-unit.ts\n            \n            \n                variable\n            \n            \n                HOUR\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/metrics/time-unit.ts\n            \n            \n                variable\n            \n            \n                MICROSECOND\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/metrics/time-unit.ts\n            \n            \n                variable\n            \n            \n                MILLISECOND\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/metrics/time-unit.ts\n            \n            \n                variable\n            \n            \n                MINUTE\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/metrics/time-unit.ts\n            \n            \n                variable\n            \n            \n                NANOSECOND\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/metrics/time-unit.ts\n            \n            \n                variable\n            \n            \n                SECOND\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/metrics/timer.ts\n            \n            \n                class\n            \n            \n                StopWatch\n            \n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                lib/metrics/timer.ts\n            \n            \n                class\n            \n            \n                Timer\n            \n            \n                58 %\n                (25/43)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            node-cint64 : 2.0.1\n        \n            source-map-support : 0.5.9\n    \n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            diff   (lib/.../clock.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    lib/metrics/clock.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            diff\n                            \n                            \n                        \n                    \n                \n                \n                    \ndiff(one, two)\n                    \n                \n\n\n\n\n                \n                    \n                            Gets the time elapsed from parameter one to parameter two in nanoseconds.\nAlso assumes that the first point in time is older than the second point in time.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        one\n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                time sample\n\n                                                        \n                                                \n                                                \n                                                        two\n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                time sample\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\ninspector-metrics\nMonitoring / metric library similar to http://metrics.dropwizard.io\n\n    \n        \n    \n    \n        \n    \n    \n        \n    \n    \n        \n    \n    \n        \n    \n\n\ninstall\nThis library is meant to be used with typescript / nodejs.\nnpm install --save inspector-metrics\nbasic usage\nAt least a MetricRegistry, a Metric and a MetricReporter is necessary\nto use the library.\nSupported metric types:\n\nCounter - measures an integer value (e.g. \"how many time was my function called, number of bookings in a sales system\")\nMonotoneCounter - a monotonically increasing integer value (e.g. \"error count\")\nEvent - ad-hoc event to report events (e.g. \"application start / deployment\", \"batch import started / ended\")\nGauge - measurement of a value (e.g. \"number of waiting threads on a resource\")\nHdrHistogram - recording and analyzing sampled data value counts across a configurable integer value range with configurable value precision\nHistogram - measures the statistical distribution of all values\nMeter - measures the rate of events over time (e.g. \"requests per second\")\nTimer - measures call-rate of a function and the distribution of the duration of all calls\n\nThere are libraries which collect some metrics:\n\nnode VM - collects memory & garbage collection metric for node VM\n\nThe library ships with a default console MetricReporter.\nSome other reporter:\n\nCarbon / Graphite\nCSV\nElasticsearch\nInflux\nPrometheus / Pushgateway\n\nimport { LoggerReporter, MetricRegistry, Timer } from \"inspector-metrics\";\n\n// a registry is a collection of metric objects\nconst registry = new MetricRegistry();\n// the reporter prints the stats\nconst reporter = new LoggerReporter({\n    log: global.console,\n});\n// a new timer instance\nconst requests: Timer = registry.newTimer(\"requests\");\n\nreporter.addMetricRegistry(registry);\nreporter.start();\n\n// example usage\nsetInterval(() => {\n    // should report a few milliseconds\n    requests.time(() => {\n        let a = 0;\n        // tslint:disable-next-line:prefer-const\n        let b = 1;\n        for (let i = 0; i Counter\nimport { Counter, MetricRegistry } from \"inspector-metrics\";\n\nconst registry = new MetricRegistry();\nconst requestCount: Counter = registry.newCounter(\"requestCount\");\n\n// +1\nrequestCount.increment(1);\n\n// -1\nrequestCount.decrement(1);\n\n// =0\nrequestCount.getCount();\n\nrequestCount.reset();MonotoneCounter\nimport { MonotoneCounter, MetricRegistry } from \"inspector-metrics\";\n\nconst registry = new MetricRegistry();\nconst errorCount: MonotoneCounter = registry.newMonotoneCounter(\"errorCount\");\n\n// +1\nerrorCount.increment(1);\n\n// causes error\nerrorCount.increment(-1);\n\n// =1\nerrorCount.getCount();\n\nerrorCount.reset();Event\nimport { BaseMetric, Event, MetricRegistry } from \"inspector-metrics\";\n\n// common application tags - applied to each metric / event\nconst tags: Map = new Map();\ntags.set(\"application\", \"project-name\");\ntags.set(\"hostname\", \"127.0.0.4\");\n\n// the reporter prints the stats\nconst reporter = new LoggerReporter({\n    log: global.console,\n    tags,\n});\n\n// not connected to a MetricRegistry like the other metrics\nconst event = new Event(\"application_started\", \"signals an application start\")\n    .setValue(\"started\")\n    .setTag(\"mode\", \"test\")\n    .setTag(\"component\", \"main\");\n\n// directly send to time-series DB\nawait reporter.reportEvent(event);Gauge\nimport { BaseMetric, Gauge, MetricRegistry, SimpleGauge } from \"inspector-metrics\";\n\nclass ArrayLengthGauge extends BaseMetric implements Gauge {\n\n    public constructor(name: string, private a: Array) {\n        super();\n        this.name = name;\n    }\n\n    public getValue(): number {\n        return this.a.length;\n    }\n\n}\n\nconst registry = new MetricRegistry();\nconst queueSize: Gauge = new SimpleGauge(\"requestCount\");\nlet myArray: number[] = [];\nconst arrayLength: Gauge = new ArrayLengthGauge(\"arrayLength\", myArray);\n\nregistry.registerMetric(queueSize);\nregistry.registerMetric(arrayLength);\n\nqueueSize.setValue(12345);\n\n// 12345\nqueueSize.getValue();\n\nmyArray.push(1);\nmyArray.push(2);\nmyArray.push(3);\n\n// 3\narrayLength.getValue();Histogram\nimport { Histogram, MetricRegistry, Snapshot } from \"inspector-metrics\";\n\nconst registry = new MetricRegistry();\n// measures a duration / latency\nconst requestLatency: Histogram = registry.newHistogram(\"requestLatency\");\n\nrequestLatency.update(12345);\nrequestLatency.update(23456);\nrequestLatency.update(34567);\n\n// a copy of the current values\nconst snapshot: Snapshot = requestLatency.getSnapshot();\n\n// mean count\nconst mean: number = snapshot.getMean();HdrHistogram\nimport { HdrHistogram, MetricRegistry, Snapshot } from \"inspector-metrics\";\n\nconst registry = new MetricRegistry();\n// measures a duration / latency between 1 and 1000000000 nanoseconds\nconst requestLatency: HdrHistogram = registry.newHdrHistogram(\"requestLatency\", 1, 1000000000);\n\n// 102 microseconds in nanoseconds\nrequestLatency.update(102000);\n// 4.390 milliseconds in nanoseconds\nrequestLatency.update(4390000);\n\n// only snapshot interface - always uses the current values\n// since the native-hdr-histogram is used as a reference\nconst snapshot: Snapshot = requestLatency.getSnapshot();\n\n// mean count\nconst mean: number = snapshot.getMean();Meter\nimport { Meter, MetricRegistry } from \"inspector-metrics\";\n\nconst registry = new MetricRegistry();\nconst callCount: Meter = registry.newMeter(\"callCount\");\n\ncallCount.mark(1);\n\nconst count: number = callCount.getCount();\nconst m15: number = callCount.get15MinuteRate();\nconst m5: number = callCount.get5MinuteRate();\nconst m1: number = callCount.get1MinuteRate();\nconst mean: number = callCount.getMeanRate();Timer\nimport { MetricRegistry, MILLISECOND, Snapshot, StopWatch, Timer } from \"inspector-metrics\";\n\nconst registry = new MetricRegistry();\nconst callStats: Timer = registry.newTimer(\"callStats\");\n\ncallStats.addDuration(100, MILLISECOND);\n\n// 1\nconst count: number = callStats.getCount();\n// ~1\nconst m15: number = callStats.get15MinuteRate();\n// ~1\nconst m5: number = callStats.get5MinuteRate();\n// ~1\nconst m1: number = callStats.get1MinuteRate();\n// ~1\nconst mean: number = callStats.getMeanRate();\n\nlet snapshot: Snapshot = callStats.getSnapshot();\n\n// some value around 100000000 (100ms in nanoseconds)\nconst mean: number = snapshot.getMean();\n\nconst timer: StopWatch = callStats.newStopWatch();\n\ntimer.start();\n// 100ms has passed\ntimer.stop();\n\nsnapshot = callStats.getSnapshot();\n// snapshot gets updated through stop-watch ...\nsnapshot.getMean();\n\ncallStats.time(() => {\n    // some time has passed\n});\n\n// works with promise too\nawait callStats.timeAsync(async () => {\n    // some time has passed\n});\n\nsnapshot = callStats.getSnapshot();\n// snapshot gets updated through time function ...\nsnapshot.getMean();MetricListeners\nimport { Metric, MetricRegistry, MetricRegistryListener, MetricRegistryListenerRegistration } from \"inspector-metrics\";\n\nclass Listener implements MetricRegistryListener {\n\n    public metricAdded(name: string, metric: Metric): void {\n        console.log(`added metric ${name}: ${metric}`);\n    }\n\n    public metricRemoved(name: string, metric: Metric): void {\n        console.log(`removed metric ${name}: ${metric}`);\n    }\n\n}\n\nconst registry = new MetricRegistry();\nconst registration: MetricRegistryListenerRegistration = registry.addListener(new Listener());\n\n// prints \"added metric requests: Counter...\" via console\nregistry.newCounter(\"requests\");\n\n// removes the listener\nregistration.remove();Metric Groups\nEach metric can have a group, which is used to gather different metrics\nwithin metric reporter instances. E.g. if only gauges are used\nto gather metrics data a group can be used to report them all as one\nmeasure point with different fields.\nimport { Gauge, MetricRegistry } from \"inspector-metrics\";\n\nconst registry = new MetricRegistry();\n// reports the internal storage capacity of a queue\nconst capacity: Gauge = ...;\n// reports the element count in the queue\nconst queueSize: Gauge = ...;\n\n// all values grouped as buffer\nregistry.registerMetric(queueSize, \"buffer\");\nregistry.registerMetric(capacity, \"buffer\");\n// counts the number of allocations during the execution of the application\nregistry.newCounter(\"newAllocations\", \"buffer\");\n\n// the reporter can now report the values as a single measurement point if supported ...local dev\ncompile & test with different nodejs versions\nbuild docker images:  \ndocker-compose buildrun tests:  \ndocker-compose run node6\ndocker-compose run node7\ndocker-compose run node8\ndocker-compose run node9\ndocker-compose run node10\ndocker-compose run node11releaseing / publish docs\n# check functionality\nnpm i\nnpm run build\n\n# release\ngit commit -am \"release of a.b.c\"\ngit push\ngit tag va.b.c\ngit push --tags\n\n# publish docs\nrm -fr docs/\ngit branch -D gh-pages\ngit worktree prune\ngit worktree list\ngit worktree add -b gh-pages docs origin/gh-pages\nnpm run publishDocs\n\n# publish package\nnpm publishLicense\nMIT\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2017 \nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n\n\n    \n        \n            \n                \n                    \n                    27 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    32 Interfaces\n                \n            \n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            MetricType   (lib/.../metric-type.ts)\n                        \n                        \n                            NameFactory   (lib/.../metric-registry.ts)\n                        \n                        \n                            Scheduler   (lib/.../scheduled-reporter.ts)\n                        \n                        \n                            ValueExtractor   (lib/.../size-gauge.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    lib/metrics/reporter/metric-type.ts\n    \n        \n            \n                \n                    \n                        \n                        MetricType\n                    \n                \n                    \n                        \n                            Enumeration of all metric types.\n\n                        \n                    \n                \n                    \n                        MetricType:     \"counter\" | \"gauge\" | \"histogram\" | \"meter\" | \"timer\"\n\n                    \n                \n            \n        \n\n    lib/metrics/metric-registry.ts\n    \n        \n            \n                \n                    \n                        \n                        NameFactory\n                    \n                \n                \n                    \n                        NameFactory:     function\n\n                    \n                \n            \n        \n\n    lib/metrics/reporter/scheduled-reporter.ts\n    \n        \n            \n                \n                    \n                        \n                        Scheduler\n                    \n                \n                    \n                        \n                            Scheduler function type definition.\n\n                        \n                    \n                \n                    \n                        Scheduler:     function\n\n                    \n                \n            \n        \n\n    lib/metrics/size-gauge.ts\n    \n        \n            \n                \n                    \n                        \n                        ValueExtractor\n                    \n                \n                \n                    \n                        ValueExtractor:     function\n\n                    \n                \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"unit-test.html":{"url":"unit-test.html","title":"unit-test - unit-test","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Unit test coverage\n\n\n\n    \n    \n    \n    \n\n\n\n    \n        \n            File\n            Statements\n            Branches\n            Functions\n            Lines\n        \n    \n    \n        \n            \n                \n                    /mnt/c/git/inspector-metrics/lib/metrics/clock.ts\n            \n            \n                100 %\n                (11/11)\n            \n            \n                100 %\n                (4/4)\n            \n            \n                100 %\n                (2/2)\n            \n            \n                100 %\n                (11/11)\n            \n        \n        \n            \n                \n                        /mnt/c/git/inspector-metrics/lib/metrics/counter.ts\n            \n            \n                100 %\n                (20/20)\n            \n            \n                100 %\n                (2/2)\n            \n            \n                100 %\n                (7/7)\n            \n            \n                100 %\n                (20/20)\n            \n        \n        \n            \n                \n                        /mnt/c/git/inspector-metrics/lib/metrics/counting.ts\n            \n            \n                90 %\n                (26/29)\n            \n            \n                67 %\n                (6/9)\n            \n            \n                100 %\n                (4/4)\n            \n            \n                89 %\n                (25/28)\n            \n        \n        \n            \n                \n                        /mnt/c/git/inspector-metrics/lib/metrics/event.ts\n            \n            \n                80 %\n                (12/15)\n            \n            \n                0 %\n                (0/1)\n            \n            \n                67 %\n                (4/6)\n            \n            \n                80 %\n                (12/15)\n            \n        \n        \n            \n                \n                        /mnt/c/git/inspector-metrics/lib/metrics/gauge.ts\n            \n            \n                100 %\n                (10/10)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (3/3)\n            \n            \n                100 %\n                (10/10)\n            \n        \n        \n            \n                \n                        /mnt/c/git/inspector-metrics/lib/metrics/groupable.ts\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n        \n        \n            \n                \n                        /mnt/c/git/inspector-metrics/lib/metrics/hdr-histogram.ts\n            \n            \n                91 %\n                (32/35)\n            \n            \n                69 %\n                (11/16)\n            \n            \n                88 %\n                (15/17)\n            \n            \n                91 %\n                (32/35)\n            \n        \n        \n            \n                \n                        /mnt/c/git/inspector-metrics/lib/metrics/histogram.ts\n            \n            \n                100 %\n                (27/27)\n            \n            \n                100 %\n                (3/3)\n            \n            \n                100 %\n                (7/7)\n            \n            \n                100 %\n                (27/27)\n            \n        \n        \n            \n                \n                        /mnt/c/git/inspector-metrics/lib/metrics/int64.ts\n            \n            \n                86 %\n                (6/7)\n            \n            \n                100 %\n                (1/1)\n            \n            \n                75 %\n                (3/4)\n            \n            \n                86 %\n                (6/7)\n            \n        \n        \n            \n                \n                        /mnt/c/git/inspector-metrics/lib/metrics/metadata-container.ts\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n        \n        \n            \n                \n                        /mnt/c/git/inspector-metrics/lib/metrics/meter.ts\n            \n            \n                100 %\n                (48/48)\n            \n            \n                100 %\n                (4/4)\n            \n            \n                100 %\n                (9/9)\n            \n            \n                100 %\n                (48/48)\n            \n        \n        \n            \n                \n                        /mnt/c/git/inspector-metrics/lib/metrics/metered.ts\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n        \n        \n            \n                \n                        /mnt/c/git/inspector-metrics/lib/metrics/metric-registry-listener.ts\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n        \n        \n            \n                \n                        /mnt/c/git/inspector-metrics/lib/metrics/metric-registry.ts\n            \n            \n                96 %\n                (171/178)\n            \n            \n                88 %\n                (82/93)\n            \n            \n                93 %\n                (80/86)\n            \n            \n                96 %\n                (167/174)\n            \n        \n        \n            \n                \n                        /mnt/c/git/inspector-metrics/lib/metrics/metric-set.ts\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n        \n        \n            \n                \n                        /mnt/c/git/inspector-metrics/lib/metrics/metric.ts\n            \n            \n                72 %\n                (28/39)\n            \n            \n                0 %\n                (0/2)\n            \n            \n                71 %\n                (15/21)\n            \n            \n                76 %\n                (28/37)\n            \n        \n        \n            \n                \n                        /mnt/c/git/inspector-metrics/lib/metrics/moving-average.ts\n            \n            \n                100 %\n                (29/29)\n            \n            \n                100 %\n                (4/4)\n            \n            \n                100 %\n                (6/6)\n            \n            \n                100 %\n                (29/29)\n            \n        \n        \n            \n                \n                        /mnt/c/git/inspector-metrics/lib/metrics/reservoir.ts\n            \n            \n                100 %\n                (22/22)\n            \n            \n                100 %\n                (4/4)\n            \n            \n                100 %\n                (8/8)\n            \n            \n                100 %\n                (22/22)\n            \n        \n        \n            \n                \n                        /mnt/c/git/inspector-metrics/lib/metrics/sampling.ts\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n        \n        \n            \n                \n                        /mnt/c/git/inspector-metrics/lib/metrics/size-gauge.ts\n            \n            \n                84 %\n                (21/25)\n            \n            \n                88 %\n                (14/16)\n            \n            \n                82 %\n                (9/11)\n            \n            \n                90 %\n                (18/20)\n            \n        \n        \n            \n                \n                        /mnt/c/git/inspector-metrics/lib/metrics/snapshot.ts\n            \n            \n                95 %\n                (41/43)\n            \n            \n                87 %\n                (13/15)\n            \n            \n                100 %\n                (17/17)\n            \n            \n                95 %\n                (39/41)\n            \n        \n        \n            \n                \n                        /mnt/c/git/inspector-metrics/lib/metrics/summarizing.ts\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n        \n        \n            \n                \n                        /mnt/c/git/inspector-metrics/lib/metrics/taggable.ts\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n        \n        \n            \n                \n                        /mnt/c/git/inspector-metrics/lib/metrics/time-unit.ts\n            \n            \n                100 %\n                (12/12)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (3/3)\n            \n            \n                100 %\n                (12/12)\n            \n        \n        \n            \n                \n                        /mnt/c/git/inspector-metrics/lib/metrics/timer.ts\n            \n            \n                96 %\n                (43/45)\n            \n            \n                100 %\n                (3/3)\n            \n            \n                95 %\n                (18/19)\n            \n            \n                96 %\n                (43/45)\n            \n        \n        \n            \n                \n                        /mnt/c/git/inspector-metrics/lib/metrics/reporter/logger-reporter.ts\n            \n            \n                86 %\n                (48/56)\n            \n            \n                37 %\n                (7/19)\n            \n            \n                82 %\n                (9/11)\n            \n            \n                86 %\n                (48/56)\n            \n        \n        \n            \n                \n                        /mnt/c/git/inspector-metrics/lib/metrics/reporter/logger.ts\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n        \n        \n            \n                \n                        /mnt/c/git/inspector-metrics/lib/metrics/reporter/metric-entry.ts\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n        \n        \n            \n                \n                        /mnt/c/git/inspector-metrics/lib/metrics/reporter/metric-reporter.ts\n            \n            \n                97 %\n                (91/94)\n            \n            \n                88 %\n                (21/24)\n            \n            \n                89 %\n                (31/35)\n            \n            \n                97 %\n                (88/91)\n            \n        \n        \n            \n                \n                        /mnt/c/git/inspector-metrics/lib/metrics/reporter/scheduled-reporter.ts\n            \n            \n                75 %\n                (9/12)\n            \n            \n                0 %\n                (0/2)\n            \n            \n                75 %\n                (3/4)\n            \n            \n                73 %\n                (8/11)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            DAY   (lib/.../time-unit.ts)\n                        \n                        \n                            HOUR   (lib/.../time-unit.ts)\n                        \n                        \n                            Int64   (lib/.../int64.ts)\n                        \n                        \n                            MICROSECOND   (lib/.../time-unit.ts)\n                        \n                        \n                            MILLISECOND   (lib/.../time-unit.ts)\n                        \n                        \n                            MINUTE   (lib/.../time-unit.ts)\n                        \n                        \n                            NANOSECOND   (lib/.../time-unit.ts)\n                        \n                        \n                            NativeHistogram   (lib/.../hdr-histogram.ts)\n                        \n                        \n                            SECOND   (lib/.../time-unit.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    lib/metrics/time-unit.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            DAY\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        DAY:     \n\n                    \n                \n                    \n                        \n                            Default value : new TimeUnit(86400000000000)\n                        \n                    \n\n                \n                    \n                        One day in nanoseconds.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            HOUR\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        HOUR:     \n\n                    \n                \n                    \n                        \n                            Default value : new TimeUnit(3600000000000)\n                        \n                    \n\n                \n                    \n                        One hour in nanoseconds.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            MICROSECOND\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        MICROSECOND:     \n\n                    \n                \n                    \n                        \n                            Default value : new TimeUnit(1000)\n                        \n                    \n\n                \n                    \n                        One microsecond in nanoseconds.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            MILLISECOND\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        MILLISECOND:     miscellaneou\n\n                    \n                \n                    \n                        \n                            Type :     miscellaneou\n\n                        \n                    \n                    \n                        \n                            Default value : new TimeUnit(1000000)\n                        \n                    \n\n                \n                    \n                        One millisecond in nanoseconds.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            MINUTE\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        MINUTE:     \n\n                    \n                \n                    \n                        \n                            Default value : new TimeUnit(60000000000)\n                        \n                    \n\n                \n                    \n                        One minute in nanoseconds.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            NANOSECOND\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        NANOSECOND:     \n\n                    \n                \n                    \n                        \n                            Default value : new TimeUnit(1)\n                        \n                    \n\n                \n                    \n                        One nanosecond.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            SECOND\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        SECOND:     \n\n                    \n                \n                    \n                        \n                            Default value : new TimeUnit(1000000000)\n                        \n                    \n\n                \n                    \n                        One second in nanoseconds.\n\n                    \n                \n\n            \n        \n\n    lib/metrics/int64.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            Int64\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        Int64:     \n\n                    \n                \n                    \n                        \n                            Default value : require(\"node-cint64\").Int64\n                        \n                    \n\n                \n                    \n                        native Int64 lib.\n\n                    \n                \n\n            \n        \n\n    lib/metrics/hdr-histogram.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            NativeHistogram\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        NativeHistogram:     any\n\n                    \n                \n                    \n                        \n                            Type :     any\n\n                        \n                    \n                    \n                        \n                            Default value : null\n                        \n                    \n\n                \n                    \n                        The 'native-hdr-histogram' module (optional).\n\n                    \n                \n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
